"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/datatables.net";
exports.ids = ["vendor-chunks/datatables.net"];
exports.modules = {

/***/ "(ssr)/./node_modules/datatables.net/js/dataTables.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/datatables.net/js/dataTables.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\");\n/*! DataTables 2.3.0\n * Â© SpryMedia Ltd - datatables.net/license\n */ \n// DataTables code uses $ internally, but we want to be able to\n// reassign $ with the `use` method, so it is a regular var.\nvar $ = jquery__WEBPACK_IMPORTED_MODULE_0__;\nvar DataTable = function(selector, options) {\n    // Check if called with a window or jQuery object for DOM less applications\n    // This is for backwards compatibility\n    if (DataTable.factory(selector, options)) {\n        return DataTable;\n    }\n    // When creating with `new`, create a new DataTable, returning the API instance\n    if (this instanceof DataTable) {\n        return $(selector).DataTable(options);\n    } else {\n        // Argument switching\n        options = selector;\n    }\n    var _that = this;\n    var emptyInit = options === undefined;\n    var len = this.length;\n    if (emptyInit) {\n        options = {};\n    }\n    // Method to get DT API instance from jQuery object\n    this.api = function() {\n        return new _Api(this);\n    };\n    this.each(function() {\n        // For each initialisation we want to give it a clean initialisation\n        // object that can be bashed around\n        var o = {};\n        var oInit = len > 1 ? _fnExtend(o, options, true) : options;\n        var i = 0, iLen;\n        var sId = this.getAttribute(\"id\");\n        var defaults = DataTable.defaults;\n        var $this = $(this);\n        // Sanity check\n        if (this.nodeName.toLowerCase() != \"table\") {\n            _fnLog(null, 0, \"Non-table node initialisation (\" + this.nodeName + \")\", 2);\n            return;\n        }\n        // Special case for options\n        if (oInit.on && oInit.on.options) {\n            _fnListener($this, \"options\", oInit.on.options);\n        }\n        $this.trigger(\"options.dt\", oInit);\n        /* Backwards compatibility for the defaults */ _fnCompatOpts(defaults);\n        _fnCompatCols(defaults.column);\n        /* Convert the camel-case defaults to Hungarian */ _fnCamelToHungarian(defaults, defaults, true);\n        _fnCamelToHungarian(defaults.column, defaults.column, true);\n        /* Setting up the initialisation object */ _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()), true);\n        /* Check to see if we are re-initialising a table */ var allSettings = DataTable.settings;\n        for(i = 0, iLen = allSettings.length; i < iLen; i++){\n            var s = allSettings[i];\n            /* Base check on table node */ if (s.nTable == this || s.nTHead && s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {\n                var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n                var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n                if (emptyInit || bRetrieve) {\n                    return s.oInstance;\n                } else if (bDestroy) {\n                    new DataTable.Api(s).destroy();\n                    break;\n                } else {\n                    _fnLog(s, 0, \"Cannot reinitialise DataTable\", 3);\n                    return;\n                }\n            }\n            /* If the element we are initialising has the same ID as a table which was previously\n\t\t\t * initialised, but the table nodes don't match (from before) then we destroy the old\n\t\t\t * instance by simply deleting it. This is under the assumption that the table has been\n\t\t\t * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n\t\t\t */ if (s.sTableId == this.id) {\n                allSettings.splice(i, 1);\n                break;\n            }\n        }\n        /* Ensure the table has an ID - required for accessibility */ if (sId === null || sId === \"\") {\n            sId = \"DataTables_Table_\" + DataTable.ext._unique++;\n            this.id = sId;\n        }\n        /* Create the settings object for this table and set some of the default parameters */ var oSettings = $.extend(true, {}, DataTable.models.oSettings, {\n            \"sDestroyWidth\": $this[0].style.width,\n            \"sInstance\": sId,\n            \"sTableId\": sId,\n            colgroup: $(\"<colgroup>\").prependTo(this),\n            fastData: function(row, column, type) {\n                return _fnGetCellData(oSettings, row, column, type);\n            }\n        });\n        oSettings.nTable = this;\n        oSettings.oInit = oInit;\n        allSettings.push(oSettings);\n        // Make a single API instance available for internal handling\n        oSettings.api = new _Api(oSettings);\n        // Need to add the instance after the instance after the settings object has been added\n        // to the settings array, so we can self reference the table instance if more than one\n        oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable();\n        // Backwards compatibility, before we apply all the defaults\n        _fnCompatOpts(oInit);\n        // If the length menu is given, but the init display length is not, use the length menu\n        if (oInit.aLengthMenu && !oInit.iDisplayLength) {\n            oInit.iDisplayLength = Array.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : $.isPlainObject(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0].value : oInit.aLengthMenu[0];\n        }\n        // Apply the defaults and init options to make a single init object will all\n        // options defined from defaults and instance options.\n        oInit = _fnExtend($.extend(true, {}, defaults), oInit);\n        // Map the initialisation options onto the settings object\n        _fnMap(oSettings.oFeatures, oInit, [\n            \"bPaginate\",\n            \"bLengthChange\",\n            \"bFilter\",\n            \"bSort\",\n            \"bSortMulti\",\n            \"bInfo\",\n            \"bProcessing\",\n            \"bAutoWidth\",\n            \"bSortClasses\",\n            \"bServerSide\",\n            \"bDeferRender\"\n        ]);\n        _fnMap(oSettings, oInit, [\n            \"ajax\",\n            \"fnFormatNumber\",\n            \"sServerMethod\",\n            \"aaSorting\",\n            \"aaSortingFixed\",\n            \"aLengthMenu\",\n            \"sPaginationType\",\n            \"iStateDuration\",\n            \"bSortCellsTop\",\n            \"iTabIndex\",\n            \"sDom\",\n            \"fnStateLoadCallback\",\n            \"fnStateSaveCallback\",\n            \"renderer\",\n            \"searchDelay\",\n            \"rowId\",\n            \"caption\",\n            \"layout\",\n            \"orderDescReverse\",\n            \"orderIndicators\",\n            \"orderHandler\",\n            \"titleRow\",\n            \"typeDetect\",\n            [\n                \"iCookieDuration\",\n                \"iStateDuration\"\n            ],\n            [\n                \"oSearch\",\n                \"oPreviousSearch\"\n            ],\n            [\n                \"aoSearchCols\",\n                \"aoPreSearchCols\"\n            ],\n            [\n                \"iDisplayLength\",\n                \"_iDisplayLength\"\n            ]\n        ]);\n        _fnMap(oSettings.oScroll, oInit, [\n            [\n                \"sScrollX\",\n                \"sX\"\n            ],\n            [\n                \"sScrollXInner\",\n                \"sXInner\"\n            ],\n            [\n                \"sScrollY\",\n                \"sY\"\n            ],\n            [\n                \"bScrollCollapse\",\n                \"bCollapse\"\n            ]\n        ]);\n        _fnMap(oSettings.oLanguage, oInit, \"fnInfoCallback\");\n        /* Callback functions which are array driven */ _fnCallbackReg(oSettings, \"aoDrawCallback\", oInit.fnDrawCallback);\n        _fnCallbackReg(oSettings, \"aoStateSaveParams\", oInit.fnStateSaveParams);\n        _fnCallbackReg(oSettings, \"aoStateLoadParams\", oInit.fnStateLoadParams);\n        _fnCallbackReg(oSettings, \"aoStateLoaded\", oInit.fnStateLoaded);\n        _fnCallbackReg(oSettings, \"aoRowCallback\", oInit.fnRowCallback);\n        _fnCallbackReg(oSettings, \"aoRowCreatedCallback\", oInit.fnCreatedRow);\n        _fnCallbackReg(oSettings, \"aoHeaderCallback\", oInit.fnHeaderCallback);\n        _fnCallbackReg(oSettings, \"aoFooterCallback\", oInit.fnFooterCallback);\n        _fnCallbackReg(oSettings, \"aoInitComplete\", oInit.fnInitComplete);\n        _fnCallbackReg(oSettings, \"aoPreDrawCallback\", oInit.fnPreDrawCallback);\n        oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);\n        // Add event listeners\n        if (oInit.on) {\n            Object.keys(oInit.on).forEach(function(key) {\n                _fnListener($this, key, oInit.on[key]);\n            });\n        }\n        /* Browser support detection */ _fnBrowserDetect(oSettings);\n        var oClasses = oSettings.oClasses;\n        $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);\n        $this.addClass(oClasses.table);\n        if (!oSettings.oFeatures.bPaginate) {\n            oInit.iDisplayStart = 0;\n        }\n        if (oSettings.iInitDisplayStart === undefined) {\n            /* Display start point, taking into account the save saving */ oSettings.iInitDisplayStart = oInit.iDisplayStart;\n            oSettings._iDisplayStart = oInit.iDisplayStart;\n        }\n        var defer = oInit.iDeferLoading;\n        if (defer !== null) {\n            oSettings.deferLoading = true;\n            var tmp = Array.isArray(defer);\n            oSettings._iRecordsDisplay = tmp ? defer[0] : defer;\n            oSettings._iRecordsTotal = tmp ? defer[1] : defer;\n        }\n        /*\n\t\t * Columns\n\t\t * See if we should load columns automatically or use defined ones\n\t\t */ var columnsInit = [];\n        var thead = this.getElementsByTagName(\"thead\");\n        var initHeaderLayout = _fnDetectHeader(oSettings, thead[0]);\n        // If we don't have a columns array, then generate one with nulls\n        if (oInit.aoColumns) {\n            columnsInit = oInit.aoColumns;\n        } else if (initHeaderLayout.length) {\n            for(i = 0, iLen = initHeaderLayout[0].length; i < iLen; i++){\n                columnsInit.push(null);\n            }\n        }\n        // Add the columns\n        for(i = 0, iLen = columnsInit.length; i < iLen; i++){\n            _fnAddColumn(oSettings);\n        }\n        // Apply the column definitions\n        _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, columnsInit, initHeaderLayout, function(iCol, oDef) {\n            _fnColumnOptions(oSettings, iCol, oDef);\n        });\n        /* HTML5 attribute detection - build an mData object automatically if the\n\t\t * attributes are found\n\t\t */ var rowOne = $this.children(\"tbody\").find(\"tr:first-child\").eq(0);\n        if (rowOne.length) {\n            var a = function(cell, name) {\n                return cell.getAttribute(\"data-\" + name) !== null ? name : null;\n            };\n            $(rowOne[0]).children(\"th, td\").each(function(i, cell) {\n                var col = oSettings.aoColumns[i];\n                if (!col) {\n                    _fnLog(oSettings, 0, \"Incorrect column count\", 18);\n                }\n                if (col.mData === i) {\n                    var sort = a(cell, \"sort\") || a(cell, \"order\");\n                    var filter = a(cell, \"filter\") || a(cell, \"search\");\n                    if (sort !== null || filter !== null) {\n                        col.mData = {\n                            _: i + \".display\",\n                            sort: sort !== null ? i + \".@data-\" + sort : undefined,\n                            type: sort !== null ? i + \".@data-\" + sort : undefined,\n                            filter: filter !== null ? i + \".@data-\" + filter : undefined\n                        };\n                        col._isArrayHost = true;\n                        _fnColumnOptions(oSettings, i);\n                    }\n                }\n            });\n        }\n        // Must be done after everything which can be overridden by the state saving!\n        _fnCallbackReg(oSettings, \"aoDrawCallback\", _fnSaveState);\n        var features = oSettings.oFeatures;\n        if (oInit.bStateSave) {\n            features.bStateSave = true;\n        }\n        // If aaSorting is not defined, then we use the first indicator in asSorting\n        // in case that has been altered, so the default sort reflects that option\n        if (oInit.aaSorting === undefined) {\n            var sorting = oSettings.aaSorting;\n            for(i = 0, iLen = sorting.length; i < iLen; i++){\n                sorting[i][1] = oSettings.aoColumns[i].asSorting[0];\n            }\n        }\n        // Do a first pass on the sorting classes (allows any size changes to be taken into\n        // account, and also will apply sorting disabled classes if disabled\n        _fnSortingClasses(oSettings);\n        _fnCallbackReg(oSettings, \"aoDrawCallback\", function() {\n            if (oSettings.bSorted || _fnDataSource(oSettings) === \"ssp\" || features.bDeferRender) {\n                _fnSortingClasses(oSettings);\n            }\n        });\n        /*\n\t\t * Table HTML init\n\t\t * Cache the header, body and footer as required, creating them if needed\n\t\t */ var caption = $this.children(\"caption\");\n        if (oSettings.caption) {\n            if (caption.length === 0) {\n                caption = $(\"<caption/>\").appendTo($this);\n            }\n            caption.html(oSettings.caption);\n        }\n        // Store the caption side, so we can remove the element from the document\n        // when creating the element\n        if (caption.length) {\n            caption[0]._captionSide = caption.css(\"caption-side\");\n            oSettings.captionNode = caption[0];\n        }\n        if (thead.length === 0) {\n            thead = $(\"<thead/>\").appendTo($this);\n        }\n        oSettings.nTHead = thead[0];\n        var tbody = $this.children(\"tbody\");\n        if (tbody.length === 0) {\n            tbody = $(\"<tbody/>\").insertAfter(thead);\n        }\n        oSettings.nTBody = tbody[0];\n        var tfoot = $this.children(\"tfoot\");\n        if (tfoot.length === 0) {\n            // If we are a scrolling table, and no footer has been given, then we need to create\n            // a tfoot element for the caption element to be appended to\n            tfoot = $(\"<tfoot/>\").appendTo($this);\n        }\n        oSettings.nTFoot = tfoot[0];\n        // Copy the data index array\n        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n        // Initialisation complete - table can be drawn\n        oSettings.bInitialised = true;\n        // Language definitions\n        var oLanguage = oSettings.oLanguage;\n        $.extend(true, oLanguage, oInit.oLanguage);\n        if (oLanguage.sUrl) {\n            // Get the language definitions from a file\n            $.ajax({\n                dataType: \"json\",\n                url: oLanguage.sUrl,\n                success: function(json) {\n                    _fnCamelToHungarian(defaults.oLanguage, json);\n                    $.extend(true, oLanguage, json, oSettings.oInit.oLanguage);\n                    _fnCallbackFire(oSettings, null, \"i18n\", [\n                        oSettings\n                    ], true);\n                    _fnInitialise(oSettings);\n                },\n                error: function() {\n                    // Error occurred loading language file\n                    _fnLog(oSettings, 0, \"i18n file loading error\", 21);\n                    // Continue on as best we can\n                    _fnInitialise(oSettings);\n                }\n            });\n        } else {\n            _fnCallbackFire(oSettings, null, \"i18n\", [\n                oSettings\n            ], true);\n            _fnInitialise(oSettings);\n        }\n    });\n    _that = null;\n    return this;\n};\n/**\n * DataTables extensions\n * \n * This namespace acts as a collection area for plug-ins that can be used to\n * extend DataTables capabilities. Indeed many of the build in methods\n * use this method to provide their own capabilities (sorting methods for\n * example).\n *\n * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n * reasons\n *\n *  @namespace\n */ DataTable.ext = _ext = {\n    /**\n\t * DataTables build type (expanded by the download builder)\n\t *\n\t *  @type string\n\t */ builder: \"-source-\",\n    /**\n\t * Buttons. For use with the Buttons extension for DataTables. This is\n\t * defined here so other extensions can define buttons regardless of load\n\t * order. It is _not_ used by DataTables core.\n\t *\n\t *  @type object\n\t *  @default {}\n\t */ buttons: {},\n    /**\n\t * ColumnControl buttons and content\n\t *\n\t *  @type object\n\t */ ccContent: {},\n    /**\n\t * Element class names\n\t *\n\t *  @type object\n\t *  @default {}\n\t */ classes: {},\n    /**\n\t * Error reporting.\n\t * \n\t * How should DataTables report an error. Can take the value 'alert',\n\t * 'throw', 'none' or a function.\n\t *\n\t *  @type string|function\n\t *  @default alert\n\t */ errMode: \"alert\",\n    /**\n\t * Legacy so v1 plug-ins don't throw js errors on load\n\t */ feature: [],\n    /**\n\t * Feature plug-ins.\n\t * \n\t * This is an object of callbacks which provide the features for DataTables\n\t * to be initialised via the `layout` option.\n\t */ features: {},\n    /**\n\t * Row searching.\n\t * \n\t * This method of searching is complimentary to the default type based\n\t * searching, and a lot more comprehensive as it allows you complete control\n\t * over the searching logic. Each element in this array is a function\n\t * (parameters described below) that is called for every row in the table,\n\t * and your logic decides if it should be included in the searching data set\n\t * or not.\n\t *\n\t * Searching functions have the following input parameters:\n\t *\n\t * 1. `{object}` DataTables settings object: see\n\t *    {@link DataTable.models.oSettings}\n\t * 2. `{array|object}` Data for the row to be processed (same as the\n\t *    original format that was passed in as the data source, or an array\n\t *    from a DOM data source\n\t * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n\t *    can be useful to retrieve the `TR` element if you need DOM interaction.\n\t *\n\t * And the following return is expected:\n\t *\n\t * * {boolean} Include the row in the searched result set (true) or not\n\t *   (false)\n\t *\n\t * Note that as with the main search ability in DataTables, technically this\n\t * is \"filtering\", since it is subtractive. However, for consistency in\n\t * naming we call it searching here.\n\t *\n\t *  @type array\n\t *  @default []\n\t *\n\t *  @example\n\t *    // The following example shows custom search being applied to the\n\t *    // fourth column (i.e. the data[3] index) based on two input values\n\t *    // from the end-user, matching the data in a certain range.\n\t *    $.fn.dataTable.ext.search.push(\n\t *      function( settings, data, dataIndex ) {\n\t *        var min = document.getElementById('min').value * 1;\n\t *        var max = document.getElementById('max').value * 1;\n\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n\t *\n\t *        if ( min == \"\" && max == \"\" ) {\n\t *          return true;\n\t *        }\n\t *        else if ( min == \"\" && version < max ) {\n\t *          return true;\n\t *        }\n\t *        else if ( min < version && \"\" == max ) {\n\t *          return true;\n\t *        }\n\t *        else if ( min < version && version < max ) {\n\t *          return true;\n\t *        }\n\t *        return false;\n\t *      }\n\t *    );\n\t */ search: [],\n    /**\n\t * Selector extensions\n\t *\n\t * The `selector` option can be used to extend the options available for the\n\t * selector modifier options (`selector-modifier` object data type) that\n\t * each of the three built in selector types offer (row, column and cell +\n\t * their plural counterparts). For example the Select extension uses this\n\t * mechanism to provide an option to select only rows, columns and cells\n\t * that have been marked as selected by the end user (`{selected: true}`),\n\t * which can be used in conjunction with the existing built in selector\n\t * options.\n\t *\n\t * Each property is an array to which functions can be pushed. The functions\n\t * take three attributes:\n\t *\n\t * * Settings object for the host table\n\t * * Options object (`selector-modifier` object type)\n\t * * Array of selected item indexes\n\t *\n\t * The return is an array of the resulting item indexes after the custom\n\t * selector has been applied.\n\t *\n\t *  @type object\n\t */ selector: {\n        cell: [],\n        column: [],\n        row: []\n    },\n    /**\n\t * Legacy configuration options. Enable and disable legacy options that\n\t * are available in DataTables.\n\t *\n\t *  @type object\n\t */ legacy: {\n        /**\n\t\t * Enable / disable DataTables 1.9 compatible server-side processing\n\t\t * requests\n\t\t *\n\t\t *  @type boolean\n\t\t *  @default null\n\t\t */ ajax: null\n    },\n    /**\n\t * Pagination plug-in methods.\n\t * \n\t * Each entry in this object is a function and defines which buttons should\n\t * be shown by the pagination rendering method that is used for the table:\n\t * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n\t * buttons are displayed in the document, while the functions here tell it\n\t * what buttons to display. This is done by returning an array of button\n\t * descriptions (what each button will do).\n\t *\n\t * Pagination types (the four built in options and any additional plug-in\n\t * options defined here) can be used through the `paginationType`\n\t * initialisation parameter.\n\t *\n\t * The functions defined take two parameters:\n\t *\n\t * 1. `{int} page` The current page index\n\t * 2. `{int} pages` The number of pages in the table\n\t *\n\t * Each function is expected to return an array where each element of the\n\t * array can be one of:\n\t *\n\t * * `first` - Jump to first page when activated\n\t * * `last` - Jump to last page when activated\n\t * * `previous` - Show previous page when activated\n\t * * `next` - Show next page when activated\n\t * * `{int}` - Show page of the index given\n\t * * `{array}` - A nested array containing the above elements to add a\n\t *   containing 'DIV' element (might be useful for styling).\n\t *\n\t * Note that DataTables v1.9- used this object slightly differently whereby\n\t * an object with two functions would be defined for each plug-in. That\n\t * ability is still supported by DataTables 1.10+ to provide backwards\n\t * compatibility, but this option of use is now decremented and no longer\n\t * documented in DataTables 1.10+.\n\t *\n\t *  @type object\n\t *  @default {}\n\t *\n\t *  @example\n\t *    // Show previous, next and current page buttons only\n\t *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n\t *      return [ 'previous', page, 'next' ];\n\t *    };\n\t */ pager: {},\n    renderer: {\n        pageButton: {},\n        header: {}\n    },\n    /**\n\t * Ordering plug-ins - custom data source\n\t * \n\t * The extension options for ordering of data available here is complimentary\n\t * to the default type based ordering that DataTables typically uses. It\n\t * allows much greater control over the the data that is being used to\n\t * order a column, but is necessarily therefore more complex.\n\t * \n\t * This type of ordering is useful if you want to do ordering based on data\n\t * live from the DOM (for example the contents of an 'input' element) rather\n\t * than just the static string that DataTables knows of.\n\t * \n\t * The way these plug-ins work is that you create an array of the values you\n\t * wish to be ordering for the column in question and then return that\n\t * array. The data in the array much be in the index order of the rows in\n\t * the table (not the currently ordering order!). Which order data gathering\n\t * function is run here depends on the `dt-init columns.orderDataType`\n\t * parameter that is used for the column (if any).\n\t *\n\t * The functions defined take two parameters:\n\t *\n\t * 1. `{object}` DataTables settings object: see\n\t *    {@link DataTable.models.oSettings}\n\t * 2. `{int}` Target column index\n\t *\n\t * Each function is expected to return an array:\n\t *\n\t * * `{array}` Data for the column to be ordering upon\n\t *\n\t *  @type array\n\t *\n\t *  @example\n\t *    // Ordering using `input` node values\n\t *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n\t *    {\n\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n\t *        return $('input', td).val();\n\t *      } );\n\t *    }\n\t */ order: {},\n    /**\n\t * Type based plug-ins.\n\t *\n\t * Each column in DataTables has a type assigned to it, either by automatic\n\t * detection or by direct assignment using the `type` option for the column.\n\t * The type of a column will effect how it is ordering and search (plug-ins\n\t * can also make use of the column type if required).\n\t *\n\t * @namespace\n\t */ type: {\n        /**\n\t\t * Automatic column class assignment\n\t\t */ className: {},\n        /**\n\t\t * Type detection functions.\n\t\t *\n\t\t * The functions defined in this object are used to automatically detect\n\t\t * a column's type, making initialisation of DataTables super easy, even\n\t\t * when complex data is in the table.\n\t\t *\n\t\t * The functions defined take two parameters:\n\t\t *\n\t     *  1. `{*}` Data from the column cell to be analysed\n\t     *  2. `{settings}` DataTables settings object. This can be used to\n\t     *     perform context specific type detection - for example detection\n\t     *     based on language settings such as using a comma for a decimal\n\t     *     place. Generally speaking the options from the settings will not\n\t     *     be required\n\t\t *\n\t\t * Each function is expected to return:\n\t\t *\n\t\t * * `{string|null}` Data type detected, or null if unknown (and thus\n\t\t *   pass it on to the other type detection functions.\n\t\t *\n\t\t *  @type array\n\t\t *\n\t\t *  @example\n\t\t *    // Currency type detection plug-in:\n\t\t *    $.fn.dataTable.ext.type.detect.push(\n\t\t *      function ( data, settings ) {\n\t\t *        // Check the numeric part\n\t\t *        if ( ! data.substring(1).match(/[0-9]/) ) {\n\t\t *          return null;\n\t\t *        }\n\t\t *\n\t\t *        // Check prefixed by currency\n\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n\t\t *          return 'currency';\n\t\t *        }\n\t\t *        return null;\n\t\t *      }\n\t\t *    );\n\t\t */ detect: [],\n        /**\n\t\t * Automatic renderer assignment\n\t\t */ render: {},\n        /**\n\t\t * Type based search formatting.\n\t\t *\n\t\t * The type based searching functions can be used to pre-format the\n\t\t * data to be search on. For example, it can be used to strip HTML\n\t\t * tags or to de-format telephone numbers for numeric only searching.\n\t\t *\n\t\t * Note that is a search is not defined for a column of a given type,\n\t\t * no search formatting will be performed.\n\t\t * \n\t\t * Pre-processing of searching data plug-ins - When you assign the sType\n\t\t * for a column (or have it automatically detected for you by DataTables\n\t\t * or a type detection plug-in), you will typically be using this for\n\t\t * custom sorting, but it can also be used to provide custom searching\n\t\t * by allowing you to pre-processing the data and returning the data in\n\t\t * the format that should be searched upon. This is done by adding\n\t\t * functions this object with a parameter name which matches the sType\n\t\t * for that target column. This is the corollary of <i>afnSortData</i>\n\t\t * for searching data.\n\t\t *\n\t\t * The functions defined take a single parameter:\n\t\t *\n\t     *  1. `{*}` Data from the column cell to be prepared for searching\n\t\t *\n\t\t * Each function is expected to return:\n\t\t *\n\t\t * * `{string|null}` Formatted string that will be used for the searching.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t *\n\t\t *  @example\n\t\t *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n\t\t *    }\n\t\t */ search: {},\n        /**\n\t\t * Type based ordering.\n\t\t *\n\t\t * The column type tells DataTables what ordering to apply to the table\n\t\t * when a column is sorted upon. The order for each type that is defined,\n\t\t * is defined by the functions available in this object.\n\t\t *\n\t\t * Each ordering option can be described by three properties added to\n\t\t * this object:\n\t\t *\n\t\t * * `{type}-pre` - Pre-formatting function\n\t\t * * `{type}-asc` - Ascending order function\n\t\t * * `{type}-desc` - Descending order function\n\t\t *\n\t\t * All three can be used together, only `{type}-pre` or only\n\t\t * `{type}-asc` and `{type}-desc` together. It is generally recommended\n\t\t * that only `{type}-pre` is used, as this provides the optimal\n\t\t * implementation in terms of speed, although the others are provided\n\t\t * for compatibility with existing Javascript sort functions.\n\t\t *\n\t\t * `{type}-pre`: Functions defined take a single parameter:\n\t\t *\n\t     *  1. `{*}` Data from the column cell to be prepared for ordering\n\t\t *\n\t\t * And return:\n\t\t *\n\t\t * * `{*}` Data to be sorted upon\n\t\t *\n\t\t * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n\t\t * functions, taking two parameters:\n\t\t *\n\t     *  1. `{*}` Data to compare to the second parameter\n\t     *  2. `{*}` Data to compare to the first parameter\n\t\t *\n\t\t * And returning:\n\t\t *\n\t\t * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n\t\t *   than the second parameter, ===0 if the two parameters are equal and\n\t\t *   >0 if the first parameter should be sorted height than the second\n\t\t *   parameter.\n\t\t * \n\t\t *  @type object\n\t\t *  @default {}\n\t\t *\n\t\t *  @example\n\t\t *    // Numeric ordering of formatted numbers with a pre-formatter\n\t\t *    $.extend( $.fn.dataTable.ext.type.order, {\n\t\t *      \"string-pre\": function(x) {\n\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n\t\t *        return parseFloat( a );\n\t\t *      }\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Case-sensitive string ordering, with no pre-formatting method\n\t\t *    $.extend( $.fn.dataTable.ext.order, {\n\t\t *      \"string-case-asc\": function(x,y) {\n\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t\t *      },\n\t\t *      \"string-case-desc\": function(x,y) {\n\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n\t\t *      }\n\t\t *    } );\n\t\t */ order: {}\n    },\n    /**\n\t * Unique DataTables instance counter\n\t *\n\t * @type int\n\t * @private\n\t */ _unique: 0,\n    //\n    // Depreciated\n    // The following properties are retained for backwards compatibility only.\n    // The should not be used in new projects and will be removed in a future\n    // version\n    //\n    /**\n\t * Version check function.\n\t *  @type function\n\t *  @depreciated Since 1.10\n\t */ fnVersionCheck: DataTable.fnVersionCheck,\n    /**\n\t * Index for what 'this' index API functions should use\n\t *  @type int\n\t *  @deprecated Since v1.10\n\t */ iApiIndex: 0,\n    /**\n\t * Software version\n\t *  @type string\n\t *  @deprecated Since v1.10\n\t */ sVersion: DataTable.version\n};\n//\n// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n//\n$.extend(_ext, {\n    afnFiltering: _ext.search,\n    aTypes: _ext.type.detect,\n    ofnSearch: _ext.type.search,\n    oSort: _ext.type.order,\n    afnSortData: _ext.order,\n    aoFeatures: _ext.feature,\n    oStdClasses: _ext.classes,\n    oPagination: _ext.pager\n});\n$.extend(DataTable.ext.classes, {\n    container: \"dt-container\",\n    empty: {\n        row: \"dt-empty\"\n    },\n    info: {\n        container: \"dt-info\"\n    },\n    layout: {\n        row: \"dt-layout-row\",\n        cell: \"dt-layout-cell\",\n        tableRow: \"dt-layout-table\",\n        tableCell: \"\",\n        start: \"dt-layout-start\",\n        end: \"dt-layout-end\",\n        full: \"dt-layout-full\"\n    },\n    length: {\n        container: \"dt-length\",\n        select: \"dt-input\"\n    },\n    order: {\n        canAsc: \"dt-orderable-asc\",\n        canDesc: \"dt-orderable-desc\",\n        isAsc: \"dt-ordering-asc\",\n        isDesc: \"dt-ordering-desc\",\n        none: \"dt-orderable-none\",\n        position: \"sorting_\"\n    },\n    processing: {\n        container: \"dt-processing\"\n    },\n    scrolling: {\n        body: \"dt-scroll-body\",\n        container: \"dt-scroll\",\n        footer: {\n            self: \"dt-scroll-foot\",\n            inner: \"dt-scroll-footInner\"\n        },\n        header: {\n            self: \"dt-scroll-head\",\n            inner: \"dt-scroll-headInner\"\n        }\n    },\n    search: {\n        container: \"dt-search\",\n        input: \"dt-input\"\n    },\n    table: \"dataTable\",\n    tbody: {\n        cell: \"\",\n        row: \"\"\n    },\n    thead: {\n        cell: \"\",\n        row: \"\"\n    },\n    tfoot: {\n        cell: \"\",\n        row: \"\"\n    },\n    paging: {\n        active: \"current\",\n        button: \"dt-paging-button\",\n        container: \"dt-paging\",\n        disabled: \"disabled\",\n        nav: \"\"\n    }\n});\n/*\n * It is useful to have variables which are scoped locally so only the\n * DataTables functions can access them and they don't leak into global space.\n * At the same time these functions are often useful over multiple files in the\n * core and API, so we list, or at least document, all variables which are used\n * by DataTables as private variables here. This also ensures that there is no\n * clashing of variable names and that they can easily referenced for reuse.\n */ // Defined else where\n//  _selector_run\n//  _selector_opts\n//  _selector_row_indexes\nvar _ext; // DataTable.ext\nvar _Api; // DataTable.Api\nvar _api_register; // DataTable.Api.register\nvar _api_registerPlural; // DataTable.Api.registerPlural\nvar _re_dic = {};\nvar _re_new_lines = /[\\r\\n\\u2028]/g;\nvar _re_html = /<([^>]*>)/g;\nvar _max_str_len = Math.pow(2, 28);\n// This is not strict ISO8601 - Date.parse() is quite lax, although\n// implementations differ between browsers.\nvar _re_date = /^\\d{2,4}[./-]\\d{1,2}[./-]\\d{1,2}([T ]{1}\\d{1,2}[:.]\\d{2}([.:]\\d{2})?)?$/;\n// Escape regular expression special characters\nvar _re_escape_regex = new RegExp(\"(\\\\\" + [\n    \"/\",\n    \".\",\n    \"*\",\n    \"+\",\n    \"?\",\n    \"|\",\n    \"(\",\n    \")\",\n    \"[\",\n    \"]\",\n    \"{\",\n    \"}\",\n    \"\\\\\",\n    \"$\",\n    \"^\",\n    \"-\"\n].join(\"|\\\\\") + \")\", \"g\");\n// https://en.wikipedia.org/wiki/Foreign_exchange_market\n// - \\u20BD - Russian ruble.\n// - \\u20a9 - South Korean Won\n// - \\u20BA - Turkish Lira\n// - \\u20B9 - Indian Rupee\n// - R - Brazil (R$) and South Africa\n// - fr - Swiss Franc\n// - kr - Swedish krona, Norwegian krone and Danish krone\n// - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n// - É - Bitcoin\n// - Î - Ethereum\n//   standards as thousands separators.\nvar _re_formatted_numeric = /['\\u00A0,$Â£â¬Â¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfkÉÎ]/gi;\nvar _empty = function(d) {\n    return !d || d === true || d === \"-\" ? true : false;\n};\nvar _intVal = function(s) {\n    var integer = parseInt(s, 10);\n    return !isNaN(integer) && isFinite(s) ? integer : null;\n};\n// Convert from a formatted number with characters other than `.` as the\n// decimal place, to a Javascript number\nvar _numToDecimal = function(num, decimalPoint) {\n    // Cache created regular expressions for speed as this function is called often\n    if (!_re_dic[decimalPoint]) {\n        _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), \"g\");\n    }\n    return typeof num === \"string\" && decimalPoint !== \".\" ? num.replace(/\\./g, \"\").replace(_re_dic[decimalPoint], \".\") : num;\n};\nvar _isNumber = function(d, decimalPoint, formatted, allowEmpty) {\n    var type = typeof d;\n    var strType = type === \"string\";\n    if (type === \"number\" || type === \"bigint\") {\n        return true;\n    }\n    // If empty return immediately so there must be a number if it is a\n    // formatted string (this stops the string \"k\", or \"kr\", etc being detected\n    // as a formatted number for currency\n    if (allowEmpty && _empty(d)) {\n        return true;\n    }\n    if (decimalPoint && strType) {\n        d = _numToDecimal(d, decimalPoint);\n    }\n    if (formatted && strType) {\n        d = d.replace(_re_formatted_numeric, \"\");\n    }\n    return !isNaN(parseFloat(d)) && isFinite(d);\n};\n// A string without HTML in it can be considered to be HTML still\nvar _isHtml = function(d) {\n    return _empty(d) || typeof d === \"string\";\n};\n// Is a string a number surrounded by HTML?\nvar _htmlNumeric = function(d, decimalPoint, formatted, allowEmpty) {\n    if (allowEmpty && _empty(d)) {\n        return true;\n    }\n    // input and select strings mean that this isn't just a number\n    if (typeof d === \"string\" && d.match(/<(input|select)/i)) {\n        return null;\n    }\n    var html = _isHtml(d);\n    return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted, allowEmpty) ? true : null;\n};\nvar _pluck = function(a, prop, prop2) {\n    var out = [];\n    var i = 0, ien = a.length;\n    // Could have the test in the loop for slightly smaller code, but speed\n    // is essential here\n    if (prop2 !== undefined) {\n        for(; i < ien; i++){\n            if (a[i] && a[i][prop]) {\n                out.push(a[i][prop][prop2]);\n            }\n        }\n    } else {\n        for(; i < ien; i++){\n            if (a[i]) {\n                out.push(a[i][prop]);\n            }\n        }\n    }\n    return out;\n};\n// Basically the same as _pluck, but rather than looping over `a` we use `order`\n// as the indexes to pick from `a`\nvar _pluck_order = function(a, order, prop, prop2) {\n    var out = [];\n    var i = 0, ien = order.length;\n    // Could have the test in the loop for slightly smaller code, but speed\n    // is essential here\n    if (prop2 !== undefined) {\n        for(; i < ien; i++){\n            if (a[order[i]] && a[order[i]][prop]) {\n                out.push(a[order[i]][prop][prop2]);\n            }\n        }\n    } else {\n        for(; i < ien; i++){\n            if (a[order[i]]) {\n                out.push(a[order[i]][prop]);\n            }\n        }\n    }\n    return out;\n};\nvar _range = function(len, start) {\n    var out = [];\n    var end;\n    if (start === undefined) {\n        start = 0;\n        end = len;\n    } else {\n        end = start;\n        start = len;\n    }\n    for(var i = start; i < end; i++){\n        out.push(i);\n    }\n    return out;\n};\nvar _removeEmpty = function(a) {\n    var out = [];\n    for(var i = 0, ien = a.length; i < ien; i++){\n        if (a[i]) {\n            out.push(a[i]);\n        }\n    }\n    return out;\n};\n// Replaceable function in api.util\nvar _stripHtml = function(input) {\n    if (!input || typeof input !== \"string\") {\n        return input;\n    }\n    // Irrelevant check to workaround CodeQL's false positive on the regex\n    if (input.length > _max_str_len) {\n        throw new Error(\"Exceeded max str len\");\n    }\n    var previous;\n    input = input.replace(_re_html, \"\"); // Complete tags\n    // Safety for incomplete script tag - use do / while to ensure that\n    // we get all instances\n    do {\n        previous = input;\n        input = input.replace(/<script/i, \"\");\n    }while (input !== previous);\n    return previous;\n};\n// Replaceable function in api.util\nvar _escapeHtml = function(d) {\n    if (Array.isArray(d)) {\n        d = d.join(\",\");\n    }\n    return typeof d === \"string\" ? d.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\") : d;\n};\n// Remove diacritics from a string by decomposing it and then removing\n// non-ascii characters\nvar _normalize = function(str, both) {\n    if (typeof str !== \"string\") {\n        return str;\n    }\n    // It is faster to just run `normalize` than it is to check if\n    // we need to with a regex! (Check as it isn't available in old\n    // Safari)\n    var res = str.normalize ? str.normalize(\"NFD\") : str;\n    // Equally, here we check if a regex is needed or not\n    return res.length !== str.length ? (both === true ? str + \" \" : \"\") + res.replace(/[\\u0300-\\u036f]/g, \"\") : res;\n};\n/**\n * Determine if all values in the array are unique. This means we can short\n * cut the _unique method at the cost of a single loop. A sorted array is used\n * to easily check the values.\n *\n * @param  {array} src Source array\n * @return {boolean} true if all unique, false otherwise\n * @ignore\n */ var _areAllUnique = function(src) {\n    if (src.length < 2) {\n        return true;\n    }\n    var sorted = src.slice().sort();\n    var last = sorted[0];\n    for(var i = 1, ien = sorted.length; i < ien; i++){\n        if (sorted[i] === last) {\n            return false;\n        }\n        last = sorted[i];\n    }\n    return true;\n};\n/**\n * Find the unique elements in a source array.\n *\n * @param  {array} src Source array\n * @return {array} Array of unique items\n * @ignore\n */ var _unique = function(src) {\n    if (Array.from && Set) {\n        return Array.from(new Set(src));\n    }\n    if (_areAllUnique(src)) {\n        return src.slice();\n    }\n    // A faster unique method is to use object keys to identify used values,\n    // but this doesn't work with arrays or objects, which we must also\n    // consider. See jsperf.app/compare-array-unique-versions/4 for more\n    // information.\n    var out = [], val, i, ien = src.length, j, k = 0;\n    again: for(i = 0; i < ien; i++){\n        val = src[i];\n        for(j = 0; j < k; j++){\n            if (out[j] === val) {\n                continue again;\n            }\n        }\n        out.push(val);\n        k++;\n    }\n    return out;\n};\n// Surprisingly this is faster than [].concat.apply\n// https://jsperf.com/flatten-an-array-loop-vs-reduce/2\nvar _flatten = function(out, val) {\n    if (Array.isArray(val)) {\n        for(var i = 0; i < val.length; i++){\n            _flatten(out, val[i]);\n        }\n    } else {\n        out.push(val);\n    }\n    return out;\n};\n// Similar to jQuery's addClass, but use classList.add\nfunction _addClass(el, name) {\n    if (name) {\n        name.split(\" \").forEach(function(n) {\n            if (n) {\n                // `add` does deduplication, so no need to check `contains`\n                el.classList.add(n);\n            }\n        });\n    }\n}\n/**\n * DataTables utility methods\n * \n * This namespace provides helper methods that DataTables uses internally to\n * create a DataTable, but which are not exclusively used only for DataTables.\n * These methods can be used by extension authors to save the duplication of\n * code.\n *\n *  @namespace\n */ DataTable.util = {\n    /**\n\t * Return a string with diacritic characters decomposed\n\t * @param {*} mixed Function or string to normalize\n\t * @param {*} both Return original string and the normalized string\n\t * @returns String or undefined\n\t */ diacritics: function(mixed, both) {\n        var type = typeof mixed;\n        if (type !== \"function\") {\n            return _normalize(mixed, both);\n        }\n        _normalize = mixed;\n    },\n    /**\n\t * Debounce a function\n\t *\n\t * @param {function} fn Function to be called\n\t * @param {integer} freq Call frequency in mS\n\t * @return {function} Wrapped function\n\t */ debounce: function(fn, timeout) {\n        var timer;\n        return function() {\n            var that = this;\n            var args = arguments;\n            clearTimeout(timer);\n            timer = setTimeout(function() {\n                fn.apply(that, args);\n            }, timeout || 250);\n        };\n    },\n    /**\n\t * Throttle the calls to a function. Arguments and context are maintained\n\t * for the throttled function.\n\t *\n\t * @param {function} fn Function to be called\n\t * @param {integer} freq Call frequency in mS\n\t * @return {function} Wrapped function\n\t */ throttle: function(fn, freq) {\n        var frequency = freq !== undefined ? freq : 200, last, timer;\n        return function() {\n            var that = this, now = +new Date(), args = arguments;\n            if (last && now < last + frequency) {\n                clearTimeout(timer);\n                timer = setTimeout(function() {\n                    last = undefined;\n                    fn.apply(that, args);\n                }, frequency);\n            } else {\n                last = now;\n                fn.apply(that, args);\n            }\n        };\n    },\n    /**\n\t * Escape a string such that it can be used in a regular expression\n\t *\n\t *  @param {string} val string to escape\n\t *  @returns {string} escaped string\n\t */ escapeRegex: function(val) {\n        return val.replace(_re_escape_regex, \"\\\\$1\");\n    },\n    /**\n\t * Create a function that will write to a nested object or array\n\t * @param {*} source JSON notation string\n\t * @returns Write function\n\t */ set: function(source) {\n        if ($.isPlainObject(source)) {\n            /* Unlike get, only the underscore (global) option is used for for\n\t\t\t * setting data since we don't know the type here. This is why an object\n\t\t\t * option is not documented for `mData` (which is read/write), but it is\n\t\t\t * for `mRender` which is read only.\n\t\t\t */ return DataTable.util.set(source._);\n        } else if (source === null) {\n            // Nothing to do when the data source is null\n            return function() {};\n        } else if (typeof source === \"function\") {\n            return function(data, val, meta) {\n                source(data, \"set\", val, meta);\n            };\n        } else if (typeof source === \"string\" && (source.indexOf(\".\") !== -1 || source.indexOf(\"[\") !== -1 || source.indexOf(\"(\") !== -1)) {\n            // Like the get, we need to get data from a nested object\n            var setData = function(data, val, src) {\n                var a = _fnSplitObjNotation(src), b;\n                var aLast = a[a.length - 1];\n                var arrayNotation, funcNotation, o, innerSrc;\n                for(var i = 0, iLen = a.length - 1; i < iLen; i++){\n                    // Protect against prototype pollution\n                    if (a[i] === \"__proto__\" || a[i] === \"constructor\") {\n                        throw new Error(\"Cannot set prototype values\");\n                    }\n                    // Check if we are dealing with an array notation request\n                    arrayNotation = a[i].match(__reArray);\n                    funcNotation = a[i].match(__reFn);\n                    if (arrayNotation) {\n                        a[i] = a[i].replace(__reArray, \"\");\n                        data[a[i]] = [];\n                        // Get the remainder of the nested object to set so we can recurse\n                        b = a.slice();\n                        b.splice(0, i + 1);\n                        innerSrc = b.join(\".\");\n                        // Traverse each entry in the array setting the properties requested\n                        if (Array.isArray(val)) {\n                            for(var j = 0, jLen = val.length; j < jLen; j++){\n                                o = {};\n                                setData(o, val[j], innerSrc);\n                                data[a[i]].push(o);\n                            }\n                        } else {\n                            // We've been asked to save data to an array, but it\n                            // isn't array data to be saved. Best that can be done\n                            // is to just save the value.\n                            data[a[i]] = val;\n                        }\n                        // The inner call to setData has already traversed through the remainder\n                        // of the source and has set the data, thus we can exit here\n                        return;\n                    } else if (funcNotation) {\n                        // Function call\n                        a[i] = a[i].replace(__reFn, \"\");\n                        data = data[a[i]](val);\n                    }\n                    // If the nested object doesn't currently exist - since we are\n                    // trying to set the value - create it\n                    if (data[a[i]] === null || data[a[i]] === undefined) {\n                        data[a[i]] = {};\n                    }\n                    data = data[a[i]];\n                }\n                // Last item in the input - i.e, the actual set\n                if (aLast.match(__reFn)) {\n                    // Function call\n                    data = data[aLast.replace(__reFn, \"\")](val);\n                } else {\n                    // If array notation is used, we just want to strip it and use the property name\n                    // and assign the value. If it isn't used, then we get the result we want anyway\n                    data[aLast.replace(__reArray, \"\")] = val;\n                }\n            };\n            return function(data, val) {\n                return setData(data, val, source);\n            };\n        } else {\n            // Array or flat object mapping\n            return function(data, val) {\n                data[source] = val;\n            };\n        }\n    },\n    /**\n\t * Create a function that will read nested objects from arrays, based on JSON notation\n\t * @param {*} source JSON notation string\n\t * @returns Value read\n\t */ get: function(source) {\n        if ($.isPlainObject(source)) {\n            // Build an object of get functions, and wrap them in a single call\n            var o = {};\n            $.each(source, function(key, val) {\n                if (val) {\n                    o[key] = DataTable.util.get(val);\n                }\n            });\n            return function(data, type, row, meta) {\n                var t = o[type] || o._;\n                return t !== undefined ? t(data, type, row, meta) : data;\n            };\n        } else if (source === null) {\n            // Give an empty string for rendering / sorting etc\n            return function(data) {\n                return data;\n            };\n        } else if (typeof source === \"function\") {\n            return function(data, type, row, meta) {\n                return source(data, type, row, meta);\n            };\n        } else if (typeof source === \"string\" && (source.indexOf(\".\") !== -1 || source.indexOf(\"[\") !== -1 || source.indexOf(\"(\") !== -1)) {\n            /* If there is a . in the source string then the data source is in a\n\t\t\t * nested object so we loop over the data for each level to get the next\n\t\t\t * level down. On each loop we test for undefined, and if found immediately\n\t\t\t * return. This allows entire objects to be missing and sDefaultContent to\n\t\t\t * be used if defined, rather than throwing an error\n\t\t\t */ var fetchData = function(data, type, src) {\n                var arrayNotation, funcNotation, out, innerSrc;\n                if (src !== \"\") {\n                    var a = _fnSplitObjNotation(src);\n                    for(var i = 0, iLen = a.length; i < iLen; i++){\n                        // Check if we are dealing with special notation\n                        arrayNotation = a[i].match(__reArray);\n                        funcNotation = a[i].match(__reFn);\n                        if (arrayNotation) {\n                            // Array notation\n                            a[i] = a[i].replace(__reArray, \"\");\n                            // Condition allows simply [] to be passed in\n                            if (a[i] !== \"\") {\n                                data = data[a[i]];\n                            }\n                            out = [];\n                            // Get the remainder of the nested object to get\n                            a.splice(0, i + 1);\n                            innerSrc = a.join(\".\");\n                            // Traverse each entry in the array getting the properties requested\n                            if (Array.isArray(data)) {\n                                for(var j = 0, jLen = data.length; j < jLen; j++){\n                                    out.push(fetchData(data[j], type, innerSrc));\n                                }\n                            }\n                            // If a string is given in between the array notation indicators, that\n                            // is used to join the strings together, otherwise an array is returned\n                            var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);\n                            data = join === \"\" ? out : out.join(join);\n                            break;\n                        } else if (funcNotation) {\n                            // Function call\n                            a[i] = a[i].replace(__reFn, \"\");\n                            data = data[a[i]]();\n                            continue;\n                        }\n                        if (data === null || data[a[i]] === null) {\n                            return null;\n                        } else if (data === undefined || data[a[i]] === undefined) {\n                            return undefined;\n                        }\n                        data = data[a[i]];\n                    }\n                }\n                return data;\n            };\n            return function(data, type) {\n                return fetchData(data, type, source);\n            };\n        } else {\n            // Array or flat object mapping\n            return function(data) {\n                return data[source];\n            };\n        }\n    },\n    stripHtml: function(mixed) {\n        var type = typeof mixed;\n        if (type === \"function\") {\n            _stripHtml = mixed;\n            return;\n        } else if (type === \"string\") {\n            return _stripHtml(mixed);\n        }\n        return mixed;\n    },\n    escapeHtml: function(mixed) {\n        var type = typeof mixed;\n        if (type === \"function\") {\n            _escapeHtml = mixed;\n            return;\n        } else if (type === \"string\" || Array.isArray(mixed)) {\n            return _escapeHtml(mixed);\n        }\n        return mixed;\n    },\n    unique: _unique\n};\n/**\n * Create a mapping object that allows camel case parameters to be looked up\n * for their Hungarian counterparts. The mapping is stored in a private\n * parameter called `_hungarianMap` which can be accessed on the source object.\n *  @param {object} o\n *  @memberof DataTable#oApi\n */ function _fnHungarianMap(o) {\n    var hungarian = \"a aa ai ao as b fn i m o s \", match, newKey, map = {};\n    $.each(o, function(key) {\n        match = key.match(/^([^A-Z]+?)([A-Z])/);\n        if (match && hungarian.indexOf(match[1] + \" \") !== -1) {\n            newKey = key.replace(match[0], match[2].toLowerCase());\n            map[newKey] = key;\n            if (match[1] === \"o\") {\n                _fnHungarianMap(o[key]);\n            }\n        }\n    });\n    o._hungarianMap = map;\n}\n/**\n * Convert from camel case parameters to Hungarian, based on a Hungarian map\n * created by _fnHungarianMap.\n *  @param {object} src The model object which holds all parameters that can be\n *    mapped.\n *  @param {object} user The object to convert from camel case to Hungarian.\n *  @param {boolean} force When set to `true`, properties which already have a\n *    Hungarian value in the `user` object will be overwritten. Otherwise they\n *    won't be.\n *  @memberof DataTable#oApi\n */ function _fnCamelToHungarian(src, user, force) {\n    if (!src._hungarianMap) {\n        _fnHungarianMap(src);\n    }\n    var hungarianKey;\n    $.each(user, function(key) {\n        hungarianKey = src._hungarianMap[key];\n        if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {\n            // For objects, we need to buzz down into the object to copy parameters\n            if (hungarianKey.charAt(0) === \"o\") {\n                // Copy the camelCase options over to the hungarian\n                if (!user[hungarianKey]) {\n                    user[hungarianKey] = {};\n                }\n                $.extend(true, user[hungarianKey], user[key]);\n                _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);\n            } else {\n                user[hungarianKey] = user[key];\n            }\n        }\n    });\n}\n/**\n * Map one parameter onto another\n *  @param {object} o Object to map\n *  @param {*} knew The new parameter name\n *  @param {*} old The old parameter name\n */ var _fnCompatMap = function(o, knew, old) {\n    if (o[knew] !== undefined) {\n        o[old] = o[knew];\n    }\n};\n/**\n * Provide backwards compatibility for the main DT options. Note that the new\n * options are mapped onto the old parameters, so this is an external interface\n * change only.\n *  @param {object} init Object to map\n */ function _fnCompatOpts(init) {\n    _fnCompatMap(init, \"ordering\", \"bSort\");\n    _fnCompatMap(init, \"orderMulti\", \"bSortMulti\");\n    _fnCompatMap(init, \"orderClasses\", \"bSortClasses\");\n    _fnCompatMap(init, \"orderCellsTop\", \"bSortCellsTop\");\n    _fnCompatMap(init, \"order\", \"aaSorting\");\n    _fnCompatMap(init, \"orderFixed\", \"aaSortingFixed\");\n    _fnCompatMap(init, \"paging\", \"bPaginate\");\n    _fnCompatMap(init, \"pagingType\", \"sPaginationType\");\n    _fnCompatMap(init, \"pageLength\", \"iDisplayLength\");\n    _fnCompatMap(init, \"searching\", \"bFilter\");\n    // Boolean initialisation of x-scrolling\n    if (typeof init.sScrollX === \"boolean\") {\n        init.sScrollX = init.sScrollX ? \"100%\" : \"\";\n    }\n    if (typeof init.scrollX === \"boolean\") {\n        init.scrollX = init.scrollX ? \"100%\" : \"\";\n    }\n    // Objects for ordering\n    if (typeof init.bSort === \"object\") {\n        init.orderIndicators = init.bSort.indicators !== undefined ? init.bSort.indicators : true;\n        init.orderHandler = init.bSort.handler !== undefined ? init.bSort.handler : true;\n        init.bSort = true;\n    } else if (init.bSort === false) {\n        init.orderIndicators = false;\n        init.orderHandler = false;\n    }\n    // Which cells are the title cells?\n    if (typeof init.bSortCellsTop === \"boolean\") {\n        init.titleRow = init.bSortCellsTop;\n    }\n    // Column search objects are in an array, so it needs to be converted\n    // element by element\n    var searchCols = init.aoSearchCols;\n    if (searchCols) {\n        for(var i = 0, ien = searchCols.length; i < ien; i++){\n            if (searchCols[i]) {\n                _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);\n            }\n        }\n    }\n    // Enable search delay if server-side processing is enabled\n    if (init.serverSide && !init.searchDelay) {\n        init.searchDelay = 400;\n    }\n}\n/**\n * Provide backwards compatibility for column options. Note that the new options\n * are mapped onto the old parameters, so this is an external interface change\n * only.\n *  @param {object} init Object to map\n */ function _fnCompatCols(init) {\n    _fnCompatMap(init, \"orderable\", \"bSortable\");\n    _fnCompatMap(init, \"orderData\", \"aDataSort\");\n    _fnCompatMap(init, \"orderSequence\", \"asSorting\");\n    _fnCompatMap(init, \"orderDataType\", \"sortDataType\");\n    // orderData can be given as an integer\n    var dataSort = init.aDataSort;\n    if (typeof dataSort === \"number\" && !Array.isArray(dataSort)) {\n        init.aDataSort = [\n            dataSort\n        ];\n    }\n}\n/**\n * Browser feature detection for capabilities, quirks\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnBrowserDetect(settings) {\n    // We don't need to do this every time DataTables is constructed, the values\n    // calculated are specific to the browser and OS configuration which we\n    // don't expect to change between initialisations\n    if (!DataTable.__browser) {\n        var browser = {};\n        DataTable.__browser = browser;\n        // Scrolling feature / quirks detection\n        var n = $(\"<div/>\").css({\n            position: \"fixed\",\n            top: 0,\n            left: -1 * window.pageXOffset,\n            height: 1,\n            width: 1,\n            overflow: \"hidden\"\n        }).append($(\"<div/>\").css({\n            position: \"absolute\",\n            top: 1,\n            left: 1,\n            width: 100,\n            overflow: \"scroll\"\n        }).append($(\"<div/>\").css({\n            width: \"100%\",\n            height: 10\n        }))).appendTo(\"body\");\n        var outer = n.children();\n        var inner = outer.children();\n        // Get scrollbar width\n        browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;\n        // In rtl text layout, some browsers (most, but not all) will place the\n        // scrollbar on the left, rather than the right.\n        browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1;\n        n.remove();\n    }\n    $.extend(settings.oBrowser, DataTable.__browser);\n    settings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n}\n/**\n * Add a column to the list used for the table with default values\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnAddColumn(oSettings) {\n    // Add column to aoColumns array\n    var oDefaults = DataTable.defaults.column;\n    var iCol = oSettings.aoColumns.length;\n    var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {\n        \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [\n            iCol\n        ],\n        \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n        idx: iCol,\n        searchFixed: {},\n        colEl: $(\"<col>\").attr(\"data-dt-column\", iCol)\n    });\n    oSettings.aoColumns.push(oCol);\n    // Add search object for column specific search. Note that the `searchCols[ iCol ]`\n    // passed into extend can be undefined. This allows the user to give a default\n    // with only some of the parameters defined, and also not give a default\n    var searchCols = oSettings.aoPreSearchCols;\n    searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]);\n}\n/**\n * Apply options for a column\n *  @param {object} oSettings dataTables settings object\n *  @param {int} iCol column index to consider\n *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n *  @memberof DataTable#oApi\n */ function _fnColumnOptions(oSettings, iCol, oOptions) {\n    var oCol = oSettings.aoColumns[iCol];\n    /* User specified column options */ if (oOptions !== undefined && oOptions !== null) {\n        // Backwards compatibility\n        _fnCompatCols(oOptions);\n        // Map camel case parameters to their Hungarian counterparts\n        _fnCamelToHungarian(DataTable.defaults.column, oOptions, true);\n        /* Backwards compatibility for mDataProp */ if (oOptions.mDataProp !== undefined && !oOptions.mData) {\n            oOptions.mData = oOptions.mDataProp;\n        }\n        if (oOptions.sType) {\n            oCol._sManualType = oOptions.sType;\n        }\n        // `class` is a reserved word in Javascript, so we need to provide\n        // the ability to use a valid name for the camel case input\n        if (oOptions.className && !oOptions.sClass) {\n            oOptions.sClass = oOptions.className;\n        }\n        var origClass = oCol.sClass;\n        $.extend(oCol, oOptions);\n        _fnMap(oCol, oOptions, \"sWidth\", \"sWidthOrig\");\n        // Merge class from previously defined classes with this one, rather than just\n        // overwriting it in the extend above\n        if (origClass !== oCol.sClass) {\n            oCol.sClass = origClass + \" \" + oCol.sClass;\n        }\n        /* iDataSort to be applied (backwards compatibility), but aDataSort will take\n\t\t * priority if defined\n\t\t */ if (oOptions.iDataSort !== undefined) {\n            oCol.aDataSort = [\n                oOptions.iDataSort\n            ];\n        }\n        _fnMap(oCol, oOptions, \"aDataSort\");\n    }\n    /* Cache the data get and set functions for speed */ var mDataSrc = oCol.mData;\n    var mData = _fnGetObjectDataFn(mDataSrc);\n    // The `render` option can be given as an array to access the helper rendering methods.\n    // The first element is the rendering method to use, the rest are the parameters to pass\n    if (oCol.mRender && Array.isArray(oCol.mRender)) {\n        var copy = oCol.mRender.slice();\n        var name = copy.shift();\n        oCol.mRender = DataTable.render[name].apply(window, copy);\n    }\n    oCol._render = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;\n    var attrTest = function(src) {\n        return typeof src === \"string\" && src.indexOf(\"@\") !== -1;\n    };\n    oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));\n    oCol._setter = null;\n    oCol.fnGetData = function(rowData, type, meta) {\n        var innerData = mData(rowData, type, undefined, meta);\n        return oCol._render && type ? oCol._render(innerData, type, rowData, meta) : innerData;\n    };\n    oCol.fnSetData = function(rowData, val, meta) {\n        return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);\n    };\n    // Indicate if DataTables should read DOM data as an object or array\n    // Used in _fnGetRowElements\n    if (typeof mDataSrc !== \"number\" && !oCol._isArrayHost) {\n        oSettings._rowReadObject = true;\n    }\n    /* Feature sorting overrides column specific when off */ if (!oSettings.oFeatures.bSort) {\n        oCol.bSortable = false;\n    }\n}\n/**\n * Adjust the table column widths for new data. Note: you would probably want to\n * do a redraw after calling this function!\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnAdjustColumnSizing(settings) {\n    _fnCalculateColumnWidths(settings);\n    _fnColumnSizes(settings);\n    var scroll = settings.oScroll;\n    if (scroll.sY !== \"\" || scroll.sX !== \"\") {\n        _fnScrollDraw(settings);\n    }\n    _fnCallbackFire(settings, null, \"column-sizing\", [\n        settings\n    ]);\n}\n/**\n * Apply column sizes\n *\n * @param {*} settings DataTables settings object\n */ function _fnColumnSizes(settings) {\n    var cols = settings.aoColumns;\n    for(var i = 0; i < cols.length; i++){\n        var width = _fnColumnsSumWidth(settings, [\n            i\n        ], false, false);\n        cols[i].colEl.css(\"width\", width);\n        if (settings.oScroll.sX) {\n            cols[i].colEl.css(\"min-width\", width);\n        }\n    }\n}\n/**\n * Convert the index of a visible column to the index in the data array (take account\n * of hidden columns)\n *  @param {object} oSettings dataTables settings object\n *  @param {int} iMatch Visible column index to lookup\n *  @returns {int} i the data index\n *  @memberof DataTable#oApi\n */ function _fnVisibleToColumnIndex(oSettings, iMatch) {\n    var aiVis = _fnGetColumns(oSettings, \"bVisible\");\n    return typeof aiVis[iMatch] === \"number\" ? aiVis[iMatch] : null;\n}\n/**\n * Convert the index of an index in the data array and convert it to the visible\n *   column index (take account of hidden columns)\n *  @param {int} iMatch Column index to lookup\n *  @param {object} oSettings dataTables settings object\n *  @returns {int} i the data index\n *  @memberof DataTable#oApi\n */ function _fnColumnIndexToVisible(oSettings, iMatch) {\n    var aiVis = _fnGetColumns(oSettings, \"bVisible\");\n    var iPos = aiVis.indexOf(iMatch);\n    return iPos !== -1 ? iPos : null;\n}\n/**\n * Get the number of visible columns\n *  @param {object} oSettings dataTables settings object\n *  @returns {int} i the number of visible columns\n *  @memberof DataTable#oApi\n */ function _fnVisbleColumns(settings) {\n    var layout = settings.aoHeader;\n    var columns = settings.aoColumns;\n    var vis = 0;\n    if (layout.length) {\n        for(var i = 0, ien = layout[0].length; i < ien; i++){\n            if (columns[i].bVisible && $(layout[0][i].cell).css(\"display\") !== \"none\") {\n                vis++;\n            }\n        }\n    }\n    return vis;\n}\n/**\n * Get an array of column indexes that match a given property\n *  @param {object} oSettings dataTables settings object\n *  @param {string} sParam Parameter in aoColumns to look for - typically\n *    bVisible or bSearchable\n *  @returns {array} Array of indexes with matched properties\n *  @memberof DataTable#oApi\n */ function _fnGetColumns(oSettings, sParam) {\n    var a = [];\n    oSettings.aoColumns.map(function(val, i) {\n        if (val[sParam]) {\n            a.push(i);\n        }\n    });\n    return a;\n}\n/**\n * Allow the result from a type detection function to be `true` while\n * translating that into a string. Old type detection functions will\n * return the type name if it passes. An obect store would be better,\n * but not backwards compatible.\n *\n * @param {*} typeDetect Object or function for type detection\n * @param {*} res Result from the type detection function\n * @returns Type name or false\n */ function _typeResult(typeDetect, res) {\n    return res === true ? typeDetect._name : res;\n}\n/**\n * Calculate the 'type' of a column\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnColumnTypes(settings) {\n    var columns = settings.aoColumns;\n    var data = settings.aoData;\n    var types = DataTable.ext.type.detect;\n    var i, ien, j, jen, k, ken;\n    var col, detectedType, cache;\n    // For each column, spin over the data type detection functions, seeing if one matches\n    for(i = 0, ien = columns.length; i < ien; i++){\n        col = columns[i];\n        cache = [];\n        if (!col.sType && col._sManualType) {\n            col.sType = col._sManualType;\n        } else if (!col.sType) {\n            // With SSP type detection can be unreliable and error prone, so we provide a way\n            // to turn it off.\n            if (!settings.typeDetect) {\n                return;\n            }\n            for(j = 0, jen = types.length; j < jen; j++){\n                var typeDetect = types[j];\n                // There can be either one, or three type detection functions\n                var oneOf = typeDetect.oneOf;\n                var allOf = typeDetect.allOf || typeDetect;\n                var init = typeDetect.init;\n                var one = false;\n                detectedType = null;\n                // Fast detect based on column assignment\n                if (init) {\n                    detectedType = _typeResult(typeDetect, init(settings, col, i));\n                    if (detectedType) {\n                        col.sType = detectedType;\n                        break;\n                    }\n                }\n                for(k = 0, ken = data.length; k < ken; k++){\n                    if (!data[k]) {\n                        continue;\n                    }\n                    // Use a cache array so we only need to get the type data\n                    // from the formatter once (when using multiple detectors)\n                    if (cache[k] === undefined) {\n                        cache[k] = _fnGetCellData(settings, k, i, \"type\");\n                    }\n                    // Only one data point in the column needs to match this function\n                    if (oneOf && !one) {\n                        one = _typeResult(typeDetect, oneOf(cache[k], settings));\n                    }\n                    // All data points need to match this function\n                    detectedType = _typeResult(typeDetect, allOf(cache[k], settings));\n                    // If null, then this type can't apply to this column, so\n                    // rather than testing all cells, break out. There is an\n                    // exception for the last type which is `html`. We need to\n                    // scan all rows since it is possible to mix string and HTML\n                    // types\n                    if (!detectedType && j !== types.length - 3) {\n                        break;\n                    }\n                    // Only a single match is needed for html type since it is\n                    // bottom of the pile and very similar to string - but it\n                    // must not be empty\n                    if (detectedType === \"html\" && !_empty(cache[k])) {\n                        break;\n                    }\n                }\n                // Type is valid for all data points in the column - use this\n                // type\n                if (oneOf && one && detectedType || !oneOf && detectedType) {\n                    col.sType = detectedType;\n                    break;\n                }\n            }\n            // Fall back - if no type was detected, always use string\n            if (!col.sType) {\n                col.sType = \"string\";\n            }\n        }\n        // Set class names for header / footer for auto type classes\n        var autoClass = _ext.type.className[col.sType];\n        if (autoClass) {\n            _columnAutoClass(settings.aoHeader, i, autoClass);\n            _columnAutoClass(settings.aoFooter, i, autoClass);\n        }\n        var renderer = _ext.type.render[col.sType];\n        // This can only happen once! There is no way to remove\n        // a renderer. After the first time the renderer has\n        // already been set so createTr will run the renderer itself.\n        if (renderer && !col._render) {\n            col._render = DataTable.util.get(renderer);\n            _columnAutoRender(settings, i);\n        }\n    }\n}\n/**\n * Apply an auto detected renderer to data which doesn't yet have\n * a renderer\n */ function _columnAutoRender(settings, colIdx) {\n    var data = settings.aoData;\n    for(var i = 0; i < data.length; i++){\n        if (data[i].nTr) {\n            // We have to update the display here since there is no\n            // invalidation check for the data\n            var display = _fnGetCellData(settings, i, colIdx, \"display\");\n            data[i].displayData[colIdx] = display;\n            _fnWriteCell(data[i].anCells[colIdx], display);\n        // No need to update sort / filter data since it has\n        // been invalidated and will be re-read with the\n        // renderer now applied\n        }\n    }\n}\n/**\n * Apply a class name to a column's header cells\n */ function _columnAutoClass(container, colIdx, className) {\n    container.forEach(function(row) {\n        if (row[colIdx] && row[colIdx].unique) {\n            _addClass(row[colIdx].cell, className);\n        }\n    });\n}\n/**\n * Take the column definitions and static columns arrays and calculate how\n * they relate to column indexes. The callback function will then apply the\n * definition found for a column to a suitable configuration object.\n *  @param {object} oSettings dataTables settings object\n *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n *  @param {array} aoCols The aoColumns array that defines columns individually\n *  @param {array} headerLayout Layout for header as it was loaded\n *  @param {function} fn Callback function - takes two parameters, the calculated\n *    column index and the definition for that column.\n *  @memberof DataTable#oApi\n */ function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, headerLayout, fn) {\n    var i, iLen, j, jLen, k, kLen, def;\n    var columns = oSettings.aoColumns;\n    if (aoCols) {\n        for(i = 0, iLen = aoCols.length; i < iLen; i++){\n            if (aoCols[i] && aoCols[i].name) {\n                columns[i].sName = aoCols[i].name;\n            }\n        }\n    }\n    // Column definitions with aTargets\n    if (aoColDefs) {\n        /* Loop over the definitions array - loop in reverse so first instance has priority */ for(i = aoColDefs.length - 1; i >= 0; i--){\n            def = aoColDefs[i];\n            /* Each definition can target multiple columns, as it is an array */ var aTargets = def.target !== undefined ? def.target : def.targets !== undefined ? def.targets : def.aTargets;\n            if (!Array.isArray(aTargets)) {\n                aTargets = [\n                    aTargets\n                ];\n            }\n            for(j = 0, jLen = aTargets.length; j < jLen; j++){\n                var target = aTargets[j];\n                if (typeof target === \"number\" && target >= 0) {\n                    /* Add columns that we don't yet know about */ while(columns.length <= target){\n                        _fnAddColumn(oSettings);\n                    }\n                    /* Integer, basic index */ fn(target, def);\n                } else if (typeof target === \"number\" && target < 0) {\n                    /* Negative integer, right to left column counting */ fn(columns.length + target, def);\n                } else if (typeof target === \"string\") {\n                    for(k = 0, kLen = columns.length; k < kLen; k++){\n                        if (target === \"_all\") {\n                            // Apply to all columns\n                            fn(k, def);\n                        } else if (target.indexOf(\":name\") !== -1) {\n                            // Column selector\n                            if (columns[k].sName === target.replace(\":name\", \"\")) {\n                                fn(k, def);\n                            }\n                        } else {\n                            // Cell selector\n                            headerLayout.forEach(function(row) {\n                                if (row[k]) {\n                                    var cell = $(row[k].cell);\n                                    // Legacy support. Note that it means that we don't support\n                                    // an element name selector only, since they are treated as\n                                    // class names for 1.x compat.\n                                    if (target.match(/^[a-z][\\w-]*$/i)) {\n                                        target = \".\" + target;\n                                    }\n                                    if (cell.is(target)) {\n                                        fn(k, def);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // Statically defined columns array\n    if (aoCols) {\n        for(i = 0, iLen = aoCols.length; i < iLen; i++){\n            fn(i, aoCols[i]);\n        }\n    }\n}\n/**\n * Get the width for a given set of columns\n *\n * @param {*} settings DataTables settings object\n * @param {*} targets Columns - comma separated string or array of numbers\n * @param {*} original Use the original width (true) or calculated (false)\n * @param {*} incVisible Include visible columns (true) or not (false)\n * @returns Combined CSS value\n */ function _fnColumnsSumWidth(settings, targets, original, incVisible) {\n    if (!Array.isArray(targets)) {\n        targets = _fnColumnsFromHeader(targets);\n    }\n    var sum = 0;\n    var unit;\n    var columns = settings.aoColumns;\n    for(var i = 0, ien = targets.length; i < ien; i++){\n        var column = columns[targets[i]];\n        var definedWidth = original ? column.sWidthOrig : column.sWidth;\n        if (!incVisible && column.bVisible === false) {\n            continue;\n        }\n        if (definedWidth === null || definedWidth === undefined) {\n            return null; // can't determine a defined width - browser defined\n        } else if (typeof definedWidth === \"number\") {\n            unit = \"px\";\n            sum += definedWidth;\n        } else {\n            var matched = definedWidth.match(/([\\d\\.]+)([^\\d]*)/);\n            if (matched) {\n                sum += matched[1] * 1;\n                unit = matched.length === 3 ? matched[2] : \"px\";\n            }\n        }\n    }\n    return sum + unit;\n}\nfunction _fnColumnsFromHeader(cell) {\n    var attr = $(cell).closest(\"[data-dt-column]\").attr(\"data-dt-column\");\n    if (!attr) {\n        return [];\n    }\n    return attr.split(\",\").map(function(val) {\n        return val * 1;\n    });\n}\n/**\n * Add a data array to the table, creating DOM node etc. This is the parallel to\n * _fnGatherData, but for adding rows from a Javascript source, rather than a\n * DOM source.\n *  @param {object} settings dataTables settings object\n *  @param {array} data data array to be added\n *  @param {node} [tr] TR element to add to the table - optional. If not given,\n *    DataTables will create a row automatically\n *  @param {array} [tds] Array of TD|TH elements for the row - must be given\n *    if nTr is.\n *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n *  @memberof DataTable#oApi\n */ function _fnAddData(settings, dataIn, tr, tds) {\n    /* Create the object for storing information about this new row */ var rowIdx = settings.aoData.length;\n    var rowModel = $.extend(true, {}, DataTable.models.oRow, {\n        src: tr ? \"dom\" : \"data\",\n        idx: rowIdx\n    });\n    rowModel._aData = dataIn;\n    settings.aoData.push(rowModel);\n    var columns = settings.aoColumns;\n    for(var i = 0, iLen = columns.length; i < iLen; i++){\n        // Invalidate the column types as the new data needs to be revalidated\n        columns[i].sType = null;\n    }\n    /* Add to the display array */ settings.aiDisplayMaster.push(rowIdx);\n    var id = settings.rowIdFn(dataIn);\n    if (id !== undefined) {\n        settings.aIds[id] = rowModel;\n    }\n    /* Create the DOM information, or register it if already present */ if (tr || !settings.oFeatures.bDeferRender) {\n        _fnCreateTr(settings, rowIdx, tr, tds);\n    }\n    return rowIdx;\n}\n/**\n * Add one or more TR elements to the table. Generally we'd expect to\n * use this for reading data from a DOM sourced table, but it could be\n * used for an TR element. Note that if a TR is given, it is used (i.e.\n * it is not cloned).\n *  @param {object} settings dataTables settings object\n *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n *  @returns {array} Array of indexes for the added rows\n *  @memberof DataTable#oApi\n */ function _fnAddTr(settings, trs) {\n    var row;\n    // Allow an individual node to be passed in\n    if (!(trs instanceof $)) {\n        trs = $(trs);\n    }\n    return trs.map(function(i, el) {\n        row = _fnGetRowElements(settings, el);\n        return _fnAddData(settings, row.data, el, row.cells);\n    });\n}\n/**\n * Get the data for a given cell from the internal cache, taking into account data mapping\n *  @param {object} settings dataTables settings object\n *  @param {int} rowIdx aoData row id\n *  @param {int} colIdx Column index\n *  @param {string} type data get type ('display', 'type' 'filter|search' 'sort|order')\n *  @returns {*} Cell data\n *  @memberof DataTable#oApi\n */ function _fnGetCellData(settings, rowIdx, colIdx, type) {\n    if (type === \"search\") {\n        type = \"filter\";\n    } else if (type === \"order\") {\n        type = \"sort\";\n    }\n    var row = settings.aoData[rowIdx];\n    if (!row) {\n        return undefined;\n    }\n    var draw = settings.iDraw;\n    var col = settings.aoColumns[colIdx];\n    var rowData = row._aData;\n    var defaultContent = col.sDefaultContent;\n    var cellData = col.fnGetData(rowData, type, {\n        settings: settings,\n        row: rowIdx,\n        col: colIdx\n    });\n    // Allow for a node being returned for non-display types\n    if (type !== \"display\" && cellData && typeof cellData === \"object\" && cellData.nodeName) {\n        cellData = cellData.innerHTML;\n    }\n    if (cellData === undefined) {\n        if (settings.iDrawError != draw && defaultContent === null) {\n            _fnLog(settings, 0, \"Requested unknown parameter \" + (typeof col.mData == \"function\" ? \"{function}\" : \"'\" + col.mData + \"'\") + \" for row \" + rowIdx + \", column \" + colIdx, 4);\n            settings.iDrawError = draw;\n        }\n        return defaultContent;\n    }\n    // When the data source is null and a specific data type is requested (i.e.\n    // not the original data), we can use default column data\n    if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined) {\n        cellData = defaultContent;\n    } else if (typeof cellData === \"function\") {\n        // If the data source is a function, then we run it and use the return,\n        // executing in the scope of the data object (for instances)\n        return cellData.call(rowData);\n    }\n    if (cellData === null && type === \"display\") {\n        return \"\";\n    }\n    if (type === \"filter\") {\n        var fomatters = DataTable.ext.type.search;\n        if (fomatters[col.sType]) {\n            cellData = fomatters[col.sType](cellData);\n        }\n    }\n    return cellData;\n}\n/**\n * Set the value for a specific cell, into the internal data cache\n *  @param {object} settings dataTables settings object\n *  @param {int} rowIdx aoData row id\n *  @param {int} colIdx Column index\n *  @param {*} val Value to set\n *  @memberof DataTable#oApi\n */ function _fnSetCellData(settings, rowIdx, colIdx, val) {\n    var col = settings.aoColumns[colIdx];\n    var rowData = settings.aoData[rowIdx]._aData;\n    col.fnSetData(rowData, val, {\n        settings: settings,\n        row: rowIdx,\n        col: colIdx\n    });\n}\n/**\n * Write a value to a cell\n * @param {*} td Cell\n * @param {*} val Value\n */ function _fnWriteCell(td, val) {\n    if (val && typeof val === \"object\" && val.nodeName) {\n        $(td).empty().append(val);\n    } else {\n        td.innerHTML = val;\n    }\n}\n// Private variable that is used to match action syntax in the data property object\nvar __reArray = /\\[.*?\\]$/;\nvar __reFn = /\\(\\)$/;\n/**\n * Split string on periods, taking into account escaped periods\n * @param  {string} str String to split\n * @return {array} Split string\n */ function _fnSplitObjNotation(str) {\n    var parts = str.match(/(\\\\.|[^.])+/g) || [\n        \"\"\n    ];\n    return parts.map(function(s) {\n        return s.replace(/\\\\\\./g, \".\");\n    });\n}\n/**\n * Return a function that can be used to get data from a source object, taking\n * into account the ability to use nested objects as a source\n *  @param {string|int|function} mSource The data source for the object\n *  @returns {function} Data get function\n *  @memberof DataTable#oApi\n */ var _fnGetObjectDataFn = DataTable.util.get;\n/**\n * Return a function that can be used to set data from a source object, taking\n * into account the ability to use nested objects as a source\n *  @param {string|int|function} mSource The data source for the object\n *  @returns {function} Data set function\n *  @memberof DataTable#oApi\n */ var _fnSetObjectDataFn = DataTable.util.set;\n/**\n * Return an array with the full table data\n *  @param {object} oSettings dataTables settings object\n *  @returns array {array} aData Master data array\n *  @memberof DataTable#oApi\n */ function _fnGetDataMaster(settings) {\n    return _pluck(settings.aoData, \"_aData\");\n}\n/**\n * Nuke the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnClearTable(settings) {\n    settings.aoData.length = 0;\n    settings.aiDisplayMaster.length = 0;\n    settings.aiDisplay.length = 0;\n    settings.aIds = {};\n}\n/**\n * Mark cached data as invalid such that a re-read of the data will occur when\n * the cached data is next requested. Also update from the data source object.\n *\n * @param {object} settings DataTables settings object\n * @param {int}    rowIdx   Row index to invalidate\n * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n *     or 'data'\n * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n *     row will be invalidated\n * @memberof DataTable#oApi\n *\n * @todo For the modularisation of v1.11 this will need to become a callback, so\n *   the sort and filter methods can subscribe to it. That will required\n *   initialisation options for sorting, which is why it is not already baked in\n */ function _fnInvalidate(settings, rowIdx, src, colIdx) {\n    var row = settings.aoData[rowIdx];\n    var i, ien;\n    // Remove the cached data for the row\n    row._aSortData = null;\n    row._aFilterData = null;\n    row.displayData = null;\n    // Are we reading last data from DOM or the data object?\n    if (src === \"dom\" || (!src || src === \"auto\") && row.src === \"dom\") {\n        // Read the data from the DOM\n        row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;\n    } else {\n        // Reading from data object, update the DOM\n        var cells = row.anCells;\n        var display = _fnGetRowDisplay(settings, rowIdx);\n        if (cells) {\n            if (colIdx !== undefined) {\n                _fnWriteCell(cells[colIdx], display[colIdx]);\n            } else {\n                for(i = 0, ien = cells.length; i < ien; i++){\n                    _fnWriteCell(cells[i], display[i]);\n                }\n            }\n        }\n    }\n    // Column specific invalidation\n    var cols = settings.aoColumns;\n    if (colIdx !== undefined) {\n        // Type - the data might have changed\n        cols[colIdx].sType = null;\n        // Max length string. Its a fairly cheep recalculation, so not worth\n        // something more complicated\n        cols[colIdx].maxLenString = null;\n    } else {\n        for(i = 0, ien = cols.length; i < ien; i++){\n            cols[i].sType = null;\n            cols[i].maxLenString = null;\n        }\n        // Update DataTables special `DT_*` attributes for the row\n        _fnRowAttributes(settings, row);\n    }\n}\n/**\n * Build a data source object from an HTML row, reading the contents of the\n * cells that are in the row.\n *\n * @param {object} settings DataTables settings object\n * @param {node|object} TR element from which to read data or existing row\n *   object from which to re-read the data from the cells\n * @param {int} [colIdx] Optional column index\n * @param {array|object} [d] Data source object. If `colIdx` is given then this\n *   parameter should also be given and will be used to write the data into.\n *   Only the column in question will be written\n * @returns {object} Object with two parameters: `data` the data read, in\n *   document order, and `cells` and array of nodes (they can be useful to the\n *   caller, so rather than needing a second traversal to get them, just return\n *   them from here).\n * @memberof DataTable#oApi\n */ function _fnGetRowElements(settings, row, colIdx, d) {\n    var tds = [], td = row.firstChild, name, col, i = 0, contents, columns = settings.aoColumns, objectRead = settings._rowReadObject;\n    // Allow the data object to be passed in, or construct\n    d = d !== undefined ? d : objectRead ? {} : [];\n    var attr = function(str, td) {\n        if (typeof str === \"string\") {\n            var idx = str.indexOf(\"@\");\n            if (idx !== -1) {\n                var attr = str.substring(idx + 1);\n                var setter = _fnSetObjectDataFn(str);\n                setter(d, td.getAttribute(attr));\n            }\n        }\n    };\n    // Read data from a cell and store into the data object\n    var cellProcess = function(cell) {\n        if (colIdx === undefined || colIdx === i) {\n            col = columns[i];\n            contents = cell.innerHTML.trim();\n            if (col && col._bAttrSrc) {\n                var setter = _fnSetObjectDataFn(col.mData._);\n                setter(d, contents);\n                attr(col.mData.sort, cell);\n                attr(col.mData.type, cell);\n                attr(col.mData.filter, cell);\n            } else {\n                // Depending on the `data` option for the columns the data can\n                // be read to either an object or an array.\n                if (objectRead) {\n                    if (!col._setter) {\n                        // Cache the setter function\n                        col._setter = _fnSetObjectDataFn(col.mData);\n                    }\n                    col._setter(d, contents);\n                } else {\n                    d[i] = contents;\n                }\n            }\n        }\n        i++;\n    };\n    if (td) {\n        // `tr` element was passed in\n        while(td){\n            name = td.nodeName.toUpperCase();\n            if (name == \"TD\" || name == \"TH\") {\n                cellProcess(td);\n                tds.push(td);\n            }\n            td = td.nextSibling;\n        }\n    } else {\n        // Existing row object passed in\n        tds = row.anCells;\n        for(var j = 0, jen = tds.length; j < jen; j++){\n            cellProcess(tds[j]);\n        }\n    }\n    // Read the ID from the DOM if present\n    var rowNode = row.firstChild ? row : row.nTr;\n    if (rowNode) {\n        var id = rowNode.getAttribute(\"id\");\n        if (id) {\n            _fnSetObjectDataFn(settings.rowId)(d, id);\n        }\n    }\n    return {\n        data: d,\n        cells: tds\n    };\n}\n/**\n * Render and cache a row's display data for the columns, if required\n * @returns \n */ function _fnGetRowDisplay(settings, rowIdx) {\n    var rowModal = settings.aoData[rowIdx];\n    var columns = settings.aoColumns;\n    if (!rowModal.displayData) {\n        // Need to render and cache\n        rowModal.displayData = [];\n        for(var colIdx = 0, len = columns.length; colIdx < len; colIdx++){\n            rowModal.displayData.push(_fnGetCellData(settings, rowIdx, colIdx, \"display\"));\n        }\n    }\n    return rowModal.displayData;\n}\n/**\n * Create a new TR element (and it's TD children) for a row\n *  @param {object} oSettings dataTables settings object\n *  @param {int} iRow Row to consider\n *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n *    DataTables will create a row automatically\n *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n *    if nTr is.\n *  @memberof DataTable#oApi\n */ function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {\n    var row = oSettings.aoData[iRow], rowData = row._aData, cells = [], nTr, nTd, oCol, i, iLen, create, trClass = oSettings.oClasses.tbody.row;\n    if (row.nTr === null) {\n        nTr = nTrIn || document.createElement(\"tr\");\n        row.nTr = nTr;\n        row.anCells = cells;\n        _addClass(nTr, trClass);\n        /* Use a private property on the node to allow reserve mapping from the node\n\t\t * to the aoData array for fast look up\n\t\t */ nTr._DT_RowIndex = iRow;\n        /* Special parameters can be given by the data source to be used on the row */ _fnRowAttributes(oSettings, row);\n        /* Process each column */ for(i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++){\n            oCol = oSettings.aoColumns[i];\n            create = nTrIn && anTds[i] ? false : true;\n            nTd = create ? document.createElement(oCol.sCellType) : anTds[i];\n            if (!nTd) {\n                _fnLog(oSettings, 0, \"Incorrect column count\", 18);\n            }\n            nTd._DT_CellIndex = {\n                row: iRow,\n                column: i\n            };\n            cells.push(nTd);\n            var display = _fnGetRowDisplay(oSettings, iRow);\n            // Need to create the HTML if new, or if a rendering function is defined\n            if (create || (oCol.mRender || oCol.mData !== i) && (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + \".display\")) {\n                _fnWriteCell(nTd, display[i]);\n            }\n            // column class\n            _addClass(nTd, oCol.sClass);\n            // Visibility - add or remove as required\n            if (oCol.bVisible && create) {\n                nTr.appendChild(nTd);\n            } else if (!oCol.bVisible && !create) {\n                nTd.parentNode.removeChild(nTd);\n            }\n            if (oCol.fnCreatedCell) {\n                oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);\n            }\n        }\n        _fnCallbackFire(oSettings, \"aoRowCreatedCallback\", \"row-created\", [\n            nTr,\n            rowData,\n            iRow,\n            cells\n        ]);\n    } else {\n        _addClass(row.nTr, trClass);\n    }\n}\n/**\n * Add attributes to a row based on the special `DT_*` parameters in a data\n * source object.\n *  @param {object} settings DataTables settings object\n *  @param {object} DataTables row object for the row to be modified\n *  @memberof DataTable#oApi\n */ function _fnRowAttributes(settings, row) {\n    var tr = row.nTr;\n    var data = row._aData;\n    if (tr) {\n        var id = settings.rowIdFn(data);\n        if (id) {\n            tr.id = id;\n        }\n        if (data.DT_RowClass) {\n            // Remove any classes added by DT_RowClass before\n            var a = data.DT_RowClass.split(\" \");\n            row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;\n            $(tr).removeClass(row.__rowc.join(\" \")).addClass(data.DT_RowClass);\n        }\n        if (data.DT_RowAttr) {\n            $(tr).attr(data.DT_RowAttr);\n        }\n        if (data.DT_RowData) {\n            $(tr).data(data.DT_RowData);\n        }\n    }\n}\n/**\n * Create the HTML header for the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnBuildHead(settings, side) {\n    var classes = settings.oClasses;\n    var columns = settings.aoColumns;\n    var i, ien, row;\n    var target = side === \"header\" ? settings.nTHead : settings.nTFoot;\n    var titleProp = side === \"header\" ? \"sTitle\" : side;\n    // Footer might be defined\n    if (!target) {\n        return;\n    }\n    // If no cells yet and we have content for them, then create\n    if (side === \"header\" || _pluck(settings.aoColumns, titleProp).join(\"\")) {\n        row = $(\"tr\", target);\n        // Add a row if needed\n        if (!row.length) {\n            row = $(\"<tr/>\").appendTo(target);\n        }\n        // Add the number of cells needed to make up to the number of columns\n        if (row.length === 1) {\n            var cellCount = 0;\n            $(\"td, th\", row).each(function() {\n                cellCount += this.colSpan;\n            });\n            for(i = cellCount, ien = columns.length; i < ien; i++){\n                $(\"<th/>\").html(columns[i][titleProp] || \"\").appendTo(row);\n            }\n        }\n    }\n    var detected = _fnDetectHeader(settings, target, true);\n    if (side === \"header\") {\n        settings.aoHeader = detected;\n        $(\"tr\", target).addClass(classes.thead.row);\n    } else {\n        settings.aoFooter = detected;\n        $(\"tr\", target).addClass(classes.tfoot.row);\n    }\n    // Every cell needs to be passed through the renderer\n    $(target).children(\"tr\").children(\"th, td\").each(function() {\n        _fnRenderer(settings, side)(settings, $(this), classes);\n    });\n}\n/**\n * Build a layout structure for a header or footer\n *\n * @param {*} settings DataTables settings\n * @param {*} source Source layout array\n * @param {*} incColumns What columns should be included\n * @returns Layout array in column index order\n */ function _fnHeaderLayout(settings, source, incColumns) {\n    var row, column, cell;\n    var local = [];\n    var structure = [];\n    var columns = settings.aoColumns;\n    var columnCount = columns.length;\n    var rowspan, colspan;\n    if (!source) {\n        return;\n    }\n    // Default is to work on only visible columns\n    if (!incColumns) {\n        incColumns = _range(columnCount).filter(function(idx) {\n            return columns[idx].bVisible;\n        });\n    }\n    // Make a copy of the master layout array, but with only the columns we want\n    for(row = 0; row < source.length; row++){\n        // Remove any columns we haven't selected\n        local[row] = source[row].slice().filter(function(cell, i) {\n            return incColumns.includes(i);\n        });\n        // Prep the structure array - it needs an element for each row\n        structure.push([]);\n    }\n    for(row = 0; row < local.length; row++){\n        for(column = 0; column < local[row].length; column++){\n            rowspan = 1;\n            colspan = 1;\n            // Check to see if there is already a cell (row/colspan) covering our target\n            // insert point. If there is, then there is nothing to do.\n            if (structure[row][column] === undefined) {\n                cell = local[row][column].cell;\n                // Expand for rowspan\n                while(local[row + rowspan] !== undefined && local[row][column].cell == local[row + rowspan][column].cell){\n                    structure[row + rowspan][column] = null;\n                    rowspan++;\n                }\n                // And for colspan\n                while(local[row][column + colspan] !== undefined && local[row][column].cell == local[row][column + colspan].cell){\n                    // Which also needs to go over rows\n                    for(var k = 0; k < rowspan; k++){\n                        structure[row + k][column + colspan] = null;\n                    }\n                    colspan++;\n                }\n                var titleSpan = $(\"span.dt-column-title\", cell);\n                structure[row][column] = {\n                    cell: cell,\n                    colspan: colspan,\n                    rowspan: rowspan,\n                    title: titleSpan.length ? titleSpan.html() : $(cell).html()\n                };\n            }\n        }\n    }\n    return structure;\n}\n/**\n * Draw the header (or footer) element based on the column visibility states.\n *\n *  @param object oSettings dataTables settings object\n *  @param array aoSource Layout array from _fnDetectHeader\n *  @memberof DataTable#oApi\n */ function _fnDrawHead(settings, source) {\n    var layout = _fnHeaderLayout(settings, source);\n    var tr, n;\n    for(var row = 0; row < source.length; row++){\n        tr = source[row].row;\n        // All cells are going to be replaced, so empty out the row\n        // Can't use $().empty() as that kills event handlers\n        if (tr) {\n            while(n = tr.firstChild){\n                tr.removeChild(n);\n            }\n        }\n        for(var column = 0; column < layout[row].length; column++){\n            var point = layout[row][column];\n            if (point) {\n                $(point.cell).appendTo(tr).attr(\"rowspan\", point.rowspan).attr(\"colspan\", point.colspan);\n            }\n        }\n    }\n}\n/**\n * Insert the required TR nodes into the table for display\n *  @param {object} oSettings dataTables settings object\n *  @param ajaxComplete true after ajax call to complete rendering\n *  @memberof DataTable#oApi\n */ function _fnDraw(oSettings, ajaxComplete) {\n    // Allow for state saving and a custom start position\n    _fnStart(oSettings);\n    /* Provide a pre-callback function which can be used to cancel the draw is false is returned */ var aPreDraw = _fnCallbackFire(oSettings, \"aoPreDrawCallback\", \"preDraw\", [\n        oSettings\n    ]);\n    if (aPreDraw.indexOf(false) !== -1) {\n        _fnProcessingDisplay(oSettings, false);\n        return;\n    }\n    var anRows = [];\n    var iRowCount = 0;\n    var bServerSide = _fnDataSource(oSettings) == \"ssp\";\n    var aiDisplay = oSettings.aiDisplay;\n    var iDisplayStart = oSettings._iDisplayStart;\n    var iDisplayEnd = oSettings.fnDisplayEnd();\n    var columns = oSettings.aoColumns;\n    var body = $(oSettings.nTBody);\n    oSettings.bDrawing = true;\n    /* Server-side processing draw intercept */ if (oSettings.deferLoading) {\n        oSettings.deferLoading = false;\n        oSettings.iDraw++;\n        _fnProcessingDisplay(oSettings, false);\n    } else if (!bServerSide) {\n        oSettings.iDraw++;\n    } else if (!oSettings.bDestroying && !ajaxComplete) {\n        // Show loading message for server-side processing\n        if (oSettings.iDraw === 0) {\n            body.empty().append(_emptyRow(oSettings));\n        }\n        _fnAjaxUpdate(oSettings);\n        return;\n    }\n    if (aiDisplay.length !== 0) {\n        var iStart = bServerSide ? 0 : iDisplayStart;\n        var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n        for(var j = iStart; j < iEnd; j++){\n            var iDataIndex = aiDisplay[j];\n            var aoData = oSettings.aoData[iDataIndex];\n            if (aoData.nTr === null) {\n                _fnCreateTr(oSettings, iDataIndex);\n            }\n            var nRow = aoData.nTr;\n            // Add various classes as needed\n            for(var i = 0; i < columns.length; i++){\n                var col = columns[i];\n                var td = aoData.anCells[i];\n                _addClass(td, _ext.type.className[col.sType]); // auto class\n                _addClass(td, oSettings.oClasses.tbody.cell); // all cells\n            }\n            // Row callback functions - might want to manipulate the row\n            // iRowCount and j are not currently documented. Are they at all\n            // useful?\n            _fnCallbackFire(oSettings, \"aoRowCallback\", null, [\n                nRow,\n                aoData._aData,\n                iRowCount,\n                j,\n                iDataIndex\n            ]);\n            anRows.push(nRow);\n            iRowCount++;\n        }\n    } else {\n        anRows[0] = _emptyRow(oSettings);\n    }\n    /* Header and footer callbacks */ _fnCallbackFire(oSettings, \"aoHeaderCallback\", \"header\", [\n        $(oSettings.nTHead).children(\"tr\")[0],\n        _fnGetDataMaster(oSettings),\n        iDisplayStart,\n        iDisplayEnd,\n        aiDisplay\n    ]);\n    _fnCallbackFire(oSettings, \"aoFooterCallback\", \"footer\", [\n        $(oSettings.nTFoot).children(\"tr\")[0],\n        _fnGetDataMaster(oSettings),\n        iDisplayStart,\n        iDisplayEnd,\n        aiDisplay\n    ]);\n    // replaceChildren is faster, but only became widespread in 2020,\n    // so a fall back in jQuery is provided for older browsers.\n    if (body[0].replaceChildren) {\n        body[0].replaceChildren.apply(body[0], anRows);\n    } else {\n        body.children().detach();\n        body.append($(anRows));\n    }\n    // Empty table needs a specific class\n    $(oSettings.nTableWrapper).toggleClass(\"dt-empty-footer\", $(\"tr\", oSettings.nTFoot).length === 0);\n    /* Call all required callback functions for the end of a draw */ _fnCallbackFire(oSettings, \"aoDrawCallback\", \"draw\", [\n        oSettings\n    ], true);\n    /* Draw is complete, sorting and filtering must be as well */ oSettings.bSorted = false;\n    oSettings.bFiltered = false;\n    oSettings.bDrawing = false;\n}\n/**\n * Redraw the table - taking account of the various features which are enabled\n *  @param {object} oSettings dataTables settings object\n *  @param {boolean} [holdPosition] Keep the current paging position. By default\n *    the paging is reset to the first page\n *  @memberof DataTable#oApi\n */ function _fnReDraw(settings, holdPosition, recompute) {\n    var features = settings.oFeatures, sort = features.bSort, filter = features.bFilter;\n    if (recompute === undefined || recompute === true) {\n        // Resolve any column types that are unknown due to addition or invalidation\n        _fnColumnTypes(settings);\n        if (sort) {\n            _fnSort(settings);\n        }\n        if (filter) {\n            _fnFilterComplete(settings, settings.oPreviousSearch);\n        } else {\n            // No filtering, so we want to just use the display master\n            settings.aiDisplay = settings.aiDisplayMaster.slice();\n        }\n    }\n    if (holdPosition !== true) {\n        settings._iDisplayStart = 0;\n    }\n    // Let any modules know about the draw hold position state (used by\n    // scrolling internally)\n    settings._drawHold = holdPosition;\n    _fnDraw(settings);\n    settings._drawHold = false;\n}\n/*\n * Table is empty - create a row with an empty message in it\n */ function _emptyRow(settings) {\n    var oLang = settings.oLanguage;\n    var zero = oLang.sZeroRecords;\n    var dataSrc = _fnDataSource(settings);\n    // Make use of the fact that settings.json is only set once the initial data has\n    // been loaded. Show loading when that isn't the case\n    if ((dataSrc === \"ssp\" || dataSrc === \"ajax\") && !settings.json) {\n        zero = oLang.sLoadingRecords;\n    } else if (oLang.sEmptyTable && settings.fnRecordsTotal() === 0) {\n        zero = oLang.sEmptyTable;\n    }\n    return $(\"<tr/>\").append($(\"<td />\", {\n        \"colSpan\": _fnVisbleColumns(settings),\n        \"class\": settings.oClasses.empty.row\n    }).html(zero))[0];\n}\n/**\n * Expand the layout items into an object for the rendering function\n */ function _layoutItems(row, align, items) {\n    if (Array.isArray(items)) {\n        for(var i = 0; i < items.length; i++){\n            _layoutItems(row, align, items[i]);\n        }\n        return;\n    }\n    var rowCell = row[align];\n    // If it is an object, then there can be multiple features contained in it\n    if ($.isPlainObject(items)) {\n        // A feature plugin cannot be named \"features\" due to this check\n        if (items.features) {\n            if (items.rowId) {\n                row.id = items.rowId;\n            }\n            if (items.rowClass) {\n                row.className = items.rowClass;\n            }\n            rowCell.id = items.id;\n            rowCell.className = items.className;\n            _layoutItems(row, align, items.features);\n        } else {\n            Object.keys(items).map(function(key) {\n                rowCell.contents.push({\n                    feature: key,\n                    opts: items[key]\n                });\n            });\n        }\n    } else {\n        rowCell.contents.push(items);\n    }\n}\n/**\n * Find, or create a layout row\n */ function _layoutGetRow(rows, rowNum, align) {\n    var row;\n    // Find existing rows\n    for(var i = 0; i < rows.length; i++){\n        row = rows[i];\n        if (row.rowNum === rowNum) {\n            // full is on its own, but start and end share a row\n            if (align === \"full\" && row.full || (align === \"start\" || align === \"end\") && (row.start || row.end)) {\n                if (!row[align]) {\n                    row[align] = {\n                        contents: []\n                    };\n                }\n                return row;\n            }\n        }\n    }\n    // If we get this far, then there was no match, create a new row\n    row = {\n        rowNum: rowNum\n    };\n    row[align] = {\n        contents: []\n    };\n    rows.push(row);\n    return row;\n}\n/**\n * Convert a `layout` object given by a user to the object structure needed\n * for the renderer. This is done twice, once for above and once for below\n * the table. Ordering must also be considered.\n *\n * @param {*} settings DataTables settings object\n * @param {*} layout Layout object to convert\n * @param {string} side `top` or `bottom`\n * @returns Converted array structure - one item for each row.\n */ function _layoutArray(settings, layout, side) {\n    var rows = [];\n    // Split out into an array\n    $.each(layout, function(pos, items) {\n        if (items === null) {\n            return;\n        }\n        var parts = pos.match(/^([a-z]+)([0-9]*)([A-Za-z]*)$/);\n        var rowNum = parts[2] ? parts[2] * 1 : 0;\n        var align = parts[3] ? parts[3].toLowerCase() : \"full\";\n        // Filter out the side we aren't interested in\n        if (parts[1] !== side) {\n            return;\n        }\n        // Get or create the row we should attach to\n        var row = _layoutGetRow(rows, rowNum, align);\n        _layoutItems(row, align, items);\n    });\n    // Order by item identifier\n    rows.sort(function(a, b) {\n        var order1 = a.rowNum;\n        var order2 = b.rowNum;\n        // If both in the same row, then the row with `full` comes first\n        if (order1 === order2) {\n            var ret = a.full && !b.full ? -1 : 1;\n            return side === \"bottom\" ? ret * -1 : ret;\n        }\n        return order2 - order1;\n    });\n    // Invert for below the table\n    if (side === \"bottom\") {\n        rows.reverse();\n    }\n    for(var row = 0; row < rows.length; row++){\n        delete rows[row].rowNum;\n        _layoutResolve(settings, rows[row]);\n    }\n    return rows;\n}\n/**\n * Convert the contents of a row's layout object to nodes that can be inserted\n * into the document by a renderer. Execute functions, look up plug-ins, etc.\n *\n * @param {*} settings DataTables settings object\n * @param {*} row Layout object for this row\n */ function _layoutResolve(settings, row) {\n    var getFeature = function(feature, opts) {\n        if (!_ext.features[feature]) {\n            _fnLog(settings, 0, \"Unknown feature: \" + feature);\n        }\n        return _ext.features[feature].apply(this, [\n            settings,\n            opts\n        ]);\n    };\n    var resolve = function(item) {\n        if (!row[item]) {\n            return;\n        }\n        var line = row[item].contents;\n        for(var i = 0, ien = line.length; i < ien; i++){\n            if (!line[i]) {\n                continue;\n            } else if (typeof line[i] === \"string\") {\n                line[i] = getFeature(line[i], null);\n            } else if ($.isPlainObject(line[i])) {\n                // If it's an object, it just has feature and opts properties from\n                // the transform in _layoutArray\n                line[i] = getFeature(line[i].feature, line[i].opts);\n            } else if (typeof line[i].node === \"function\") {\n                line[i] = line[i].node(settings);\n            } else if (typeof line[i] === \"function\") {\n                var inst = line[i](settings);\n                line[i] = typeof inst.node === \"function\" ? inst.node() : inst;\n            }\n        }\n    };\n    resolve(\"start\");\n    resolve(\"end\");\n    resolve(\"full\");\n}\n/**\n * Add the options to the page HTML for the table\n *  @param {object} settings DataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnAddOptionsHtml(settings) {\n    var classes = settings.oClasses;\n    var table = $(settings.nTable);\n    // Wrapper div around everything DataTables controls\n    var insert = $(\"<div/>\").attr({\n        id: settings.sTableId + \"_wrapper\",\n        \"class\": classes.container\n    }).insertBefore(table);\n    settings.nTableWrapper = insert[0];\n    if (settings.sDom) {\n        // Legacy\n        _fnLayoutDom(settings, settings.sDom, insert);\n    } else {\n        var top = _layoutArray(settings, settings.layout, \"top\");\n        var bottom = _layoutArray(settings, settings.layout, \"bottom\");\n        var renderer = _fnRenderer(settings, \"layout\");\n        // Everything above - the renderer will actually insert the contents into the document\n        top.forEach(function(item) {\n            renderer(settings, insert, item);\n        });\n        // The table - always the center of attention\n        renderer(settings, insert, {\n            full: {\n                table: true,\n                contents: [\n                    _fnFeatureHtmlTable(settings)\n                ]\n            }\n        });\n        // Everything below\n        bottom.forEach(function(item) {\n            renderer(settings, insert, item);\n        });\n    }\n    // Processing floats on top, so it isn't an inserted feature\n    _processingHtml(settings);\n}\n/**\n * Draw the table with the legacy DOM property\n * @param {*} settings DT settings object\n * @param {*} dom DOM string\n * @param {*} insert Insert point\n */ function _fnLayoutDom(settings, dom, insert) {\n    var parts = dom.match(/(\".*?\")|('.*?')|./g);\n    var featureNode, option, newNode, next, attr;\n    for(var i = 0; i < parts.length; i++){\n        featureNode = null;\n        option = parts[i];\n        if (option == \"<\") {\n            // New container div\n            newNode = $(\"<div/>\");\n            // Check to see if we should append an id and/or a class name to the container\n            next = parts[i + 1];\n            if (next[0] == \"'\" || next[0] == '\"') {\n                attr = next.replace(/['\"]/g, \"\");\n                var id = \"\", className;\n                /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n\t\t\t\t * breaks the string into parts and applies them as needed\n\t\t\t\t */ if (attr.indexOf(\".\") != -1) {\n                    var split = attr.split(\".\");\n                    id = split[0];\n                    className = split[1];\n                } else if (attr[0] == \"#\") {\n                    id = attr;\n                } else {\n                    className = attr;\n                }\n                newNode.attr(\"id\", id.substring(1)).addClass(className);\n                i++; // Move along the position array\n            }\n            insert.append(newNode);\n            insert = newNode;\n        } else if (option == \">\") {\n            // End container div\n            insert = insert.parent();\n        } else if (option == \"t\") {\n            // Table\n            featureNode = _fnFeatureHtmlTable(settings);\n        } else {\n            DataTable.ext.feature.forEach(function(feature) {\n                if (option == feature.cFeature) {\n                    featureNode = feature.fnInit(settings);\n                }\n            });\n        }\n        // Add to the display\n        if (featureNode) {\n            insert.append(featureNode);\n        }\n    }\n}\n/**\n * Use the DOM source to create up an array of header cells. The idea here is to\n * create a layout grid (array) of rows x columns, which contains a reference\n * to the cell that that point in the grid (regardless of col/rowspan), such that\n * any column / row could be removed and the new grid constructed\n *  @param {node} thead The header/footer element for the table\n *  @returns {array} Calculated layout array\n *  @memberof DataTable#oApi\n */ function _fnDetectHeader(settings, thead, write) {\n    var columns = settings.aoColumns;\n    var rows = $(thead).children(\"tr\");\n    var row, cell;\n    var i, k, l, iLen, shifted, column, colspan, rowspan;\n    var titleRow = settings.titleRow;\n    var isHeader = thead && thead.nodeName.toLowerCase() === \"thead\";\n    var layout = [];\n    var unique;\n    var shift = function(a, i, j) {\n        var k = a[i];\n        while(k[j]){\n            j++;\n        }\n        return j;\n    };\n    // We know how many rows there are in the layout - so prep it\n    for(i = 0, iLen = rows.length; i < iLen; i++){\n        layout.push([]);\n    }\n    for(i = 0, iLen = rows.length; i < iLen; i++){\n        row = rows[i];\n        column = 0;\n        // For every cell in the row..\n        cell = row.firstChild;\n        while(cell){\n            if (cell.nodeName.toUpperCase() == \"TD\" || cell.nodeName.toUpperCase() == \"TH\") {\n                var cols = [];\n                var jqCell = $(cell);\n                // Get the col and rowspan attributes from the DOM and sanitise them\n                colspan = cell.getAttribute(\"colspan\") * 1;\n                rowspan = cell.getAttribute(\"rowspan\") * 1;\n                colspan = !colspan || colspan === 0 || colspan === 1 ? 1 : colspan;\n                rowspan = !rowspan || rowspan === 0 || rowspan === 1 ? 1 : rowspan;\n                // There might be colspan cells already in this row, so shift our target\n                // accordingly\n                shifted = shift(layout, i, column);\n                // Cache calculation for unique columns\n                unique = colspan === 1 ? true : false;\n                // Perform header setup\n                if (write) {\n                    if (unique) {\n                        // Allow column options to be set from HTML attributes\n                        _fnColumnOptions(settings, shifted, jqCell.data());\n                        // Get the width for the column. This can be defined from the\n                        // width attribute, style attribute or `columns.width` option\n                        var columnDef = columns[shifted];\n                        var width = cell.getAttribute(\"width\") || null;\n                        var t = cell.style.width.match(/width:\\s*(\\d+[pxem%]+)/);\n                        if (t) {\n                            width = t[1];\n                        }\n                        columnDef.sWidthOrig = columnDef.sWidth || width;\n                        if (isHeader) {\n                            // Column title handling - can be user set, or read from the DOM\n                            // This happens before the render, so the original is still in place\n                            if (columnDef.sTitle !== null && !columnDef.autoTitle) {\n                                if (titleRow === true && i === 0 || // top row\n                                titleRow === false && i === rows.length - 1 || // bottom row\n                                titleRow === i || // specific row\n                                titleRow === null) {\n                                    cell.innerHTML = columnDef.sTitle;\n                                }\n                            }\n                            if (!columnDef.sTitle && unique) {\n                                columnDef.sTitle = _stripHtml(cell.innerHTML);\n                                columnDef.autoTitle = true;\n                            }\n                        } else {\n                            // Footer specific operations\n                            if (columnDef.footer) {\n                                cell.innerHTML = columnDef.footer;\n                            }\n                        }\n                        // Fall back to the aria-label attribute on the table header if no ariaTitle is\n                        // provided.\n                        if (!columnDef.ariaTitle) {\n                            columnDef.ariaTitle = jqCell.attr(\"aria-label\") || columnDef.sTitle;\n                        }\n                        // Column specific class names\n                        if (columnDef.className) {\n                            jqCell.addClass(columnDef.className);\n                        }\n                    }\n                    // Wrap the column title so we can write to it in future\n                    if ($(\"span.dt-column-title\", cell).length === 0) {\n                        $(\"<span>\").addClass(\"dt-column-title\").append(cell.childNodes).appendTo(cell);\n                    }\n                    if (settings.orderIndicators && isHeader && jqCell.filter(\":not([data-dt-order=disable])\").length !== 0 && jqCell.parent(\":not([data-dt-order=disable])\").length !== 0 && $(\"span.dt-column-order\", cell).length === 0) {\n                        $(\"<span>\").addClass(\"dt-column-order\").appendTo(cell);\n                    }\n                    // We need to wrap the elements in the header in another element to use flexbox\n                    // layout for those elements\n                    var headerFooter = isHeader ? \"header\" : \"footer\";\n                    if ($(\"span.dt-column-\" + headerFooter, cell).length === 0) {\n                        $(\"<div>\").addClass(\"dt-column-\" + headerFooter).append(cell.childNodes).appendTo(cell);\n                    }\n                }\n                // If there is col / rowspan, copy the information into the layout grid\n                for(l = 0; l < colspan; l++){\n                    for(k = 0; k < rowspan; k++){\n                        layout[i + k][shifted + l] = {\n                            cell: cell,\n                            unique: unique\n                        };\n                        layout[i + k].row = row;\n                    }\n                    cols.push(shifted + l);\n                }\n                // Assign an attribute so spanning cells can still be identified\n                // as belonging to a column\n                cell.setAttribute(\"data-dt-column\", _unique(cols).join(\",\"));\n            }\n            cell = cell.nextSibling;\n        }\n    }\n    return layout;\n}\n/**\n * Set the start position for draw\n *  @param {object} oSettings dataTables settings object\n */ function _fnStart(oSettings) {\n    var bServerSide = _fnDataSource(oSettings) == \"ssp\";\n    var iInitDisplayStart = oSettings.iInitDisplayStart;\n    // Check and see if we have an initial draw position from state saving\n    if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {\n        oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;\n        oSettings.iInitDisplayStart = -1;\n    }\n}\n/**\n * Create an Ajax call based on the table's settings, taking into account that\n * parameters can have multiple forms, and backwards compatibility.\n *\n * @param {object} oSettings dataTables settings object\n * @param {array} data Data to send to the server, required by\n *     DataTables - may be augmented by developer callbacks\n * @param {function} fn Callback function to run when data is obtained\n */ function _fnBuildAjax(oSettings, data, fn) {\n    var ajaxData;\n    var ajax = oSettings.ajax;\n    var instance = oSettings.oInstance;\n    var callback = function(json) {\n        var status = oSettings.jqXHR ? oSettings.jqXHR.status : null;\n        if (json === null || typeof status === \"number\" && status == 204) {\n            json = {};\n            _fnAjaxDataSrc(oSettings, json, []);\n        }\n        var error = json.error || json.sError;\n        if (error) {\n            _fnLog(oSettings, 0, error);\n        }\n        // Microsoft often wrap JSON as a string in another JSON object\n        // Let's handle that automatically\n        if (json.d && typeof json.d === \"string\") {\n            try {\n                json = JSON.parse(json.d);\n            } catch (e) {\n            // noop\n            }\n        }\n        oSettings.json = json;\n        _fnCallbackFire(oSettings, null, \"xhr\", [\n            oSettings,\n            json,\n            oSettings.jqXHR\n        ], true);\n        fn(json);\n    };\n    if ($.isPlainObject(ajax) && ajax.data) {\n        ajaxData = ajax.data;\n        var newData = typeof ajaxData === \"function\" ? ajaxData(data, oSettings) : ajaxData; // an object object or array to merge\n        // If the function returned something, use that alone\n        data = typeof ajaxData === \"function\" && newData ? newData : $.extend(true, data, newData);\n        // Remove the data property as we've resolved it already and don't want\n        // jQuery to do it again (it is restored at the end of the function)\n        delete ajax.data;\n    }\n    var baseAjax = {\n        \"url\": typeof ajax === \"string\" ? ajax : \"\",\n        \"data\": data,\n        \"success\": callback,\n        \"dataType\": \"json\",\n        \"cache\": false,\n        \"type\": oSettings.sServerMethod,\n        \"error\": function(xhr, error) {\n            var ret = _fnCallbackFire(oSettings, null, \"xhr\", [\n                oSettings,\n                null,\n                oSettings.jqXHR\n            ], true);\n            if (ret.indexOf(true) === -1) {\n                if (error == \"parsererror\") {\n                    _fnLog(oSettings, 0, \"Invalid JSON response\", 1);\n                } else if (xhr.readyState === 4) {\n                    _fnLog(oSettings, 0, \"Ajax error\", 7);\n                }\n            }\n            _fnProcessingDisplay(oSettings, false);\n        }\n    };\n    // If `ajax` option is an object, extend and override our default base\n    if ($.isPlainObject(ajax)) {\n        $.extend(baseAjax, ajax);\n    }\n    // Store the data submitted for the API\n    oSettings.oAjaxData = data;\n    // Allow plug-ins and external processes to modify the data\n    _fnCallbackFire(oSettings, null, \"preXhr\", [\n        oSettings,\n        data,\n        baseAjax\n    ], true);\n    // Custom Ajax option to submit the parameters as a JSON string\n    if (baseAjax.submitAs === \"json\" && typeof data === \"object\") {\n        baseAjax.data = JSON.stringify(data);\n    }\n    if (typeof ajax === \"function\") {\n        // Is a function - let the caller define what needs to be done\n        oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);\n    } else if (ajax.url === \"\") {\n        // No url, so don't load any data. Just apply an empty data array\n        // to the object for the callback.\n        var empty = {};\n        DataTable.util.set(ajax.dataSrc)(empty, []);\n        callback(empty);\n    } else {\n        // Object to extend the base settings\n        oSettings.jqXHR = $.ajax(baseAjax);\n    }\n    // Restore for next time around\n    if (ajaxData) {\n        ajax.data = ajaxData;\n    }\n}\n/**\n * Update the table using an Ajax call\n *  @param {object} settings dataTables settings object\n *  @returns {boolean} Block the table drawing or not\n *  @memberof DataTable#oApi\n */ function _fnAjaxUpdate(settings) {\n    settings.iDraw++;\n    _fnProcessingDisplay(settings, true);\n    _fnBuildAjax(settings, _fnAjaxParameters(settings), function(json) {\n        _fnAjaxUpdateDraw(settings, json);\n    });\n}\n/**\n * Build up the parameters in an object needed for a server-side processing\n * request.\n *  @param {object} oSettings dataTables settings object\n *  @returns {bool} block the table drawing or not\n *  @memberof DataTable#oApi\n */ function _fnAjaxParameters(settings) {\n    var columns = settings.aoColumns, features = settings.oFeatures, preSearch = settings.oPreviousSearch, preColSearch = settings.aoPreSearchCols, colData = function(idx, prop) {\n        return typeof columns[idx][prop] === \"function\" ? \"function\" : columns[idx][prop];\n    };\n    return {\n        draw: settings.iDraw,\n        columns: columns.map(function(column, i) {\n            return {\n                data: colData(i, \"mData\"),\n                name: column.sName,\n                searchable: column.bSearchable,\n                orderable: column.bSortable,\n                search: {\n                    value: preColSearch[i].search,\n                    regex: preColSearch[i].regex,\n                    fixed: Object.keys(column.searchFixed).map(function(name) {\n                        return {\n                            name: name,\n                            term: column.searchFixed[name].toString()\n                        };\n                    })\n                }\n            };\n        }),\n        order: _fnSortFlatten(settings).map(function(val) {\n            return {\n                column: val.col,\n                dir: val.dir,\n                name: colData(val.col, \"sName\")\n            };\n        }),\n        start: settings._iDisplayStart,\n        length: features.bPaginate ? settings._iDisplayLength : -1,\n        search: {\n            value: preSearch.search,\n            regex: preSearch.regex,\n            fixed: Object.keys(settings.searchFixed).map(function(name) {\n                return {\n                    name: name,\n                    term: settings.searchFixed[name].toString()\n                };\n            })\n        }\n    };\n}\n/**\n * Data the data from the server (nuking the old) and redraw the table\n *  @param {object} oSettings dataTables settings object\n *  @param {object} json json data return from the server.\n *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n *  @param {array} json.aaData The data to display on this page\n *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n *  @memberof DataTable#oApi\n */ function _fnAjaxUpdateDraw(settings, json) {\n    var data = _fnAjaxDataSrc(settings, json);\n    var draw = _fnAjaxDataSrcParam(settings, \"draw\", json);\n    var recordsTotal = _fnAjaxDataSrcParam(settings, \"recordsTotal\", json);\n    var recordsFiltered = _fnAjaxDataSrcParam(settings, \"recordsFiltered\", json);\n    if (draw !== undefined) {\n        // Protect against out of sequence returns\n        if (draw * 1 < settings.iDraw) {\n            return;\n        }\n        settings.iDraw = draw * 1;\n    }\n    // No data in returned object, so rather than an array, we show an empty table\n    if (!data) {\n        data = [];\n    }\n    _fnClearTable(settings);\n    settings._iRecordsTotal = parseInt(recordsTotal, 10);\n    settings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n    for(var i = 0, ien = data.length; i < ien; i++){\n        _fnAddData(settings, data[i]);\n    }\n    settings.aiDisplay = settings.aiDisplayMaster.slice();\n    _fnColumnTypes(settings);\n    _fnDraw(settings, true);\n    _fnInitComplete(settings);\n    _fnProcessingDisplay(settings, false);\n}\n/**\n * Get the data from the JSON data source to use for drawing a table. Using\n * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n * source object, or from a processing function.\n *  @param {object} settings dataTables settings object\n *  @param  {object} json Data source object / array from the server\n *  @return {array} Array of data to use\n */ function _fnAjaxDataSrc(settings, json, write) {\n    var dataProp = \"data\";\n    if ($.isPlainObject(settings.ajax) && settings.ajax.dataSrc !== undefined) {\n        // Could in inside a `dataSrc` object, or not!\n        var dataSrc = settings.ajax.dataSrc;\n        // string, function and object are valid types\n        if (typeof dataSrc === \"string\" || typeof dataSrc === \"function\") {\n            dataProp = dataSrc;\n        } else if (dataSrc.data !== undefined) {\n            dataProp = dataSrc.data;\n        }\n    }\n    if (!write) {\n        if (dataProp === \"data\") {\n            // If the default, then we still want to support the old style, and safely ignore\n            // it if possible\n            return json.aaData || json[dataProp];\n        }\n        return dataProp !== \"\" ? _fnGetObjectDataFn(dataProp)(json) : json;\n    }\n    // set\n    _fnSetObjectDataFn(dataProp)(json, write);\n}\n/**\n * Very similar to _fnAjaxDataSrc, but for the other SSP properties\n * @param {*} settings DataTables settings object\n * @param {*} param Target parameter\n * @param {*} json JSON data\n * @returns Resolved value\n */ function _fnAjaxDataSrcParam(settings, param, json) {\n    var dataSrc = $.isPlainObject(settings.ajax) ? settings.ajax.dataSrc : null;\n    if (dataSrc && dataSrc[param]) {\n        // Get from custom location\n        return _fnGetObjectDataFn(dataSrc[param])(json);\n    }\n    // else - Default behaviour\n    var old = \"\";\n    // Legacy support\n    if (param === \"draw\") {\n        old = \"sEcho\";\n    } else if (param === \"recordsTotal\") {\n        old = \"iTotalRecords\";\n    } else if (param === \"recordsFiltered\") {\n        old = \"iTotalDisplayRecords\";\n    }\n    return json[old] !== undefined ? json[old] : json[param];\n}\n/**\n * Filter the table using both the global filter and column based filtering\n *  @param {object} settings dataTables settings object\n *  @param {object} input search information\n *  @memberof DataTable#oApi\n */ function _fnFilterComplete(settings, input) {\n    var columnsSearch = settings.aoPreSearchCols;\n    // In server-side processing all filtering is done by the server, so no point hanging around here\n    if (_fnDataSource(settings) != \"ssp\") {\n        // Check if any of the rows were invalidated\n        _fnFilterData(settings);\n        // Start from the full data set\n        settings.aiDisplay = settings.aiDisplayMaster.slice();\n        // Global filter first\n        _fnFilter(settings.aiDisplay, settings, input.search, input);\n        $.each(settings.searchFixed, function(name, term) {\n            _fnFilter(settings.aiDisplay, settings, term, {});\n        });\n        // Then individual column filters\n        for(var i = 0; i < columnsSearch.length; i++){\n            var col = columnsSearch[i];\n            _fnFilter(settings.aiDisplay, settings, col.search, col, i);\n            $.each(settings.aoColumns[i].searchFixed, function(name, term) {\n                _fnFilter(settings.aiDisplay, settings, term, {}, i);\n            });\n        }\n        // And finally global filtering\n        _fnFilterCustom(settings);\n    }\n    // Tell the draw function we have been filtering\n    settings.bFiltered = true;\n    _fnCallbackFire(settings, null, \"search\", [\n        settings\n    ]);\n}\n/**\n * Apply custom filtering functions\n * \n * This is legacy now that we have named functions, but it is widely used\n * from 1.x, so it is not yet deprecated.\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnFilterCustom(settings) {\n    var filters = DataTable.ext.search;\n    var displayRows = settings.aiDisplay;\n    var row, rowIdx;\n    for(var i = 0, ien = filters.length; i < ien; i++){\n        var rows = [];\n        // Loop over each row and see if it should be included\n        for(var j = 0, jen = displayRows.length; j < jen; j++){\n            rowIdx = displayRows[j];\n            row = settings.aoData[rowIdx];\n            if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {\n                rows.push(rowIdx);\n            }\n        }\n        // So the array reference doesn't break set the results into the\n        // existing array\n        displayRows.length = 0;\n        _fnArrayApply(displayRows, rows);\n    }\n}\n/**\n * Filter the data table based on user input and draw the table\n */ function _fnFilter(searchRows, settings, input, options, column) {\n    if (input === \"\") {\n        return;\n    }\n    var i = 0;\n    var matched = [];\n    // Search term can be a function, regex or string - if a string we apply our\n    // smart filtering regex (assuming the options require that)\n    var searchFunc = typeof input === \"function\" ? input : null;\n    var rpSearch = input instanceof RegExp ? input : searchFunc ? null : _fnFilterCreateSearch(input, options);\n    // Then for each row, does the test pass. If not, lop the row from the array\n    for(i = 0; i < searchRows.length; i++){\n        var row = settings.aoData[searchRows[i]];\n        var data = column === undefined ? row._sFilterRow : row._aFilterData[column];\n        if (searchFunc && searchFunc(data, row._aData, searchRows[i], column) || rpSearch && rpSearch.test(data)) {\n            matched.push(searchRows[i]);\n        }\n    }\n    // Mutate the searchRows array\n    searchRows.length = matched.length;\n    for(i = 0; i < matched.length; i++){\n        searchRows[i] = matched[i];\n    }\n}\n/**\n * Build a regular expression object suitable for searching a table\n *  @param {string} sSearch string to search for\n *  @param {bool} bRegex treat as a regular expression or not\n *  @param {bool} bSmart perform smart filtering or not\n *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n *  @returns {RegExp} constructed object\n *  @memberof DataTable#oApi\n */ function _fnFilterCreateSearch(search, inOpts) {\n    var not = [];\n    var options = $.extend({}, {\n        boundary: false,\n        caseInsensitive: true,\n        exact: false,\n        regex: false,\n        smart: true\n    }, inOpts);\n    if (typeof search !== \"string\") {\n        search = search.toString();\n    }\n    // Remove diacritics if normalize is set up to do so\n    search = _normalize(search);\n    if (options.exact) {\n        return new RegExp(\"^\" + _fnEscapeRegex(search) + \"$\", options.caseInsensitive ? \"i\" : \"\");\n    }\n    search = options.regex ? search : _fnEscapeRegex(search);\n    if (options.smart) {\n        /* For smart filtering we want to allow the search to work regardless of\n\t\t * word order. We also want double quoted text to be preserved, so word\n\t\t * order is important - a la google. And a negative look around for\n\t\t * finding rows which don't contain a given string.\n\t\t * \n\t\t * So this is the sort of thing we want to generate:\n\t\t * \n\t\t * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n\t\t */ var parts = search.match(/!?[\"\\u201C][^\"\\u201D]+[\"\\u201D]|[^ ]+/g) || [\n            \"\"\n        ];\n        var a = parts.map(function(word) {\n            var negative = false;\n            var m;\n            // Determine if it is a \"does not include\"\n            if (word.charAt(0) === \"!\") {\n                negative = true;\n                word = word.substring(1);\n            }\n            // Strip the quotes from around matched phrases\n            if (word.charAt(0) === '\"') {\n                m = word.match(/^\"(.*)\"$/);\n                word = m ? m[1] : word;\n            } else if (word.charAt(0) === \"â\") {\n                // Smart quote match (iPhone users)\n                m = word.match(/^\\u201C(.*)\\u201D$/);\n                word = m ? m[1] : word;\n            }\n            // For our \"not\" case, we need to modify the string that is\n            // allowed to match at the end of the expression.\n            if (negative) {\n                if (word.length > 1) {\n                    not.push(\"(?!\" + word + \")\");\n                }\n                word = \"\";\n            }\n            return word.replace(/\"/g, \"\");\n        });\n        var match = not.length ? not.join(\"\") : \"\";\n        var boundary = options.boundary ? \"\\\\b\" : \"\";\n        search = \"^(?=.*?\" + boundary + a.join(\")(?=.*?\" + boundary) + \")(\" + match + \".)*$\";\n    }\n    return new RegExp(search, options.caseInsensitive ? \"i\" : \"\");\n}\n/**\n * Escape a string such that it can be used in a regular expression\n *  @param {string} sVal string to escape\n *  @returns {string} escaped string\n *  @memberof DataTable#oApi\n */ var _fnEscapeRegex = DataTable.util.escapeRegex;\nvar __filter_div = $(\"<div>\")[0];\nvar __filter_div_textContent = __filter_div.textContent !== undefined;\n// Update the filtering data for each row if needed (by invalidation or first run)\nfunction _fnFilterData(settings) {\n    var columns = settings.aoColumns;\n    var data = settings.aoData;\n    var column;\n    var j, jen, filterData, cellData, row;\n    var wasInvalidated = false;\n    for(var rowIdx = 0; rowIdx < data.length; rowIdx++){\n        if (!data[rowIdx]) {\n            continue;\n        }\n        row = data[rowIdx];\n        if (!row._aFilterData) {\n            filterData = [];\n            for(j = 0, jen = columns.length; j < jen; j++){\n                column = columns[j];\n                if (column.bSearchable) {\n                    cellData = _fnGetCellData(settings, rowIdx, j, \"filter\");\n                    // Search in DataTables is string based\n                    if (cellData === null) {\n                        cellData = \"\";\n                    }\n                    if (typeof cellData !== \"string\" && cellData.toString) {\n                        cellData = cellData.toString();\n                    }\n                } else {\n                    cellData = \"\";\n                }\n                // If it looks like there is an HTML entity in the string,\n                // attempt to decode it so sorting works as expected. Note that\n                // we could use a single line of jQuery to do this, but the DOM\n                // method used here is much faster https://jsperf.com/html-decode\n                if (cellData.indexOf && cellData.indexOf(\"&\") !== -1) {\n                    __filter_div.innerHTML = cellData;\n                    cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;\n                }\n                if (cellData.replace) {\n                    cellData = cellData.replace(/[\\r\\n\\u2028]/g, \"\");\n                }\n                filterData.push(cellData);\n            }\n            row._aFilterData = filterData;\n            row._sFilterRow = filterData.join(\"  \");\n            wasInvalidated = true;\n        }\n    }\n    return wasInvalidated;\n}\n/**\n * Draw the table for the first time, adding all required features\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnInitialise(settings) {\n    var i;\n    var init = settings.oInit;\n    var deferLoading = settings.deferLoading;\n    var dataSrc = _fnDataSource(settings);\n    // Ensure that the table data is fully initialised\n    if (!settings.bInitialised) {\n        setTimeout(function() {\n            _fnInitialise(settings);\n        }, 200);\n        return;\n    }\n    // Build the header / footer for the table\n    _fnBuildHead(settings, \"header\");\n    _fnBuildHead(settings, \"footer\");\n    // Load the table's state (if needed) and then render around it and draw\n    _fnLoadState(settings, init, function() {\n        // Then draw the header / footer\n        _fnDrawHead(settings, settings.aoHeader);\n        _fnDrawHead(settings, settings.aoFooter);\n        // Cache the paging start point, as the first redraw will reset it\n        var iAjaxStart = settings.iInitDisplayStart;\n        // Local data load\n        // Check if there is data passing into the constructor\n        if (init.aaData) {\n            for(i = 0; i < init.aaData.length; i++){\n                _fnAddData(settings, init.aaData[i]);\n            }\n        } else if (deferLoading || dataSrc == \"dom\") {\n            // Grab the data from the page\n            _fnAddTr(settings, $(settings.nTBody).children(\"tr\"));\n        }\n        // Filter not yet applied - copy the display master\n        settings.aiDisplay = settings.aiDisplayMaster.slice();\n        // Enable features\n        _fnAddOptionsHtml(settings);\n        _fnSortInit(settings);\n        _colGroup(settings);\n        /* Okay to show that something is going on now */ _fnProcessingDisplay(settings, true);\n        _fnCallbackFire(settings, null, \"preInit\", [\n            settings\n        ], true);\n        // If there is default sorting required - let's do it. The sort function\n        // will do the drawing for us. Otherwise we draw the table regardless of the\n        // Ajax source - this allows the table to look initialised for Ajax sourcing\n        // data (show 'loading' message possibly)\n        _fnReDraw(settings);\n        // Server-side processing init complete is done by _fnAjaxUpdateDraw\n        if (dataSrc != \"ssp\" || deferLoading) {\n            // if there is an ajax source load the data\n            if (dataSrc == \"ajax\") {\n                _fnBuildAjax(settings, {}, function(json) {\n                    var aData = _fnAjaxDataSrc(settings, json);\n                    // Got the data - add it to the table\n                    for(i = 0; i < aData.length; i++){\n                        _fnAddData(settings, aData[i]);\n                    }\n                    // Reset the init display for cookie saving. We've already done\n                    // a filter, and therefore cleared it before. So we need to make\n                    // it appear 'fresh'\n                    settings.iInitDisplayStart = iAjaxStart;\n                    _fnReDraw(settings);\n                    _fnProcessingDisplay(settings, false);\n                    _fnInitComplete(settings);\n                }, settings);\n            } else {\n                _fnInitComplete(settings);\n                _fnProcessingDisplay(settings, false);\n            }\n        }\n    });\n}\n/**\n * Draw the table for the first time, adding all required features\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnInitComplete(settings) {\n    if (settings._bInitComplete) {\n        return;\n    }\n    var args = [\n        settings,\n        settings.json\n    ];\n    settings._bInitComplete = true;\n    // Table is fully set up and we have data, so calculate the\n    // column widths\n    _fnAdjustColumnSizing(settings);\n    _fnCallbackFire(settings, null, \"plugin-init\", args, true);\n    _fnCallbackFire(settings, \"aoInitComplete\", \"init\", args, true);\n}\nfunction _fnLengthChange(settings, val) {\n    var len = parseInt(val, 10);\n    settings._iDisplayLength = len;\n    _fnLengthOverflow(settings);\n    // Fire length change event\n    _fnCallbackFire(settings, null, \"length\", [\n        settings,\n        len\n    ]);\n}\n/**\n * Alter the display settings to change the page\n *  @param {object} settings DataTables settings object\n *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n *    \"next\" or \"last\" or page number to jump to (integer)\n *  @param [bool] redraw Automatically draw the update or not\n *  @returns {bool} true page has changed, false - no change\n *  @memberof DataTable#oApi\n */ function _fnPageChange(settings, action, redraw) {\n    var start = settings._iDisplayStart, len = settings._iDisplayLength, records = settings.fnRecordsDisplay();\n    if (records === 0 || len === -1) {\n        start = 0;\n    } else if (typeof action === \"number\") {\n        start = action * len;\n        if (start > records) {\n            start = 0;\n        }\n    } else if (action == \"first\") {\n        start = 0;\n    } else if (action == \"previous\") {\n        start = len >= 0 ? start - len : 0;\n        if (start < 0) {\n            start = 0;\n        }\n    } else if (action == \"next\") {\n        if (start + len < records) {\n            start += len;\n        }\n    } else if (action == \"last\") {\n        start = Math.floor((records - 1) / len) * len;\n    } else if (action === \"ellipsis\") {\n        return;\n    } else {\n        _fnLog(settings, 0, \"Unknown paging action: \" + action, 5);\n    }\n    var changed = settings._iDisplayStart !== start;\n    settings._iDisplayStart = start;\n    _fnCallbackFire(settings, null, changed ? \"page\" : \"page-nc\", [\n        settings\n    ]);\n    if (changed && redraw) {\n        _fnDraw(settings);\n    }\n    return changed;\n}\n/**\n * Generate the node required for the processing node\n *  @param {object} settings DataTables settings object\n */ function _processingHtml(settings) {\n    var table = settings.nTable;\n    var scrolling = settings.oScroll.sX !== \"\" || settings.oScroll.sY !== \"\";\n    if (settings.oFeatures.bProcessing) {\n        var n = $(\"<div/>\", {\n            \"id\": settings.sTableId + \"_processing\",\n            \"class\": settings.oClasses.processing.container,\n            \"role\": \"status\"\n        }).html(settings.oLanguage.sProcessing).append(\"<div><div></div><div></div><div></div><div></div></div>\");\n        // Different positioning depending on if scrolling is enabled or not\n        if (scrolling) {\n            n.prependTo($(\"div.dt-scroll\", settings.nTableWrapper));\n        } else {\n            n.insertBefore(table);\n        }\n        $(table).on(\"processing.dt.DT\", function(e, s, show) {\n            n.css(\"display\", show ? \"block\" : \"none\");\n        });\n    }\n}\n/**\n * Display or hide the processing indicator\n *  @param {object} settings DataTables settings object\n *  @param {bool} show Show the processing indicator (true) or not (false)\n */ function _fnProcessingDisplay(settings, show) {\n    // Ignore cases when we are still redrawing\n    if (settings.bDrawing && show === false) {\n        return;\n    }\n    _fnCallbackFire(settings, null, \"processing\", [\n        settings,\n        show\n    ]);\n}\n/**\n * Show the processing element if an action takes longer than a given time\n *\n * @param {*} settings DataTables settings object\n * @param {*} enable Do (true) or not (false) async processing (local feature enablement)\n * @param {*} run Function to run\n */ function _fnProcessingRun(settings, enable, run) {\n    if (!enable) {\n        // Immediate execution, synchronous\n        run();\n    } else {\n        _fnProcessingDisplay(settings, true);\n        // Allow the processing display to show if needed\n        setTimeout(function() {\n            run();\n            _fnProcessingDisplay(settings, false);\n        }, 0);\n    }\n}\n/**\n * Add any control elements for the table - specifically scrolling\n *  @param {object} settings dataTables settings object\n *  @returns {node} Node to add to the DOM\n *  @memberof DataTable#oApi\n */ function _fnFeatureHtmlTable(settings) {\n    var table = $(settings.nTable);\n    // Scrolling from here on in\n    var scroll = settings.oScroll;\n    if (scroll.sX === \"\" && scroll.sY === \"\") {\n        return settings.nTable;\n    }\n    var scrollX = scroll.sX;\n    var scrollY = scroll.sY;\n    var classes = settings.oClasses.scrolling;\n    var caption = settings.captionNode;\n    var captionSide = caption ? caption._captionSide : null;\n    var headerClone = $(table[0].cloneNode(false));\n    var footerClone = $(table[0].cloneNode(false));\n    var footer = table.children(\"tfoot\");\n    var _div = \"<div/>\";\n    var size = function(s) {\n        return !s ? null : _fnStringToCss(s);\n    };\n    if (!footer.length) {\n        footer = null;\n    }\n    /*\n\t * The HTML structure that we want to generate in this function is:\n\t *  div - scroller\n\t *    div - scroll head\n\t *      div - scroll head inner\n\t *        table - scroll head table\n\t *          thead - thead\n\t *    div - scroll body\n\t *      table - table (master table)\n\t *        thead - thead clone for sizing\n\t *        tbody - tbody\n\t *    div - scroll foot\n\t *      div - scroll foot inner\n\t *        table - scroll foot table\n\t *          tfoot - tfoot\n\t */ var scroller = $(_div, {\n        \"class\": classes.container\n    }).append($(_div, {\n        \"class\": classes.header.self\n    }).css({\n        overflow: \"hidden\",\n        position: \"relative\",\n        border: 0,\n        width: scrollX ? size(scrollX) : \"100%\"\n    }).append($(_div, {\n        \"class\": classes.header.inner\n    }).css({\n        \"box-sizing\": \"content-box\",\n        width: scroll.sXInner || \"100%\"\n    }).append(headerClone.removeAttr(\"id\").css(\"margin-left\", 0).append(captionSide === \"top\" ? caption : null).append(table.children(\"thead\"))))).append($(_div, {\n        \"class\": classes.body\n    }).css({\n        position: \"relative\",\n        overflow: \"auto\",\n        width: size(scrollX)\n    }).append(table));\n    if (footer) {\n        scroller.append($(_div, {\n            \"class\": classes.footer.self\n        }).css({\n            overflow: \"hidden\",\n            border: 0,\n            width: scrollX ? size(scrollX) : \"100%\"\n        }).append($(_div, {\n            \"class\": classes.footer.inner\n        }).append(footerClone.removeAttr(\"id\").css(\"margin-left\", 0).append(captionSide === \"bottom\" ? caption : null).append(table.children(\"tfoot\")))));\n    }\n    var children = scroller.children();\n    var scrollHead = children[0];\n    var scrollBody = children[1];\n    var scrollFoot = footer ? children[2] : null;\n    // When the body is scrolled, then we also want to scroll the headers\n    $(scrollBody).on(\"scroll.DT\", function() {\n        var scrollLeft = this.scrollLeft;\n        scrollHead.scrollLeft = scrollLeft;\n        if (footer) {\n            scrollFoot.scrollLeft = scrollLeft;\n        }\n    });\n    // When focus is put on the header cells, we might need to scroll the body\n    $(\"th, td\", scrollHead).on(\"focus\", function() {\n        var scrollLeft = scrollHead.scrollLeft;\n        scrollBody.scrollLeft = scrollLeft;\n        if (footer) {\n            scrollBody.scrollLeft = scrollLeft;\n        }\n    });\n    $(scrollBody).css(\"max-height\", scrollY);\n    if (!scroll.bCollapse) {\n        $(scrollBody).css(\"height\", scrollY);\n    }\n    settings.nScrollHead = scrollHead;\n    settings.nScrollBody = scrollBody;\n    settings.nScrollFoot = scrollFoot;\n    // On redraw - align columns\n    settings.aoDrawCallback.push(_fnScrollDraw);\n    return scroller[0];\n}\n/**\n * Update the header, footer and body tables for resizing - i.e. column\n * alignment.\n *\n * Welcome to the most horrible function DataTables. The process that this\n * function follows is basically:\n *   1. Re-create the table inside the scrolling div\n *   2. Correct colgroup > col values if needed\n *   3. Copy colgroup > col over to header and footer\n *   4. Clean up\n *\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnScrollDraw(settings) {\n    // Given that this is such a monster function, a lot of variables are use\n    // to try and keep the minimised size as small as possible\n    var scroll = settings.oScroll, barWidth = scroll.iBarWidth, divHeader = $(settings.nScrollHead), divHeaderInner = divHeader.children(\"div\"), divHeaderTable = divHeaderInner.children(\"table\"), divBodyEl = settings.nScrollBody, divBody = $(divBodyEl), divFooter = $(settings.nScrollFoot), divFooterInner = divFooter.children(\"div\"), divFooterTable = divFooterInner.children(\"table\"), header = $(settings.nTHead), table = $(settings.nTable), footer = settings.nTFoot && $(\"th, td\", settings.nTFoot).length ? $(settings.nTFoot) : null, browser = settings.oBrowser, headerCopy, footerCopy;\n    // If the scrollbar visibility has changed from the last draw, we need to\n    // adjust the column sizes as the table width will have changed to account\n    // for the scrollbar\n    var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n    if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {\n        settings.scrollBarVis = scrollBarVis;\n        _fnAdjustColumnSizing(settings);\n        return; // adjust column sizing will call this function again\n    } else {\n        settings.scrollBarVis = scrollBarVis;\n    }\n    // 1. Re-create the table inside the scrolling div\n    // Remove the old minimised thead and tfoot elements in the inner table\n    table.children(\"thead, tfoot\").remove();\n    // Clone the current header and footer elements and then place it into the inner table\n    headerCopy = header.clone().prependTo(table);\n    headerCopy.find(\"th, td\").removeAttr(\"tabindex\");\n    headerCopy.find(\"[id]\").removeAttr(\"id\");\n    if (footer) {\n        footerCopy = footer.clone().prependTo(table);\n        footerCopy.find(\"[id]\").removeAttr(\"id\");\n    }\n    // 2. Correct colgroup > col values if needed\n    // It is possible that the cell sizes are smaller than the content, so we need to\n    // correct colgroup>col for such cases. This can happen if the auto width detection\n    // uses a cell which has a longer string, but isn't the widest! For example \n    // \"Chief Executive Officer (CEO)\" is the longest string in the demo, but\n    // \"Systems Administrator\" is actually the widest string since it doesn't collapse.\n    // Note the use of translating into a column index to get the `col` element. This\n    // is because of Responsive which might remove `col` elements, knocking the alignment\n    // of the indexes out.\n    if (settings.aiDisplay.length) {\n        // Get the column sizes from the first row in the table. This should really be a\n        // [].find, but it wasn't supported in Chrome until Sept 2015, and DT has 10 year\n        // browser support\n        var firstTr = null;\n        var start = _fnDataSource(settings) !== \"ssp\" ? settings._iDisplayStart : 0;\n        for(i = start; i < start + settings.aiDisplay.length; i++){\n            var idx = settings.aiDisplay[i];\n            var tr = settings.aoData[idx].nTr;\n            if (tr) {\n                firstTr = tr;\n                break;\n            }\n        }\n        if (firstTr) {\n            var colSizes = $(firstTr).children(\"th, td\").map(function(vis) {\n                return {\n                    idx: _fnVisibleToColumnIndex(settings, vis),\n                    width: $(this).outerWidth()\n                };\n            });\n            // Check against what the colgroup > col is set to and correct if needed\n            for(var i = 0; i < colSizes.length; i++){\n                var colEl = settings.aoColumns[colSizes[i].idx].colEl[0];\n                var colWidth = colEl.style.width.replace(\"px\", \"\");\n                if (colWidth !== colSizes[i].width) {\n                    colEl.style.width = colSizes[i].width + \"px\";\n                    if (scroll.sX) {\n                        colEl.style.minWidth = colSizes[i].width + \"px\";\n                    }\n                }\n            }\n        }\n    }\n    // 3. Copy the colgroup over to the header and footer\n    divHeaderTable.find(\"colgroup\").remove();\n    divHeaderTable.append(settings.colgroup.clone());\n    if (footer) {\n        divFooterTable.find(\"colgroup\").remove();\n        divFooterTable.append(settings.colgroup.clone());\n    }\n    // \"Hide\" the header and footer that we used for the sizing. We need to keep\n    // the content of the cell so that the width applied to the header and body\n    // both match, but we want to hide it completely.\n    $(\"th, td\", headerCopy).each(function() {\n        $(this.childNodes).wrapAll('<div class=\"dt-scroll-sizing\">');\n    });\n    if (footer) {\n        $(\"th, td\", footerCopy).each(function() {\n            $(this.childNodes).wrapAll('<div class=\"dt-scroll-sizing\">');\n        });\n    }\n    // 4. Clean up\n    // Figure out if there are scrollbar present - if so then we need a the header and footer to\n    // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n    var isScrolling = Math.floor(table.height()) > divBodyEl.clientHeight || divBody.css(\"overflow-y\") == \"scroll\";\n    var paddingSide = \"padding\" + (browser.bScrollbarLeft ? \"Left\" : \"Right\");\n    // Set the width's of the header and footer tables\n    var outerWidth = table.outerWidth();\n    divHeaderTable.css(\"width\", _fnStringToCss(outerWidth));\n    divHeaderInner.css(\"width\", _fnStringToCss(outerWidth)).css(paddingSide, isScrolling ? barWidth + \"px\" : \"0px\");\n    if (footer) {\n        divFooterTable.css(\"width\", _fnStringToCss(outerWidth));\n        divFooterInner.css(\"width\", _fnStringToCss(outerWidth)).css(paddingSide, isScrolling ? barWidth + \"px\" : \"0px\");\n    }\n    // Correct DOM ordering for colgroup - comes before the thead\n    table.children(\"colgroup\").prependTo(table);\n    // Adjust the position of the header in case we loose the y-scrollbar\n    divBody.trigger(\"scroll\");\n    // If sorting or filtering has occurred, jump the scrolling back to the top\n    // only if we aren't holding the position\n    if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {\n        divBodyEl.scrollTop = 0;\n    }\n}\n/**\n * Calculate the width of columns for the table\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnCalculateColumnWidths(settings) {\n    // Not interested in doing column width calculation if auto-width is disabled\n    if (!settings.oFeatures.bAutoWidth) {\n        return;\n    }\n    var table = settings.nTable, columns = settings.aoColumns, scroll = settings.oScroll, scrollY = scroll.sY, scrollX = scroll.sX, scrollXInner = scroll.sXInner, visibleColumns = _fnGetColumns(settings, \"bVisible\"), tableWidthAttr = table.getAttribute(\"width\"), tableContainer = table.parentNode, i, column, columnIdx;\n    var styleWidth = table.style.width;\n    var containerWidth = _fnWrapperWidth(settings);\n    // Don't re-run for the same width as the last time\n    if (containerWidth === settings.containerWidth) {\n        return false;\n    }\n    settings.containerWidth = containerWidth;\n    // If there is no width applied as a CSS style or as an attribute, we assume that\n    // the width is intended to be 100%, which is usually is in CSS, but it is very\n    // difficult to correctly parse the rules to get the final result.\n    if (!styleWidth && !tableWidthAttr) {\n        table.style.width = \"100%\";\n        styleWidth = \"100%\";\n    }\n    if (styleWidth && styleWidth.indexOf(\"%\") !== -1) {\n        tableWidthAttr = styleWidth;\n    }\n    // Let plug-ins know that we are doing a recalc, in case they have changed any of the\n    // visible columns their own way (e.g. Responsive uses display:none).\n    _fnCallbackFire(settings, null, \"column-calc\", {\n        visible: visibleColumns\n    }, false);\n    // Construct a single row, worst case, table with the widest\n    // node in the data, assign any user defined widths, then insert it into\n    // the DOM and allow the browser to do all the hard work of calculating\n    // table widths\n    var tmpTable = $(table.cloneNode()).css(\"visibility\", \"hidden\").removeAttr(\"id\");\n    // Clean up the table body\n    tmpTable.append(\"<tbody>\");\n    var tr = $(\"<tr/>\").appendTo(tmpTable.find(\"tbody\"));\n    // Clone the table header and footer - we can't use the header / footer\n    // from the cloned table, since if scrolling is active, the table's\n    // real header and footer are contained in different table tags\n    tmpTable.append($(settings.nTHead).clone()).append($(settings.nTFoot).clone());\n    // Remove any assigned widths from the footer (from scrolling)\n    tmpTable.find(\"tfoot th, tfoot td\").css(\"width\", \"\");\n    // Apply custom sizing to the cloned header\n    tmpTable.find(\"thead th, thead td\").each(function() {\n        // Get the `width` from the header layout\n        var width = _fnColumnsSumWidth(settings, this, true, false);\n        if (width) {\n            this.style.width = width;\n            // For scrollX we need to force the column width otherwise the\n            // browser will collapse it. If this width is smaller than the\n            // width the column requires, then it will have no effect\n            if (scrollX) {\n                this.style.minWidth = width;\n                $(this).append($(\"<div/>\").css({\n                    width: width,\n                    margin: 0,\n                    padding: 0,\n                    border: 0,\n                    height: 1\n                }));\n            }\n        } else {\n            this.style.width = \"\";\n        }\n    });\n    // Find the widest piece of data for each column and put it into the table\n    for(i = 0; i < visibleColumns.length; i++){\n        columnIdx = visibleColumns[i];\n        column = columns[columnIdx];\n        var longest = _fnGetMaxLenString(settings, columnIdx);\n        var autoClass = _ext.type.className[column.sType];\n        var text = longest + column.sContentPadding;\n        var insert = longest.indexOf(\"<\") === -1 ? document.createTextNode(text) : text;\n        $(\"<td/>\").addClass(autoClass).addClass(column.sClass).append(insert).appendTo(tr);\n    }\n    // Tidy the temporary table - remove name attributes so there aren't\n    // duplicated in the dom (radio elements for example)\n    $(\"[name]\", tmpTable).removeAttr(\"name\");\n    // Table has been built, attach to the document so we can work with it.\n    // A holding element is used, positioned at the top of the container\n    // with minimal height, so it has no effect on if the container scrolls\n    // or not. Otherwise it might trigger scrolling when it actually isn't\n    // needed\n    var holder = $(\"<div/>\").css(scrollX || scrollY ? {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        height: 1,\n        right: 0,\n        overflow: \"hidden\"\n    } : {}).append(tmpTable).appendTo(tableContainer);\n    // When scrolling (X or Y) we want to set the width of the table as \n    // appropriate. However, when not scrolling leave the table width as it\n    // is. This results in slightly different, but I think correct behaviour\n    if (scrollX && scrollXInner) {\n        tmpTable.width(scrollXInner);\n    } else if (scrollX) {\n        tmpTable.css(\"width\", \"auto\");\n        tmpTable.removeAttr(\"width\");\n        // If there is no width attribute or style, then allow the table to\n        // collapse\n        if (tmpTable.outerWidth() < tableContainer.clientWidth && tableWidthAttr) {\n            tmpTable.outerWidth(tableContainer.clientWidth);\n        }\n    } else if (scrollY) {\n        tmpTable.outerWidth(tableContainer.clientWidth);\n    } else if (tableWidthAttr) {\n        tmpTable.outerWidth(tableWidthAttr);\n    }\n    // Get the width of each column in the constructed table\n    var total = 0;\n    var bodyCells = tmpTable.find(\"tbody tr\").eq(0).children();\n    for(i = 0; i < visibleColumns.length; i++){\n        // Use getBounding for sub-pixel accuracy, which we then want to round up!\n        var bounding = bodyCells[i].getBoundingClientRect().width;\n        // Total is tracked to remove any sub-pixel errors as the outerWidth\n        // of the table might not equal the total given here\n        total += bounding;\n        // Width for each column to use\n        columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding);\n    }\n    table.style.width = _fnStringToCss(total);\n    // Finished with the table - ditch it\n    holder.remove();\n    // If there is a width attr, we want to attach an event listener which\n    // allows the table sizing to automatically adjust when the window is\n    // resized. Use the width attr rather than CSS, since we can't know if the\n    // CSS is a relative value or absolute - DOM read is always px.\n    if (tableWidthAttr) {\n        table.style.width = _fnStringToCss(tableWidthAttr);\n    }\n    if ((tableWidthAttr || scrollX) && !settings._reszEvt) {\n        var resize = DataTable.util.throttle(function() {\n            var newWidth = _fnWrapperWidth(settings);\n            // Don't do it if destroying or the container width is 0\n            if (!settings.bDestroying && newWidth !== 0) {\n                _fnAdjustColumnSizing(settings);\n            }\n        });\n        // For browsers that support it (~2020 onwards for wide support) we can watch for the\n        // container changing width.\n        if (window.ResizeObserver) {\n            // This is a tricky beast - if the element is visible when `.observe()` is called,\n            // then the callback is immediately run. Which we don't want. If the element isn't\n            // visible, then it isn't run, but we want it to run when it is then made visible.\n            // This flag allows the above to be satisfied.\n            var first = $(settings.nTableWrapper).is(\":visible\");\n            // Use an empty div to attach the observer so it isn't impacted by height changes\n            var resizer = $(\"<div>\").css({\n                width: \"100%\",\n                height: 0\n            }).addClass(\"dt-autosize\").appendTo(settings.nTableWrapper);\n            settings.resizeObserver = new ResizeObserver(function(e) {\n                if (first) {\n                    first = false;\n                } else {\n                    resize();\n                }\n            });\n            settings.resizeObserver.observe(resizer[0]);\n        } else {\n            // For old browsers, the best we can do is listen for a window resize\n            $(window).on(\"resize.DT-\" + settings.sInstance, resize);\n        }\n        settings._reszEvt = true;\n    }\n}\n/**\n * Get the width of the DataTables wrapper element\n *\n * @param {*} settings DataTables settings object\n * @returns Width\n */ function _fnWrapperWidth(settings) {\n    return $(settings.nTableWrapper).is(\":visible\") ? $(settings.nTableWrapper).width() : 0;\n}\n/**\n * Get the maximum strlen for each data column\n *  @param {object} settings dataTables settings object\n *  @param {int} colIdx column of interest\n *  @returns {string} string of the max length\n *  @memberof DataTable#oApi\n */ function _fnGetMaxLenString(settings, colIdx) {\n    var column = settings.aoColumns[colIdx];\n    if (!column.maxLenString) {\n        var s, max = \"\", maxLen = -1;\n        for(var i = 0, ien = settings.aiDisplayMaster.length; i < ien; i++){\n            var rowIdx = settings.aiDisplayMaster[i];\n            var data = _fnGetRowDisplay(settings, rowIdx)[colIdx];\n            var cellString = data && typeof data === \"object\" && data.nodeType ? data.innerHTML : data + \"\";\n            // Remove id / name attributes from elements so they\n            // don't interfere with existing elements\n            cellString = cellString.replace(/id=\".*?\"/g, \"\").replace(/name=\".*?\"/g, \"\");\n            s = _stripHtml(cellString).replace(/&nbsp;/g, \" \");\n            if (s.length > maxLen) {\n                // We want the HTML in the string, but the length that\n                // is important is the stripped string\n                max = cellString;\n                maxLen = s.length;\n            }\n        }\n        column.maxLenString = max;\n    }\n    return column.maxLenString;\n}\n/**\n * Append a CSS unit (only if required) to a string\n *  @param {string} value to css-ify\n *  @returns {string} value with css unit\n *  @memberof DataTable#oApi\n */ function _fnStringToCss(s) {\n    if (s === null) {\n        return \"0px\";\n    }\n    if (typeof s == \"number\") {\n        return s < 0 ? \"0px\" : s + \"px\";\n    }\n    // Check it has a unit character already\n    return s.match(/\\d$/) ? s + \"px\" : s;\n}\n/**\n * Re-insert the `col` elements for current visibility\n *\n * @param {*} settings DT settings\n */ function _colGroup(settings) {\n    var cols = settings.aoColumns;\n    settings.colgroup.empty();\n    for(i = 0; i < cols.length; i++){\n        if (cols[i].bVisible) {\n            settings.colgroup.append(cols[i].colEl);\n        }\n    }\n}\nfunction _fnSortInit(settings) {\n    var target = settings.nTHead;\n    var headerRows = target.querySelectorAll(\"tr\");\n    var titleRow = settings.titleRow;\n    var notSelector = ':not([data-dt-order=\"disable\"]):not([data-dt-order=\"icon-only\"])';\n    // Legacy support for `orderCellsTop`\n    if (titleRow === true) {\n        target = headerRows[0];\n    } else if (titleRow === false) {\n        target = headerRows[headerRows.length - 1];\n    } else if (titleRow !== null) {\n        target = headerRows[titleRow];\n    }\n    // else - all rows\n    if (settings.orderHandler) {\n        _fnSortAttachListener(settings, target, target === settings.nTHead ? \"tr\" + notSelector + \" th\" + notSelector + \", tr\" + notSelector + \" td\" + notSelector : \"th\" + notSelector + \", td\" + notSelector);\n    }\n    // Need to resolve the user input array into our internal structure\n    var order = [];\n    _fnSortResolve(settings, order, settings.aaSorting);\n    settings.aaSorting = order;\n}\nfunction _fnSortAttachListener(settings, node, selector, column, callback) {\n    _fnBindAction(node, selector, function(e) {\n        var run = false;\n        var columns = column === undefined ? _fnColumnsFromHeader(e.target) : Array.isArray(column) ? column : [\n            column\n        ];\n        if (columns.length) {\n            for(var i = 0, ien = columns.length; i < ien; i++){\n                var ret = _fnSortAdd(settings, columns[i], i, e.shiftKey);\n                if (ret !== false) {\n                    run = true;\n                }\n                // If the first entry is no sort, then subsequent\n                // sort columns are ignored\n                if (settings.aaSorting.length === 1 && settings.aaSorting[0][1] === \"\") {\n                    break;\n                }\n            }\n            if (run) {\n                _fnProcessingRun(settings, true, function() {\n                    _fnSort(settings);\n                    _fnSortDisplay(settings, settings.aiDisplay);\n                    _fnReDraw(settings, false, false);\n                    if (callback) {\n                        callback();\n                    }\n                });\n            }\n        }\n    });\n}\n/**\n * Sort the display array to match the master's order\n * @param {*} settings\n */ function _fnSortDisplay(settings, display) {\n    if (display.length < 2) {\n        return;\n    }\n    var master = settings.aiDisplayMaster;\n    var masterMap = {};\n    var map = {};\n    var i;\n    // Rather than needing an `indexOf` on master array, we can create a map\n    for(i = 0; i < master.length; i++){\n        masterMap[master[i]] = i;\n    }\n    // And then cache what would be the indexOf fom the display\n    for(i = 0; i < display.length; i++){\n        map[display[i]] = masterMap[display[i]];\n    }\n    display.sort(function(a, b) {\n        // Short version of this function is simply `master.indexOf(a) - master.indexOf(b);`\n        return map[a] - map[b];\n    });\n}\nfunction _fnSortResolve(settings, nestedSort, sort) {\n    var push = function(a) {\n        if ($.isPlainObject(a)) {\n            if (a.idx !== undefined) {\n                // Index based ordering\n                nestedSort.push([\n                    a.idx,\n                    a.dir\n                ]);\n            } else if (a.name) {\n                // Name based ordering\n                var cols = _pluck(settings.aoColumns, \"sName\");\n                var idx = cols.indexOf(a.name);\n                if (idx !== -1) {\n                    nestedSort.push([\n                        idx,\n                        a.dir\n                    ]);\n                }\n            }\n        } else {\n            // Plain column index and direction pair\n            nestedSort.push(a);\n        }\n    };\n    if ($.isPlainObject(sort)) {\n        // Object\n        push(sort);\n    } else if (sort.length && typeof sort[0] === \"number\") {\n        // 1D array\n        push(sort);\n    } else if (sort.length) {\n        // 2D array\n        for(var z = 0; z < sort.length; z++){\n            push(sort[z]); // Object or array\n        }\n    }\n}\nfunction _fnSortFlatten(settings) {\n    var i, k, kLen, aSort = [], extSort = DataTable.ext.type.order, aoColumns = settings.aoColumns, aDataSort, iCol, sType, srcCol, fixed = settings.aaSortingFixed, fixedObj = $.isPlainObject(fixed), nestedSort = [];\n    if (!settings.oFeatures.bSort) {\n        return aSort;\n    }\n    // Build the sort array, with pre-fix and post-fix options if they have been\n    // specified\n    if (Array.isArray(fixed)) {\n        _fnSortResolve(settings, nestedSort, fixed);\n    }\n    if (fixedObj && fixed.pre) {\n        _fnSortResolve(settings, nestedSort, fixed.pre);\n    }\n    _fnSortResolve(settings, nestedSort, settings.aaSorting);\n    if (fixedObj && fixed.post) {\n        _fnSortResolve(settings, nestedSort, fixed.post);\n    }\n    for(i = 0; i < nestedSort.length; i++){\n        srcCol = nestedSort[i][0];\n        if (aoColumns[srcCol]) {\n            aDataSort = aoColumns[srcCol].aDataSort;\n            for(k = 0, kLen = aDataSort.length; k < kLen; k++){\n                iCol = aDataSort[k];\n                sType = aoColumns[iCol].sType || \"string\";\n                if (nestedSort[i]._idx === undefined) {\n                    nestedSort[i]._idx = aoColumns[iCol].asSorting.indexOf(nestedSort[i][1]);\n                }\n                if (nestedSort[i][1]) {\n                    aSort.push({\n                        src: srcCol,\n                        col: iCol,\n                        dir: nestedSort[i][1],\n                        index: nestedSort[i]._idx,\n                        type: sType,\n                        formatter: extSort[sType + \"-pre\"],\n                        sorter: extSort[sType + \"-\" + nestedSort[i][1]]\n                    });\n                }\n            }\n        }\n    }\n    return aSort;\n}\n/**\n * Change the order of the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnSort(oSettings, col, dir) {\n    var i, ien, iLen, aiOrig = [], extSort = DataTable.ext.type.order, aoData = oSettings.aoData, sortCol, displayMaster = oSettings.aiDisplayMaster, aSort;\n    // Make sure the columns all have types defined\n    _fnColumnTypes(oSettings);\n    // Allow a specific column to be sorted, which will _not_ alter the display\n    // master\n    if (col !== undefined) {\n        var srcCol = oSettings.aoColumns[col];\n        aSort = [\n            {\n                src: col,\n                col: col,\n                dir: dir,\n                index: 0,\n                type: srcCol.sType,\n                formatter: extSort[srcCol.sType + \"-pre\"],\n                sorter: extSort[srcCol.sType + \"-\" + dir]\n            }\n        ];\n        displayMaster = displayMaster.slice();\n    } else {\n        aSort = _fnSortFlatten(oSettings);\n    }\n    for(i = 0, ien = aSort.length; i < ien; i++){\n        sortCol = aSort[i];\n        // Load the data needed for the sort, for each cell\n        _fnSortData(oSettings, sortCol.col);\n    }\n    /* No sorting required if server-side or no sorting array */ if (_fnDataSource(oSettings) != \"ssp\" && aSort.length !== 0) {\n        // Reset the initial positions on each pass so we get a stable sort\n        for(i = 0, iLen = displayMaster.length; i < iLen; i++){\n            aiOrig[i] = i;\n        }\n        // If the first sort is desc, then reverse the array to preserve original\n        // order, just in reverse\n        if (aSort.length && aSort[0].dir === \"desc\" && oSettings.orderDescReverse) {\n            aiOrig.reverse();\n        }\n        /* Do the sort - here we want multi-column sorting based on a given data source (column)\n\t\t * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n\t\t * follow on it's own, but this is what we want (example two column sorting):\n\t\t *  fnLocalSorting = function(a,b){\n\t\t *    var test;\n\t\t *    test = oSort['string-asc']('data11', 'data12');\n\t\t *      if (test !== 0)\n\t\t *        return test;\n\t\t *    test = oSort['numeric-desc']('data21', 'data22');\n\t\t *    if (test !== 0)\n\t\t *      return test;\n\t\t *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n\t\t *  }\n\t\t * Basically we have a test for each sorting column, if the data in that column is equal,\n\t\t * test the next column. If all columns match, then we use a numeric sort on the row\n\t\t * positions in the original data array to provide a stable sort.\n\t\t */ displayMaster.sort(function(a, b) {\n            var x, y, k, test, sort, len = aSort.length, dataA = aoData[a]._aSortData, dataB = aoData[b]._aSortData;\n            for(k = 0; k < len; k++){\n                sort = aSort[k];\n                // Data, which may have already been through a `-pre` function\n                x = dataA[sort.col];\n                y = dataB[sort.col];\n                if (sort.sorter) {\n                    // If there is a custom sorter (`-asc` or `-desc`) for this\n                    // data type, use it\n                    test = sort.sorter(x, y);\n                    if (test !== 0) {\n                        return test;\n                    }\n                } else {\n                    // Otherwise, use generic sorting\n                    test = x < y ? -1 : x > y ? 1 : 0;\n                    if (test !== 0) {\n                        return sort.dir === \"asc\" ? test : -test;\n                    }\n                }\n            }\n            x = aiOrig[a];\n            y = aiOrig[b];\n            return x < y ? -1 : x > y ? 1 : 0;\n        });\n    } else if (aSort.length === 0) {\n        // Apply index order\n        displayMaster.sort(function(x, y) {\n            return x < y ? -1 : x > y ? 1 : 0;\n        });\n    }\n    if (col === undefined) {\n        // Tell the draw function that we have sorted the data\n        oSettings.bSorted = true;\n        oSettings.sortDetails = aSort;\n        _fnCallbackFire(oSettings, null, \"order\", [\n            oSettings,\n            aSort\n        ]);\n    }\n    return displayMaster;\n}\n/**\n * Function to run on user sort request\n *  @param {object} settings dataTables settings object\n *  @param {node} attachTo node to attach the handler to\n *  @param {int} colIdx column sorting index\n *  @param {int} addIndex Counter\n *  @param {boolean} [shift=false] Shift click add\n *  @param {function} [callback] callback function\n *  @memberof DataTable#oApi\n */ function _fnSortAdd(settings, colIdx, addIndex, shift) {\n    var col = settings.aoColumns[colIdx];\n    var sorting = settings.aaSorting;\n    var asSorting = col.asSorting;\n    var nextSortIdx;\n    var next = function(a, overflow) {\n        var idx = a._idx;\n        if (idx === undefined) {\n            idx = asSorting.indexOf(a[1]);\n        }\n        return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;\n    };\n    if (!col.bSortable) {\n        return false;\n    }\n    // Convert to 2D array if needed\n    if (typeof sorting[0] === \"number\") {\n        sorting = settings.aaSorting = [\n            sorting\n        ];\n    }\n    // If appending the sort then we are multi-column sorting\n    if ((shift || addIndex) && settings.oFeatures.bSortMulti) {\n        // Are we already doing some kind of sort on this column?\n        var sortIdx = _pluck(sorting, \"0\").indexOf(colIdx);\n        if (sortIdx !== -1) {\n            // Yes, modify the sort\n            nextSortIdx = next(sorting[sortIdx], true);\n            if (nextSortIdx === null && sorting.length === 1) {\n                nextSortIdx = 0; // can't remove sorting completely\n            }\n            if (nextSortIdx === null) {\n                sorting.splice(sortIdx, 1);\n            } else {\n                sorting[sortIdx][1] = asSorting[nextSortIdx];\n                sorting[sortIdx]._idx = nextSortIdx;\n            }\n        } else if (shift) {\n            // No sort on this column yet, being added by shift click\n            // add it as itself\n            sorting.push([\n                colIdx,\n                asSorting[0],\n                0\n            ]);\n            sorting[sorting.length - 1]._idx = 0;\n        } else {\n            // No sort on this column yet, being added from a colspan\n            // so add with same direction as first column\n            sorting.push([\n                colIdx,\n                sorting[0][1],\n                0\n            ]);\n            sorting[sorting.length - 1]._idx = 0;\n        }\n    } else if (sorting.length && sorting[0][0] == colIdx) {\n        // Single column - already sorting on this column, modify the sort\n        nextSortIdx = next(sorting[0]);\n        sorting.length = 1;\n        sorting[0][1] = asSorting[nextSortIdx];\n        sorting[0]._idx = nextSortIdx;\n    } else {\n        // Single column - sort only on this column\n        sorting.length = 0;\n        sorting.push([\n            colIdx,\n            asSorting[0]\n        ]);\n        sorting[0]._idx = 0;\n    }\n}\n/**\n * Set the sorting classes on table's body, Note: it is safe to call this function\n * when bSort and bSortClasses are false\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnSortingClasses(settings) {\n    var oldSort = settings.aLastSort;\n    var sortClass = settings.oClasses.order.position;\n    var sort = _fnSortFlatten(settings);\n    var features = settings.oFeatures;\n    var i, ien, colIdx;\n    if (features.bSort && features.bSortClasses) {\n        // Remove old sorting classes\n        for(i = 0, ien = oldSort.length; i < ien; i++){\n            colIdx = oldSort[i].src;\n            // Remove column sorting\n            $(_pluck(settings.aoData, \"anCells\", colIdx)).removeClass(sortClass + (i < 2 ? i + 1 : 3));\n        }\n        // Add new column sorting\n        for(i = 0, ien = sort.length; i < ien; i++){\n            colIdx = sort[i].src;\n            $(_pluck(settings.aoData, \"anCells\", colIdx)).addClass(sortClass + (i < 2 ? i + 1 : 3));\n        }\n    }\n    settings.aLastSort = sort;\n}\n// Get the data to sort a column, be it from cache, fresh (populating the\n// cache), or from a sort formatter\nfunction _fnSortData(settings, colIdx) {\n    // Custom sorting function - provided by the sort data type\n    var column = settings.aoColumns[colIdx];\n    var customSort = DataTable.ext.order[column.sSortDataType];\n    var customData;\n    if (customSort) {\n        customData = customSort.call(settings.oInstance, settings, colIdx, _fnColumnIndexToVisible(settings, colIdx));\n    }\n    // Use / populate cache\n    var row, cellData;\n    var formatter = DataTable.ext.type.order[column.sType + \"-pre\"];\n    var data = settings.aoData;\n    for(var rowIdx = 0; rowIdx < data.length; rowIdx++){\n        // Sparse array\n        if (!data[rowIdx]) {\n            continue;\n        }\n        row = data[rowIdx];\n        if (!row._aSortData) {\n            row._aSortData = [];\n        }\n        if (!row._aSortData[colIdx] || customSort) {\n            cellData = customSort ? customData[rowIdx] : _fnGetCellData(settings, rowIdx, colIdx, \"sort\");\n            row._aSortData[colIdx] = formatter ? formatter(cellData, settings) : cellData;\n        }\n    }\n}\n/**\n * State information for a table\n *\n * @param {*} settings\n * @returns State object\n */ function _fnSaveState(settings) {\n    if (settings._bLoadingState) {\n        return;\n    }\n    // Sort state saving uses [[idx, order]] structure.\n    var sorting = [];\n    _fnSortResolve(settings, sorting, settings.aaSorting);\n    /* Store the interesting variables */ var columns = settings.aoColumns;\n    var state = {\n        time: +new Date(),\n        start: settings._iDisplayStart,\n        length: settings._iDisplayLength,\n        order: sorting.map(function(sort) {\n            // If a column name is available, use it\n            return columns[sort[0]] && columns[sort[0]].sName ? [\n                columns[sort[0]].sName,\n                sort[1]\n            ] : sort.slice();\n        }),\n        search: $.extend({}, settings.oPreviousSearch),\n        columns: settings.aoColumns.map(function(col, i) {\n            return {\n                name: col.sName,\n                visible: col.bVisible,\n                search: $.extend({}, settings.aoPreSearchCols[i])\n            };\n        })\n    };\n    settings.oSavedState = state;\n    _fnCallbackFire(settings, \"aoStateSaveParams\", \"stateSaveParams\", [\n        settings,\n        state\n    ]);\n    if (settings.oFeatures.bStateSave && !settings.bDestroying) {\n        settings.fnStateSaveCallback.call(settings.oInstance, settings, state);\n    }\n}\n/**\n * Attempt to load a saved table state\n *  @param {object} oSettings dataTables settings object\n *  @param {object} oInit DataTables init object so we can override settings\n *  @param {function} callback Callback to execute when the state has been loaded\n *  @memberof DataTable#oApi\n */ function _fnLoadState(settings, init, callback) {\n    if (!settings.oFeatures.bStateSave) {\n        callback();\n        return;\n    }\n    var loaded = function(state) {\n        _fnImplementState(settings, state, callback);\n    };\n    var state = settings.fnStateLoadCallback.call(settings.oInstance, settings, loaded);\n    if (state !== undefined) {\n        _fnImplementState(settings, state, callback);\n    }\n    // otherwise, wait for the loaded callback to be executed\n    return true;\n}\nfunction _fnImplementState(settings, s, callback) {\n    var i, ien;\n    var columns = settings.aoColumns;\n    var currentNames = _pluck(settings.aoColumns, \"sName\");\n    settings._bLoadingState = true;\n    // When StateRestore was introduced the state could now be implemented at any time\n    // Not just initialisation. To do this an api instance is required in some places\n    var api = settings._bInitComplete ? new DataTable.Api(settings) : null;\n    if (!s || !s.time) {\n        settings._bLoadingState = false;\n        callback();\n        return;\n    }\n    // Reject old data\n    var duration = settings.iStateDuration;\n    if (duration > 0 && s.time < +new Date() - duration * 1000) {\n        settings._bLoadingState = false;\n        callback();\n        return;\n    }\n    // Allow custom and plug-in manipulation functions to alter the saved data set and\n    // cancelling of loading by returning false\n    var abStateLoad = _fnCallbackFire(settings, \"aoStateLoadParams\", \"stateLoadParams\", [\n        settings,\n        s\n    ]);\n    if (abStateLoad.indexOf(false) !== -1) {\n        settings._bLoadingState = false;\n        callback();\n        return;\n    }\n    // Store the saved state so it might be accessed at any time\n    settings.oLoadedState = $.extend(true, {}, s);\n    // This is needed for ColReorder, which has to happen first to allow all\n    // the stored indexes to be usable. It is not publicly documented.\n    _fnCallbackFire(settings, null, \"stateLoadInit\", [\n        settings,\n        s\n    ], true);\n    // Page Length\n    if (s.length !== undefined) {\n        // If already initialised just set the value directly so that the select element is also updated\n        if (api) {\n            api.page.len(s.length);\n        } else {\n            settings._iDisplayLength = s.length;\n        }\n    }\n    // Restore key features\n    if (s.start !== undefined) {\n        if (api === null) {\n            settings._iDisplayStart = s.start;\n            settings.iInitDisplayStart = s.start;\n        } else {\n            _fnPageChange(settings, s.start / settings._iDisplayLength);\n        }\n    }\n    // Order\n    if (s.order !== undefined) {\n        settings.aaSorting = [];\n        $.each(s.order, function(i, col) {\n            var set = [\n                col[0],\n                col[1]\n            ];\n            // A column name was stored and should be used for restore\n            if (typeof col[0] === \"string\") {\n                // Find the name from the current list of column names\n                var idx = currentNames.indexOf(col[0]);\n                if (idx < 0) {\n                    // If the column was not found ignore it and continue\n                    return;\n                }\n                set[0] = idx;\n            } else if (set[0] >= columns.length) {\n                // If the column index is out of bounds ignore it and continue\n                return;\n            }\n            settings.aaSorting.push(set);\n        });\n    }\n    // Search\n    if (s.search !== undefined) {\n        $.extend(settings.oPreviousSearch, s.search);\n    }\n    // Columns\n    if (s.columns) {\n        var set = s.columns;\n        var incoming = _pluck(s.columns, \"name\");\n        // Check if it is a 2.2 style state object with a `name` property for the columns, and if\n        // the name was defined. If so, then create a new array that will map the state object\n        // given, to the current columns (don't bother if they are already matching tho).\n        if (incoming.join(\"\").length && incoming.join(\"\") !== currentNames.join(\"\")) {\n            set = [];\n            // For each column, try to find the name in the incoming array\n            for(i = 0; i < currentNames.length; i++){\n                if (currentNames[i] != \"\") {\n                    var idx = incoming.indexOf(currentNames[i]);\n                    if (idx >= 0) {\n                        set.push(s.columns[idx]);\n                    } else {\n                        // No matching column name in the state's columns, so this might be a new\n                        // column and thus can't have a state already.\n                        set.push({});\n                    }\n                } else {\n                    // If no name, but other columns did have a name, then there is no knowing\n                    // where this one came from originally so it can't be restored.\n                    set.push({});\n                }\n            }\n        }\n        // If the number of columns to restore is different from current, then all bets are off.\n        if (set.length === columns.length) {\n            for(i = 0, ien = set.length; i < ien; i++){\n                var col = set[i];\n                // Visibility\n                if (col.visible !== undefined) {\n                    // If the api is defined, the table has been initialised so we need to use it rather than internal settings\n                    if (api) {\n                        // Don't redraw the columns on every iteration of this loop, we will do this at the end instead\n                        api.column(i).visible(col.visible, false);\n                    } else {\n                        columns[i].bVisible = col.visible;\n                    }\n                }\n                // Search\n                if (col.search !== undefined) {\n                    $.extend(settings.aoPreSearchCols[i], col.search);\n                }\n            }\n            // If the api is defined then we need to adjust the columns once the visibility has been changed\n            if (api) {\n                api.columns.adjust();\n            }\n        }\n    }\n    settings._bLoadingState = false;\n    _fnCallbackFire(settings, \"aoStateLoaded\", \"stateLoaded\", [\n        settings,\n        s\n    ]);\n    callback();\n}\n/**\n * Log an error message\n *  @param {object} settings dataTables settings object\n *  @param {int} level log error messages, or display them to the user\n *  @param {string} msg error message\n *  @param {int} tn Technical note id to get more information about the error.\n *  @memberof DataTable#oApi\n */ function _fnLog(settings, level, msg, tn) {\n    msg = \"DataTables warning: \" + (settings ? \"table id=\" + settings.sTableId + \" - \" : \"\") + msg;\n    if (tn) {\n        msg += \". For more information about this error, please see \" + \"https://datatables.net/tn/\" + tn;\n    }\n    if (!level) {\n        // Backwards compatibility pre 1.10\n        var ext = DataTable.ext;\n        var type = ext.sErrMode || ext.errMode;\n        if (settings) {\n            _fnCallbackFire(settings, null, \"dt-error\", [\n                settings,\n                tn,\n                msg\n            ], true);\n        }\n        if (type == \"alert\") {\n            alert(msg);\n        } else if (type == \"throw\") {\n            throw new Error(msg);\n        } else if (typeof type == \"function\") {\n            type(settings, tn, msg);\n        }\n    } else if (window.console && console.log) {\n        console.log(msg);\n    }\n}\n/**\n * See if a property is defined on one object, if so assign it to the other object\n *  @param {object} ret target object\n *  @param {object} src source object\n *  @param {string} name property\n *  @param {string} [mappedName] name to map too - optional, name used if not given\n *  @memberof DataTable#oApi\n */ function _fnMap(ret, src, name, mappedName) {\n    if (Array.isArray(name)) {\n        $.each(name, function(i, val) {\n            if (Array.isArray(val)) {\n                _fnMap(ret, src, val[0], val[1]);\n            } else {\n                _fnMap(ret, src, val);\n            }\n        });\n        return;\n    }\n    if (mappedName === undefined) {\n        mappedName = name;\n    }\n    if (src[name] !== undefined) {\n        ret[mappedName] = src[name];\n    }\n}\n/**\n * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n * shallow copy arrays. The reason we need to do this, is that we don't want to\n * deep copy array init values (such as aaSorting) since the dev wouldn't be\n * able to override them, but we do want to deep copy arrays.\n *  @param {object} out Object to extend\n *  @param {object} extender Object from which the properties will be applied to\n *      out\n *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n *      independent copy with the exception of the `data` or `aaData` parameters\n *      if they are present. This is so you can pass in a collection to\n *      DataTables and have that used as your data source without breaking the\n *      references\n *  @returns {object} out Reference, just for convenience - out === the return.\n *  @memberof DataTable#oApi\n *  @todo This doesn't take account of arrays inside the deep copied objects.\n */ function _fnExtend(out, extender, breakRefs) {\n    var val;\n    for(var prop in extender){\n        if (Object.prototype.hasOwnProperty.call(extender, prop)) {\n            val = extender[prop];\n            if ($.isPlainObject(val)) {\n                if (!$.isPlainObject(out[prop])) {\n                    out[prop] = {};\n                }\n                $.extend(true, out[prop], val);\n            } else if (breakRefs && prop !== \"data\" && prop !== \"aaData\" && Array.isArray(val)) {\n                out[prop] = val.slice();\n            } else {\n                out[prop] = val;\n            }\n        }\n    }\n    return out;\n}\n/**\n * Bind an event handers to allow a click or return key to activate the callback.\n * This is good for accessibility since a return on the keyboard will have the\n * same effect as a click, if the element has focus.\n *  @param {element} n Element to bind the action to\n *  @param {object|string} selector Selector (for delegated events) or data object\n *   to pass to the triggered function\n *  @param {function} fn Callback function for when the event is triggered\n *  @memberof DataTable#oApi\n */ function _fnBindAction(n, selector, fn) {\n    $(n).on(\"click.DT\", selector, function(e) {\n        fn(e);\n    }).on(\"keypress.DT\", selector, function(e) {\n        if (e.which === 13) {\n            e.preventDefault();\n            fn(e);\n        }\n    }).on(\"selectstart.DT\", selector, function() {\n        // Don't want a double click resulting in text selection\n        return false;\n    });\n}\n/**\n * Register a callback function. Easily allows a callback function to be added to\n * an array store of callback functions that can then all be called together.\n *  @param {object} settings dataTables settings object\n *  @param {string} store Name of the array storage for the callbacks in oSettings\n *  @param {function} fn Function to be called back\n *  @memberof DataTable#oApi\n */ function _fnCallbackReg(settings, store, fn) {\n    if (fn) {\n        settings[store].push(fn);\n    }\n}\n/**\n * Fire callback functions and trigger events. Note that the loop over the\n * callback array store is done backwards! Further note that you do not want to\n * fire off triggers in time sensitive applications (for example cell creation)\n * as its slow.\n *  @param {object} settings dataTables settings object\n *  @param {string} callbackArr Name of the array storage for the callbacks in\n *      oSettings\n *  @param {string} eventName Name of the jQuery custom event to trigger. If\n *      null no trigger is fired\n *  @param {array} args Array of arguments to pass to the callback function /\n *      trigger\n *  @param {boolean} [bubbles] True if the event should bubble\n *  @memberof DataTable#oApi\n */ function _fnCallbackFire(settings, callbackArr, eventName, args, bubbles) {\n    var ret = [];\n    if (callbackArr) {\n        ret = settings[callbackArr].slice().reverse().map(function(val) {\n            return val.apply(settings.oInstance, args);\n        });\n    }\n    if (eventName !== null) {\n        var e = $.Event(eventName + \".dt\");\n        var table = $(settings.nTable);\n        // Expose the DataTables API on the event object for easy access\n        e.dt = settings.api;\n        table[bubbles ? \"trigger\" : \"triggerHandler\"](e, args);\n        // If not yet attached to the document, trigger the event\n        // on the body directly to sort of simulate the bubble\n        if (bubbles && table.parents(\"body\").length === 0) {\n            $(\"body\").trigger(e, args);\n        }\n        ret.push(e.result);\n    }\n    return ret;\n}\nfunction _fnLengthOverflow(settings) {\n    var start = settings._iDisplayStart, end = settings.fnDisplayEnd(), len = settings._iDisplayLength;\n    /* If we have space to show extra rows (backing up from the end point - then do so */ if (start >= end) {\n        start = end - len;\n    }\n    // Keep the start record on the current page\n    start -= start % len;\n    if (len === -1 || start < 0) {\n        start = 0;\n    }\n    settings._iDisplayStart = start;\n}\nfunction _fnRenderer(settings, type) {\n    var renderer = settings.renderer;\n    var host = DataTable.ext.renderer[type];\n    if ($.isPlainObject(renderer) && renderer[type]) {\n        // Specific renderer for this type. If available use it, otherwise use\n        // the default.\n        return host[renderer[type]] || host._;\n    } else if (typeof renderer === \"string\") {\n        // Common renderer - if there is one available for this type use it,\n        // otherwise use the default\n        return host[renderer] || host._;\n    }\n    // Use the default\n    return host._;\n}\n/**\n * Detect the data source being used for the table. Used to simplify the code\n * a little (ajax) and to make it compress a little smaller.\n *\n *  @param {object} settings dataTables settings object\n *  @returns {string} Data source\n *  @memberof DataTable#oApi\n */ function _fnDataSource(settings) {\n    if (settings.oFeatures.bServerSide) {\n        return \"ssp\";\n    } else if (settings.ajax) {\n        return \"ajax\";\n    }\n    return \"dom\";\n}\n/**\n * Common replacement for language strings\n *\n * @param {*} settings DT settings object\n * @param {*} str String with values to replace\n * @param {*} entries Plural number for _ENTRIES_ - can be undefined\n * @returns String\n */ function _fnMacros(settings, str, entries) {\n    // When infinite scrolling, we are always starting at 1. _iDisplayStart is\n    // used only internally\n    var formatter = settings.fnFormatNumber, start = settings._iDisplayStart + 1, len = settings._iDisplayLength, vis = settings.fnRecordsDisplay(), max = settings.fnRecordsTotal(), all = len === -1;\n    return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, max)).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len))).replace(/_ENTRIES_/g, settings.api.i18n(\"entries\", \"\", entries)).replace(/_ENTRIES-MAX_/g, settings.api.i18n(\"entries\", \"\", max)).replace(/_ENTRIES-TOTAL_/g, settings.api.i18n(\"entries\", \"\", vis));\n}\n/**\n * Add elements to an array as quickly as possible, but stack stafe.\n *\n * @param {*} arr Array to add the data to\n * @param {*} data Data array that is to be added\n * @returns \n */ function _fnArrayApply(arr, data) {\n    if (!data) {\n        return;\n    }\n    // Chrome can throw a max stack error if apply is called with\n    // too large an array, but apply is faster.\n    if (data.length < 10000) {\n        arr.push.apply(arr, data);\n    } else {\n        for(i = 0; i < data.length; i++){\n            arr.push(data[i]);\n        }\n    }\n}\n/**\n * Add one or more listeners to the table\n *\n * @param {*} that JQ for the table\n * @param {*} name Event name\n * @param {*} src Listener(s)\n */ function _fnListener(that, name, src) {\n    if (!Array.isArray(src)) {\n        src = [\n            src\n        ];\n    }\n    for(i = 0; i < src.length; i++){\n        that.on(name + \".dt\", src[i]);\n    }\n}\n/**\n * Computed structure of the DataTables API, defined by the options passed to\n * `DataTable.Api.register()` when building the API.\n *\n * The structure is built in order to speed creation and extension of the Api\n * objects since the extensions are effectively pre-parsed.\n *\n * The array is an array of objects with the following structure, where this\n * base array represents the Api prototype base:\n *\n *     [\n *       {\n *         name:      'data'                -- string   - Property name\n *         val:       function () {},       -- function - Api method (or undefined if just an object\n *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n *       },\n *       {\n *         name:     'row'\n *         val:       {},\n *         methodExt: [ ... ],\n *         propExt:   [\n *           {\n *             name:      'data'\n *             val:       function () {},\n *             methodExt: [ ... ],\n *             propExt:   [ ... ]\n *           },\n *           ...\n *         ]\n *       }\n *     ]\n *\n * @type {Array}\n * @ignore\n */ var __apiStruct = [];\n/**\n * `Array.prototype` reference.\n *\n * @type object\n * @ignore\n */ var __arrayProto = Array.prototype;\n/**\n * Abstraction for `context` parameter of the `Api` constructor to allow it to\n * take several different forms for ease of use.\n *\n * Each of the input parameter types will be converted to a DataTables settings\n * object where possible.\n *\n * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n *   of:\n *\n *   * `string` - jQuery selector. Any DataTables' matching the given selector\n *     with be found and used.\n *   * `node` - `TABLE` node which has already been formed into a DataTable.\n *   * `jQuery` - A jQuery object of `TABLE` nodes.\n *   * `object` - DataTables settings object\n *   * `DataTables.Api` - API instance\n * @return {array|null} Matching DataTables settings objects. `null` or\n *   `undefined` is returned if no matching DataTable is found.\n * @ignore\n */ var _toSettings = function(mixed) {\n    var idx, jq;\n    var settings = DataTable.settings;\n    var tables = _pluck(settings, \"nTable\");\n    if (!mixed) {\n        return [];\n    } else if (mixed.nTable && mixed.oFeatures) {\n        // DataTables settings object\n        return [\n            mixed\n        ];\n    } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === \"table\") {\n        // Table node\n        idx = tables.indexOf(mixed);\n        return idx !== -1 ? [\n            settings[idx]\n        ] : null;\n    } else if (mixed && typeof mixed.settings === \"function\") {\n        return mixed.settings().toArray();\n    } else if (typeof mixed === \"string\") {\n        // jQuery selector\n        jq = $(mixed).get();\n    } else if (mixed instanceof $) {\n        // jQuery object (also DataTables instance)\n        jq = mixed.get();\n    }\n    if (jq) {\n        return settings.filter(function(v, idx) {\n            return jq.includes(tables[idx]);\n        });\n    }\n};\n/**\n * DataTables API class - used to control and interface with  one or more\n * DataTables enhanced tables.\n *\n * The API class is heavily based on jQuery, presenting a chainable interface\n * that you can use to interact with tables. Each instance of the API class has\n * a \"context\" - i.e. the tables that it will operate on. This could be a single\n * table, all tables on a page or a sub-set thereof.\n *\n * Additionally the API is designed to allow you to easily work with the data in\n * the tables, retrieving and manipulating it as required. This is done by\n * presenting the API class as an array like interface. The contents of the\n * array depend upon the actions requested by each method (for example\n * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n * return an array of objects or arrays depending upon your table's\n * configuration). The API object has a number of array like methods (`push`,\n * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n * `unique` etc) to assist your working with the data held in a table.\n *\n * Most methods (those which return an Api instance) are chainable, which means\n * the return from a method call also has all of the methods available that the\n * top level object had. For example, these two calls are equivalent:\n *\n *     // Not chained\n *     api.row.add( {...} );\n *     api.draw();\n *\n *     // Chained\n *     api.row.add( {...} ).draw();\n *\n * @class DataTable.Api\n * @param {array|object|string|jQuery} context DataTable identifier. This is\n *   used to define which DataTables enhanced tables this API will operate on.\n *   Can be one of:\n *\n *   * `string` - jQuery selector. Any DataTables' matching the given selector\n *     with be found and used.\n *   * `node` - `TABLE` node which has already been formed into a DataTable.\n *   * `jQuery` - A jQuery object of `TABLE` nodes.\n *   * `object` - DataTables settings object\n * @param {array} [data] Data to initialise the Api instance with.\n *\n * @example\n *   // Direct initialisation during DataTables construction\n *   var api = $('#example').DataTable();\n *\n * @example\n *   // Initialisation using a DataTables jQuery object\n *   var api = $('#example').dataTable().api();\n *\n * @example\n *   // Initialisation as a constructor\n *   var api = new DataTable.Api( 'table.dataTable' );\n */ _Api = function(context, data) {\n    if (!(this instanceof _Api)) {\n        return new _Api(context, data);\n    }\n    var i;\n    var settings = [];\n    var ctxSettings = function(o) {\n        var a = _toSettings(o);\n        if (a) {\n            settings.push.apply(settings, a);\n        }\n    };\n    if (Array.isArray(context)) {\n        for(i = 0; i < context.length; i++){\n            ctxSettings(context[i]);\n        }\n    } else {\n        ctxSettings(context);\n    }\n    // Remove duplicates\n    this.context = settings.length > 1 ? _unique(settings) : settings;\n    // Initial data\n    _fnArrayApply(this, data);\n    // selector\n    this.selector = {\n        rows: null,\n        cols: null,\n        opts: null\n    };\n    _Api.extend(this, this, __apiStruct);\n};\nDataTable.Api = _Api;\n// Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n// isPlainObject.\n$.extend(_Api.prototype, {\n    any: function() {\n        return this.count() !== 0;\n    },\n    context: [],\n    count: function() {\n        return this.flatten().length;\n    },\n    each: function(fn) {\n        for(var i = 0, ien = this.length; i < ien; i++){\n            fn.call(this, this[i], i, this);\n        }\n        return this;\n    },\n    eq: function(idx) {\n        var ctx = this.context;\n        return ctx.length > idx ? new _Api(ctx[idx], this[idx]) : null;\n    },\n    filter: function(fn) {\n        var a = __arrayProto.filter.call(this, fn, this);\n        return new _Api(this.context, a);\n    },\n    flatten: function() {\n        var a = [];\n        return new _Api(this.context, a.concat.apply(a, this.toArray()));\n    },\n    get: function(idx) {\n        return this[idx];\n    },\n    join: __arrayProto.join,\n    includes: function(find) {\n        return this.indexOf(find) === -1 ? false : true;\n    },\n    indexOf: __arrayProto.indexOf,\n    iterator: function(flatten, type, fn, alwaysNew) {\n        var a = [], ret, i, ien, j, jen, context = this.context, rows, items, item, selector = this.selector;\n        // Argument shifting\n        if (typeof flatten === \"string\") {\n            alwaysNew = fn;\n            fn = type;\n            type = flatten;\n            flatten = false;\n        }\n        for(i = 0, ien = context.length; i < ien; i++){\n            var apiInst = new _Api(context[i]);\n            if (type === \"table\") {\n                ret = fn.call(apiInst, context[i], i);\n                if (ret !== undefined) {\n                    a.push(ret);\n                }\n            } else if (type === \"columns\" || type === \"rows\") {\n                // this has same length as context - one entry for each table\n                ret = fn.call(apiInst, context[i], this[i], i);\n                if (ret !== undefined) {\n                    a.push(ret);\n                }\n            } else if (type === \"every\" || type === \"column\" || type === \"column-rows\" || type === \"row\" || type === \"cell\") {\n                // columns and rows share the same structure.\n                // 'this' is an array of column indexes for each context\n                items = this[i];\n                if (type === \"column-rows\") {\n                    rows = _selector_row_indexes(context[i], selector.opts);\n                }\n                for(j = 0, jen = items.length; j < jen; j++){\n                    item = items[j];\n                    if (type === \"cell\") {\n                        ret = fn.call(apiInst, context[i], item.row, item.column, i, j);\n                    } else {\n                        ret = fn.call(apiInst, context[i], item, i, j, rows);\n                    }\n                    if (ret !== undefined) {\n                        a.push(ret);\n                    }\n                }\n            }\n        }\n        if (a.length || alwaysNew) {\n            var api = new _Api(context, flatten ? a.concat.apply([], a) : a);\n            var apiSelector = api.selector;\n            apiSelector.rows = selector.rows;\n            apiSelector.cols = selector.cols;\n            apiSelector.opts = selector.opts;\n            return api;\n        }\n        return this;\n    },\n    lastIndexOf: __arrayProto.lastIndexOf,\n    length: 0,\n    map: function(fn) {\n        var a = __arrayProto.map.call(this, fn, this);\n        return new _Api(this.context, a);\n    },\n    pluck: function(prop) {\n        var fn = DataTable.util.get(prop);\n        return this.map(function(el) {\n            return fn(el);\n        });\n    },\n    pop: __arrayProto.pop,\n    push: __arrayProto.push,\n    reduce: __arrayProto.reduce,\n    reduceRight: __arrayProto.reduceRight,\n    reverse: __arrayProto.reverse,\n    // Object with rows, columns and opts\n    selector: null,\n    shift: __arrayProto.shift,\n    slice: function() {\n        return new _Api(this.context, this);\n    },\n    sort: __arrayProto.sort,\n    splice: __arrayProto.splice,\n    toArray: function() {\n        return __arrayProto.slice.call(this);\n    },\n    to$: function() {\n        return $(this);\n    },\n    toJQuery: function() {\n        return $(this);\n    },\n    unique: function() {\n        return new _Api(this.context, _unique(this.toArray()));\n    },\n    unshift: __arrayProto.unshift\n});\nfunction _api_scope(scope, fn, struc) {\n    return function() {\n        var ret = fn.apply(scope || this, arguments);\n        // Method extension\n        _Api.extend(ret, ret, struc.methodExt);\n        return ret;\n    };\n}\nfunction _api_find(src, name) {\n    for(var i = 0, ien = src.length; i < ien; i++){\n        if (src[i].name === name) {\n            return src[i];\n        }\n    }\n    return null;\n}\nwindow.__apiStruct = __apiStruct;\n_Api.extend = function(scope, obj, ext) {\n    // Only extend API instances and static properties of the API\n    if (!ext.length || !obj || !(obj instanceof _Api) && !obj.__dt_wrapper) {\n        return;\n    }\n    var i, ien, struct;\n    for(i = 0, ien = ext.length; i < ien; i++){\n        struct = ext[i];\n        if (struct.name === \"__proto__\") {\n            continue;\n        }\n        // Value\n        obj[struct.name] = struct.type === \"function\" ? _api_scope(scope, struct.val, struct) : struct.type === \"object\" ? {} : struct.val;\n        obj[struct.name].__dt_wrapper = true;\n        // Property extension\n        _Api.extend(scope, obj[struct.name], struct.propExt);\n    }\n};\n//     [\n//       {\n//         name:      'data'                -- string   - Property name\n//         val:       function () {},       -- function - Api method (or undefined if just an object\n//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n//       },\n//       {\n//         name:     'row'\n//         val:       {},\n//         methodExt: [ ... ],\n//         propExt:   [\n//           {\n//             name:      'data'\n//             val:       function () {},\n//             methodExt: [ ... ],\n//             propExt:   [ ... ]\n//           },\n//           ...\n//         ]\n//       }\n//     ]\n_Api.register = _api_register = function(name, val) {\n    if (Array.isArray(name)) {\n        for(var j = 0, jen = name.length; j < jen; j++){\n            _Api.register(name[j], val);\n        }\n        return;\n    }\n    var i, ien, heir = name.split(\".\"), struct = __apiStruct, key, method;\n    for(i = 0, ien = heir.length; i < ien; i++){\n        method = heir[i].indexOf(\"()\") !== -1;\n        key = method ? heir[i].replace(\"()\", \"\") : heir[i];\n        var src = _api_find(struct, key);\n        if (!src) {\n            src = {\n                name: key,\n                val: {},\n                methodExt: [],\n                propExt: [],\n                type: \"object\"\n            };\n            struct.push(src);\n        }\n        if (i === ien - 1) {\n            src.val = val;\n            src.type = typeof val === \"function\" ? \"function\" : $.isPlainObject(val) ? \"object\" : \"other\";\n        } else {\n            struct = method ? src.methodExt : src.propExt;\n        }\n    }\n};\n_Api.registerPlural = _api_registerPlural = function(pluralName, singularName, val) {\n    _Api.register(pluralName, val);\n    _Api.register(singularName, function() {\n        var ret = val.apply(this, arguments);\n        if (ret === this) {\n            // Returned item is the API instance that was passed in, return it\n            return this;\n        } else if (ret instanceof _Api) {\n            // New API instance returned, want the value from the first item\n            // in the returned array for the singular result.\n            return ret.length ? Array.isArray(ret[0]) ? new _Api(ret.context, ret[0]) : ret[0] : undefined;\n        }\n        // Non-API return - just fire it back\n        return ret;\n    });\n};\n/**\n * Selector for HTML tables. Apply the given selector to the give array of\n * DataTables settings objects.\n *\n * @param {string|integer} [selector] jQuery selector string or integer\n * @param  {array} Array of DataTables settings objects to be filtered\n * @return {array}\n * @ignore\n */ var __table_selector = function(selector, a) {\n    if (Array.isArray(selector)) {\n        var result = [];\n        selector.forEach(function(sel) {\n            var inner = __table_selector(sel, a);\n            _fnArrayApply(result, inner);\n        });\n        return result.filter(function(item) {\n            return item;\n        });\n    }\n    // Integer is used to pick out a table by index\n    if (typeof selector === \"number\") {\n        return [\n            a[selector]\n        ];\n    }\n    // Perform a jQuery selector on the table nodes\n    var nodes = a.map(function(el) {\n        return el.nTable;\n    });\n    return $(nodes).filter(selector).map(function() {\n        // Need to translate back from the table node to the settings\n        var idx = nodes.indexOf(this);\n        return a[idx];\n    }).toArray();\n};\n/**\n * Context selector for the API's context (i.e. the tables the API instance\n * refers to.\n *\n * @name    DataTable.Api#tables\n * @param {string|integer} [selector] Selector to pick which tables the iterator\n *   should operate on. If not given, all tables in the current context are\n *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n *   select multiple tables or as an integer to select a single table.\n * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n */ _api_register(\"tables()\", function(selector) {\n    // A new instance is created if there was a selector specified\n    return selector !== undefined && selector !== null ? new _Api(__table_selector(selector, this.context)) : this;\n});\n_api_register(\"table()\", function(selector) {\n    var tables = this.tables(selector);\n    var ctx = tables.context;\n    // Truncate to the first matched table\n    return ctx.length ? new _Api(ctx[0]) : tables;\n});\n// Common methods, combined to reduce size\n[\n    [\n        \"nodes\",\n        \"node\",\n        \"nTable\"\n    ],\n    [\n        \"body\",\n        \"body\",\n        \"nTBody\"\n    ],\n    [\n        \"header\",\n        \"header\",\n        \"nTHead\"\n    ],\n    [\n        \"footer\",\n        \"footer\",\n        \"nTFoot\"\n    ]\n].forEach(function(item) {\n    _api_registerPlural(\"tables().\" + item[0] + \"()\", \"table().\" + item[1] + \"()\", function() {\n        return this.iterator(\"table\", function(ctx) {\n            return ctx[item[2]];\n        }, 1);\n    });\n});\n// Structure methods\n[\n    [\n        \"header\",\n        \"aoHeader\"\n    ],\n    [\n        \"footer\",\n        \"aoFooter\"\n    ]\n].forEach(function(item) {\n    _api_register(\"table().\" + item[0] + \".structure()\", function(selector) {\n        var indexes = this.columns(selector).indexes().flatten().toArray();\n        var ctx = this.context[0];\n        var structure = _fnHeaderLayout(ctx, ctx[item[1]], indexes);\n        // The structure is in column index order - but from this method we want the return to be\n        // in the columns() selector API order. In order to do that we need to map from one form\n        // to the other\n        var orderedIndexes = indexes.slice().sort(function(a, b) {\n            return a - b;\n        });\n        return structure.map(function(row) {\n            return indexes.map(function(colIdx) {\n                return row[orderedIndexes.indexOf(colIdx)];\n            });\n        });\n    });\n});\n_api_registerPlural(\"tables().containers()\", \"table().container()\", function() {\n    return this.iterator(\"table\", function(ctx) {\n        return ctx.nTableWrapper;\n    }, 1);\n});\n_api_register(\"tables().every()\", function(fn) {\n    var that = this;\n    return this.iterator(\"table\", function(s, i) {\n        fn.call(that.table(i), i);\n    });\n});\n_api_register(\"caption()\", function(value, side) {\n    var context = this.context;\n    // Getter - return existing node's content\n    if (value === undefined) {\n        var caption = context[0].captionNode;\n        return caption && context.length ? caption.innerHTML : null;\n    }\n    return this.iterator(\"table\", function(ctx) {\n        var table = $(ctx.nTable);\n        var caption = $(ctx.captionNode);\n        var container = $(ctx.nTableWrapper);\n        // Create the node if it doesn't exist yet\n        if (!caption.length) {\n            caption = $(\"<caption/>\").html(value);\n            ctx.captionNode = caption[0];\n            // If side isn't set, we need to insert into the document to let the\n            // CSS decide so we can read it back, otherwise there is no way to\n            // know if the CSS would put it top or bottom for scrolling\n            if (!side) {\n                table.prepend(caption);\n                side = caption.css(\"caption-side\");\n            }\n        }\n        caption.html(value);\n        if (side) {\n            caption.css(\"caption-side\", side);\n            caption[0]._captionSide = side;\n        }\n        if (container.find(\"div.dataTables_scroll\").length) {\n            var selector = side === \"top\" ? \"Head\" : \"Foot\";\n            container.find(\"div.dataTables_scroll\" + selector + \" table\").prepend(caption);\n        } else {\n            table.prepend(caption);\n        }\n    }, 1);\n});\n_api_register(\"caption.node()\", function() {\n    var ctx = this.context;\n    return ctx.length ? ctx[0].captionNode : null;\n});\n/**\n * Redraw the tables in the current context.\n */ _api_register(\"draw()\", function(paging) {\n    return this.iterator(\"table\", function(settings) {\n        if (paging === \"page\") {\n            _fnDraw(settings);\n        } else {\n            if (typeof paging === \"string\") {\n                paging = paging === \"full-hold\" ? false : true;\n            }\n            _fnReDraw(settings, paging === false);\n        }\n    });\n});\n/**\n * Get the current page index.\n *\n * @return {integer} Current page index (zero based)\n */ /**\n * Set the current page.\n *\n * Note that if you attempt to show a page which does not exist, DataTables will\n * not throw an error, but rather reset the paging.\n *\n * @param {integer|string} action The paging action to take. This can be one of:\n *  * `integer` - The page index to jump to\n *  * `string` - An action to take:\n *    * `first` - Jump to first page.\n *    * `next` - Jump to the next page\n *    * `previous` - Jump to previous page\n *    * `last` - Jump to the last page.\n * @returns {DataTables.Api} this\n */ _api_register(\"page()\", function(action) {\n    if (action === undefined) {\n        return this.page.info().page; // not an expensive call\n    }\n    // else, have an action to take on all tables\n    return this.iterator(\"table\", function(settings) {\n        _fnPageChange(settings, action);\n    });\n});\n/**\n * Paging information for the first table in the current context.\n *\n * If you require paging information for another table, use the `table()` method\n * with a suitable selector.\n *\n * @return {object} Object with the following properties set:\n *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n *  * `pages` - Total number of pages\n *  * `start` - Display index for the first record shown on the current page\n *  * `end` - Display index for the last record shown on the current page\n *  * `length` - Display length (number of records). Note that generally `start\n *    + length = end`, but this is not always true, for example if there are\n *    only 2 records to show on the final page, with a length of 10.\n *  * `recordsTotal` - Full data set length\n *  * `recordsDisplay` - Data set length once the current filtering criterion\n *    are applied.\n */ _api_register(\"page.info()\", function() {\n    if (this.context.length === 0) {\n        return undefined;\n    }\n    var settings = this.context[0], start = settings._iDisplayStart, len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1, visRecords = settings.fnRecordsDisplay(), all = len === -1;\n    return {\n        \"page\": all ? 0 : Math.floor(start / len),\n        \"pages\": all ? 1 : Math.ceil(visRecords / len),\n        \"start\": start,\n        \"end\": settings.fnDisplayEnd(),\n        \"length\": len,\n        \"recordsTotal\": settings.fnRecordsTotal(),\n        \"recordsDisplay\": visRecords,\n        \"serverSide\": _fnDataSource(settings) === \"ssp\"\n    };\n});\n/**\n * Get the current page length.\n *\n * @return {integer} Current page length. Note `-1` indicates that all records\n *   are to be shown.\n */ /**\n * Set the current page length.\n *\n * @param {integer} Page length to set. Use `-1` to show all records.\n * @returns {DataTables.Api} this\n */ _api_register(\"page.len()\", function(len) {\n    // Note that we can't call this function 'length()' because `length`\n    // is a Javascript property of functions which defines how many arguments\n    // the function expects.\n    if (len === undefined) {\n        return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined;\n    }\n    // else, set the page length\n    return this.iterator(\"table\", function(settings) {\n        _fnLengthChange(settings, len);\n    });\n});\nvar __reload = function(settings, holdPosition, callback) {\n    // Use the draw event to trigger a callback\n    if (callback) {\n        var api = new _Api(settings);\n        api.one(\"draw\", function() {\n            callback(api.ajax.json());\n        });\n    }\n    if (_fnDataSource(settings) == \"ssp\") {\n        _fnReDraw(settings, holdPosition);\n    } else {\n        _fnProcessingDisplay(settings, true);\n        // Cancel an existing request\n        var xhr = settings.jqXHR;\n        if (xhr && xhr.readyState !== 4) {\n            xhr.abort();\n        }\n        // Trigger xhr\n        _fnBuildAjax(settings, {}, function(json) {\n            _fnClearTable(settings);\n            var data = _fnAjaxDataSrc(settings, json);\n            for(var i = 0, ien = data.length; i < ien; i++){\n                _fnAddData(settings, data[i]);\n            }\n            _fnReDraw(settings, holdPosition);\n            _fnInitComplete(settings);\n            _fnProcessingDisplay(settings, false);\n        });\n    }\n};\n/**\n * Get the JSON response from the last Ajax request that DataTables made to the\n * server. Note that this returns the JSON from the first table in the current\n * context.\n *\n * @return {object} JSON received from the server.\n */ _api_register(\"ajax.json()\", function() {\n    var ctx = this.context;\n    if (ctx.length > 0) {\n        return ctx[0].json;\n    }\n// else return undefined;\n});\n/**\n * Get the data submitted in the last Ajax request\n */ _api_register(\"ajax.params()\", function() {\n    var ctx = this.context;\n    if (ctx.length > 0) {\n        return ctx[0].oAjaxData;\n    }\n// else return undefined;\n});\n/**\n * Reload tables from the Ajax data source. Note that this function will\n * automatically re-draw the table when the remote data has been loaded.\n *\n * @param {boolean} [reset=true] Reset (default) or hold the current paging\n *   position. A full re-sort and re-filter is performed when this method is\n *   called, which is why the pagination reset is the default action.\n * @returns {DataTables.Api} this\n */ _api_register(\"ajax.reload()\", function(callback, resetPaging) {\n    return this.iterator(\"table\", function(settings) {\n        __reload(settings, resetPaging === false, callback);\n    });\n});\n/**\n * Get the current Ajax URL. Note that this returns the URL from the first\n * table in the current context.\n *\n * @return {string} Current Ajax source URL\n */ /**\n * Set the Ajax URL. Note that this will set the URL for all tables in the\n * current context.\n *\n * @param {string} url URL to set.\n * @returns {DataTables.Api} this\n */ _api_register(\"ajax.url()\", function(url) {\n    var ctx = this.context;\n    if (url === undefined) {\n        // get\n        if (ctx.length === 0) {\n            return undefined;\n        }\n        ctx = ctx[0];\n        return $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax;\n    }\n    // set\n    return this.iterator(\"table\", function(settings) {\n        if ($.isPlainObject(settings.ajax)) {\n            settings.ajax.url = url;\n        } else {\n            settings.ajax = url;\n        }\n    });\n});\n/**\n * Load data from the newly set Ajax URL. Note that this method is only\n * available when `ajax.url()` is used to set a URL. Additionally, this method\n * has the same effect as calling `ajax.reload()` but is provided for\n * convenience when setting a new URL. Like `ajax.reload()` it will\n * automatically redraw the table once the remote data has been loaded.\n *\n * @returns {DataTables.Api} this\n */ _api_register(\"ajax.url().load()\", function(callback, resetPaging) {\n    // Same as a reload, but makes sense to present it for easy access after a\n    // url change\n    return this.iterator(\"table\", function(ctx) {\n        __reload(ctx, resetPaging === false, callback);\n    });\n});\nvar _selector_run = function(type, selector, selectFn, settings, opts) {\n    var out = [], res, i, ien, selectorType = typeof selector;\n    // Can't just check for isArray here, as an API or jQuery instance might be\n    // given with their array like look\n    if (!selector || selectorType === \"string\" || selectorType === \"function\" || selector.length === undefined) {\n        selector = [\n            selector\n        ];\n    }\n    for(i = 0, ien = selector.length; i < ien; i++){\n        res = selectFn(typeof selector[i] === \"string\" ? selector[i].trim() : selector[i]);\n        // Remove empty items\n        res = res.filter(function(item) {\n            return item !== null && item !== undefined;\n        });\n        if (res && res.length) {\n            out = out.concat(res);\n        }\n    }\n    // selector extensions\n    var ext = _ext.selector[type];\n    if (ext.length) {\n        for(i = 0, ien = ext.length; i < ien; i++){\n            out = ext[i](settings, opts, out);\n        }\n    }\n    return _unique(out);\n};\nvar _selector_opts = function(opts) {\n    if (!opts) {\n        opts = {};\n    }\n    // Backwards compatibility for 1.9- which used the terminology filter rather\n    // than search\n    if (opts.filter && opts.search === undefined) {\n        opts.search = opts.filter;\n    }\n    return $.extend({\n        columnOrder: \"implied\",\n        search: \"none\",\n        order: \"current\",\n        page: \"all\"\n    }, opts);\n};\n// Reduce the API instance to the first item found\nvar _selector_first = function(old) {\n    var inst = new _Api(old.context[0]);\n    // Use a push rather than passing to the constructor, since it will\n    // merge arrays down automatically, which isn't what is wanted here\n    if (old.length) {\n        inst.push(old[0]);\n    }\n    inst.selector = old.selector;\n    // Limit to a single row / column / cell\n    if (inst.length && inst[0].length > 1) {\n        inst[0].splice(1);\n    }\n    return inst;\n};\nvar _selector_row_indexes = function(settings, opts) {\n    var i, ien, tmp, a = [], displayFiltered = settings.aiDisplay, displayMaster = settings.aiDisplayMaster;\n    var search = opts.search, order = opts.order, page = opts.page; // all, current\n    if (_fnDataSource(settings) == \"ssp\") {\n        // In server-side processing mode, most options are irrelevant since\n        // rows not shown don't exist and the index order is the applied order\n        // Removed is a special case - for consistency just return an empty\n        // array\n        return search === \"removed\" ? [] : _range(0, displayMaster.length);\n    }\n    if (page == \"current\") {\n        // Current page implies that order=current and filter=applied, since it is\n        // fairly senseless otherwise, regardless of what order and search actually\n        // are\n        for(i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++){\n            a.push(displayFiltered[i]);\n        }\n    } else if (order == \"current\" || order == \"applied\") {\n        if (search == \"none\") {\n            a = displayMaster.slice();\n        } else if (search == \"applied\") {\n            a = displayFiltered.slice();\n        } else if (search == \"removed\") {\n            // O(n+m) solution by creating a hash map\n            var displayFilteredMap = {};\n            for(i = 0, ien = displayFiltered.length; i < ien; i++){\n                displayFilteredMap[displayFiltered[i]] = null;\n            }\n            displayMaster.forEach(function(item) {\n                if (!Object.prototype.hasOwnProperty.call(displayFilteredMap, item)) {\n                    a.push(item);\n                }\n            });\n        }\n    } else if (order == \"index\" || order == \"original\") {\n        for(i = 0, ien = settings.aoData.length; i < ien; i++){\n            if (!settings.aoData[i]) {\n                continue;\n            }\n            if (search == \"none\") {\n                a.push(i);\n            } else {\n                tmp = displayFiltered.indexOf(i);\n                if (tmp === -1 && search == \"removed\" || tmp >= 0 && search == \"applied\") {\n                    a.push(i);\n                }\n            }\n        }\n    } else if (typeof order === \"number\") {\n        // Order the rows by the given column\n        var ordered = _fnSort(settings, order, \"asc\");\n        if (search === \"none\") {\n            a = ordered;\n        } else {\n            for(i = 0; i < ordered.length; i++){\n                tmp = displayFiltered.indexOf(ordered[i]);\n                if (tmp === -1 && search == \"removed\" || tmp >= 0 && search == \"applied\") {\n                    a.push(ordered[i]);\n                }\n            }\n        }\n    }\n    return a;\n};\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Rows\n *\n * {}          - no selector - use all available rows\n * {integer}   - row aoData index\n * {node}      - TR node\n * {string}    - jQuery selector to apply to the TR elements\n * {array}     - jQuery array of nodes, or simply an array of TR nodes\n *\n */ var __row_selector = function(settings, selector, opts) {\n    var rows;\n    var run = function(sel) {\n        var selInt = _intVal(sel);\n        var aoData = settings.aoData;\n        // Short cut - selector is a number and no options provided (default is\n        // all records, so no need to check if the index is in there, since it\n        // must be - dev error if the index doesn't exist).\n        if (selInt !== null && !opts) {\n            return [\n                selInt\n            ];\n        }\n        if (!rows) {\n            rows = _selector_row_indexes(settings, opts);\n        }\n        if (selInt !== null && rows.indexOf(selInt) !== -1) {\n            // Selector - integer\n            return [\n                selInt\n            ];\n        } else if (sel === null || sel === undefined || sel === \"\") {\n            // Selector - none\n            return rows;\n        }\n        // Selector - function\n        if (typeof sel === \"function\") {\n            return rows.map(function(idx) {\n                var row = aoData[idx];\n                return sel(idx, row._aData, row.nTr) ? idx : null;\n            });\n        }\n        // Selector - node\n        if (sel.nodeName) {\n            var rowIdx = sel._DT_RowIndex; // Property added by DT for fast lookup\n            var cellIdx = sel._DT_CellIndex;\n            if (rowIdx !== undefined) {\n                // Make sure that the row is actually still present in the table\n                return aoData[rowIdx] && aoData[rowIdx].nTr === sel ? [\n                    rowIdx\n                ] : [];\n            } else if (cellIdx) {\n                return aoData[cellIdx.row] && aoData[cellIdx.row].nTr === sel.parentNode ? [\n                    cellIdx.row\n                ] : [];\n            } else {\n                var host = $(sel).closest(\"*[data-dt-row]\");\n                return host.length ? [\n                    host.data(\"dt-row\")\n                ] : [];\n            }\n        }\n        // ID selector. Want to always be able to select rows by id, regardless\n        // of if the tr element has been created or not, so can't rely upon\n        // jQuery here - hence a custom implementation. This does not match\n        // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n        // but to select it using a CSS selector engine (like Sizzle or\n        // querySelect) it would need to need to be escaped for some characters.\n        // DataTables simplifies this for row selectors since you can select\n        // only a row. A # indicates an id any anything that follows is the id -\n        // unescaped.\n        if (typeof sel === \"string\" && sel.charAt(0) === \"#\") {\n            // get row index from id\n            var rowObj = settings.aIds[sel.replace(/^#/, \"\")];\n            if (rowObj !== undefined) {\n                return [\n                    rowObj.idx\n                ];\n            }\n        // need to fall through to jQuery in case there is DOM id that\n        // matches\n        }\n        // Get nodes in the order from the `rows` array with null values removed\n        var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, \"nTr\"));\n        // Selector - jQuery selector string, array of nodes or jQuery object/\n        // As jQuery's .filter() allows jQuery objects to be passed in filter,\n        // it also allows arrays, so this will cope with all three options\n        return $(nodes).filter(sel).map(function() {\n            return this._DT_RowIndex;\n        }).toArray();\n    };\n    var matched = _selector_run(\"row\", selector, run, settings, opts);\n    if (opts.order === \"current\" || opts.order === \"applied\") {\n        _fnSortDisplay(settings, matched);\n    }\n    return matched;\n};\n_api_register(\"rows()\", function(selector, opts) {\n    // argument shifting\n    if (selector === undefined) {\n        selector = \"\";\n    } else if ($.isPlainObject(selector)) {\n        opts = selector;\n        selector = \"\";\n    }\n    opts = _selector_opts(opts);\n    var inst = this.iterator(\"table\", function(settings) {\n        return __row_selector(settings, selector, opts);\n    }, 1);\n    // Want argument shifting here and in __row_selector?\n    inst.selector.rows = selector;\n    inst.selector.opts = opts;\n    return inst;\n});\n_api_register(\"rows().nodes()\", function() {\n    return this.iterator(\"row\", function(settings, row) {\n        return settings.aoData[row].nTr || undefined;\n    }, 1);\n});\n_api_register(\"rows().data()\", function() {\n    return this.iterator(true, \"rows\", function(settings, rows) {\n        return _pluck_order(settings.aoData, rows, \"_aData\");\n    }, 1);\n});\n_api_registerPlural(\"rows().cache()\", \"row().cache()\", function(type) {\n    return this.iterator(\"row\", function(settings, row) {\n        var r = settings.aoData[row];\n        return type === \"search\" ? r._aFilterData : r._aSortData;\n    }, 1);\n});\n_api_registerPlural(\"rows().invalidate()\", \"row().invalidate()\", function(src) {\n    return this.iterator(\"row\", function(settings, row) {\n        _fnInvalidate(settings, row, src);\n    });\n});\n_api_registerPlural(\"rows().indexes()\", \"row().index()\", function() {\n    return this.iterator(\"row\", function(settings, row) {\n        return row;\n    }, 1);\n});\n_api_registerPlural(\"rows().ids()\", \"row().id()\", function(hash) {\n    var a = [];\n    var context = this.context;\n    // `iterator` will drop undefined values, but in this case we want them\n    for(var i = 0, ien = context.length; i < ien; i++){\n        for(var j = 0, jen = this[i].length; j < jen; j++){\n            var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);\n            a.push((hash === true ? \"#\" : \"\") + id);\n        }\n    }\n    return new _Api(context, a);\n});\n_api_registerPlural(\"rows().remove()\", \"row().remove()\", function() {\n    this.iterator(\"row\", function(settings, row) {\n        var data = settings.aoData;\n        var rowData = data[row];\n        // Delete from the display arrays\n        var idx = settings.aiDisplayMaster.indexOf(row);\n        if (idx !== -1) {\n            settings.aiDisplayMaster.splice(idx, 1);\n        }\n        // For server-side processing tables - subtract the deleted row from the count\n        if (settings._iRecordsDisplay > 0) {\n            settings._iRecordsDisplay--;\n        }\n        // Check for an 'overflow' they case for displaying the table\n        _fnLengthOverflow(settings);\n        // Remove the row's ID reference if there is one\n        var id = settings.rowIdFn(rowData._aData);\n        if (id !== undefined) {\n            delete settings.aIds[id];\n        }\n        data[row] = null;\n    });\n    return this;\n});\n_api_register(\"rows.add()\", function(rows) {\n    var newRows = this.iterator(\"table\", function(settings) {\n        var row, i, ien;\n        var out = [];\n        for(i = 0, ien = rows.length; i < ien; i++){\n            row = rows[i];\n            if (row.nodeName && row.nodeName.toUpperCase() === \"TR\") {\n                out.push(_fnAddTr(settings, row)[0]);\n            } else {\n                out.push(_fnAddData(settings, row));\n            }\n        }\n        return out;\n    }, 1);\n    // Return an Api.rows() extended instance, so rows().nodes() etc can be used\n    var modRows = this.rows(-1);\n    modRows.pop();\n    _fnArrayApply(modRows, newRows);\n    return modRows;\n});\n/**\n *\n */ _api_register(\"row()\", function(selector, opts) {\n    return _selector_first(this.rows(selector, opts));\n});\n_api_register(\"row().data()\", function(data) {\n    var ctx = this.context;\n    if (data === undefined) {\n        // Get\n        return ctx.length && this.length && this[0].length ? ctx[0].aoData[this[0]]._aData : undefined;\n    }\n    // Set\n    var row = ctx[0].aoData[this[0]];\n    row._aData = data;\n    // If the DOM has an id, and the data source is an array\n    if (Array.isArray(data) && row.nTr && row.nTr.id) {\n        _fnSetObjectDataFn(ctx[0].rowId)(data, row.nTr.id);\n    }\n    // Automatically invalidate\n    _fnInvalidate(ctx[0], this[0], \"data\");\n    return this;\n});\n_api_register(\"row().node()\", function() {\n    var ctx = this.context;\n    if (ctx.length && this.length && this[0].length) {\n        var row = ctx[0].aoData[this[0]];\n        if (row && row.nTr) {\n            return row.nTr;\n        }\n    }\n    return null;\n});\n_api_register(\"row.add()\", function(row) {\n    // Allow a jQuery object to be passed in - only a single row is added from\n    // it though - the first element in the set\n    if (row instanceof $ && row.length) {\n        row = row[0];\n    }\n    var rows = this.iterator(\"table\", function(settings) {\n        if (row.nodeName && row.nodeName.toUpperCase() === \"TR\") {\n            return _fnAddTr(settings, row)[0];\n        }\n        return _fnAddData(settings, row);\n    });\n    // Return an Api.rows() extended instance, with the newly added row selected\n    return this.row(rows[0]);\n});\n$(document).on(\"plugin-init.dt\", function(e, context) {\n    var api = new _Api(context);\n    api.on(\"stateSaveParams.DT\", function(e, settings, d) {\n        // This could be more compact with the API, but it is a lot faster as a simple\n        // internal loop\n        var idFn = settings.rowIdFn;\n        var rows = settings.aiDisplayMaster;\n        var ids = [];\n        for(var i = 0; i < rows.length; i++){\n            var rowIdx = rows[i];\n            var data = settings.aoData[rowIdx];\n            if (data._detailsShow) {\n                ids.push(\"#\" + idFn(data._aData));\n            }\n        }\n        d.childRows = ids;\n    });\n    // For future state loads (e.g. with StateRestore)\n    api.on(\"stateLoaded.DT\", function(e, settings, state) {\n        __details_state_load(api, state);\n    });\n    // And the initial load state\n    __details_state_load(api, api.state.loaded());\n});\nvar __details_state_load = function(api, state) {\n    if (state && state.childRows) {\n        api.rows(state.childRows.map(function(id) {\n            // Escape any `:` characters from the row id. Accounts for\n            // already escaped characters.\n            return id.replace(/([^:\\\\]*(?:\\\\.[^:\\\\]*)*):/g, \"$1\\\\:\");\n        })).every(function() {\n            _fnCallbackFire(api.settings()[0], null, \"requestChild\", [\n                this\n            ]);\n        });\n    }\n};\nvar __details_add = function(ctx, row, data, klass) {\n    // Convert to array of TR elements\n    var rows = [];\n    var addRow = function(r, k) {\n        // Recursion to allow for arrays of jQuery objects\n        if (Array.isArray(r) || r instanceof $) {\n            for(var i = 0, ien = r.length; i < ien; i++){\n                addRow(r[i], k);\n            }\n            return;\n        }\n        // If we get a TR element, then just add it directly - up to the dev\n        // to add the correct number of columns etc\n        if (r.nodeName && r.nodeName.toLowerCase() === \"tr\") {\n            r.setAttribute(\"data-dt-row\", row.idx);\n            rows.push(r);\n        } else {\n            // Otherwise create a row with a wrapper\n            var created = $(\"<tr><td></td></tr>\").attr(\"data-dt-row\", row.idx).addClass(k);\n            $(\"td\", created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);\n            rows.push(created[0]);\n        }\n    };\n    addRow(data, klass);\n    if (row._details) {\n        row._details.detach();\n    }\n    row._details = $(rows);\n    // If the children were already shown, that state should be retained\n    if (row._detailsShow) {\n        row._details.insertAfter(row.nTr);\n    }\n};\n// Make state saving of child row details async to allow them to be batch processed\nvar __details_state = DataTable.util.throttle(function(ctx) {\n    _fnSaveState(ctx[0]);\n}, 500);\nvar __details_remove = function(api, idx) {\n    var ctx = api.context;\n    if (ctx.length) {\n        var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];\n        if (row && row._details) {\n            row._details.remove();\n            row._detailsShow = undefined;\n            row._details = undefined;\n            $(row.nTr).removeClass(\"dt-hasChild\");\n            __details_state(ctx);\n        }\n    }\n};\nvar __details_display = function(api, show) {\n    var ctx = api.context;\n    if (ctx.length && api.length) {\n        var row = ctx[0].aoData[api[0]];\n        if (row._details) {\n            row._detailsShow = show;\n            if (show) {\n                row._details.insertAfter(row.nTr);\n                $(row.nTr).addClass(\"dt-hasChild\");\n            } else {\n                row._details.detach();\n                $(row.nTr).removeClass(\"dt-hasChild\");\n            }\n            _fnCallbackFire(ctx[0], null, \"childRow\", [\n                show,\n                api.row(api[0])\n            ]);\n            __details_events(ctx[0]);\n            __details_state(ctx);\n        }\n    }\n};\nvar __details_events = function(settings) {\n    var api = new _Api(settings);\n    var namespace = \".dt.DT_details\";\n    var drawEvent = \"draw\" + namespace;\n    var colvisEvent = \"column-sizing\" + namespace;\n    var destroyEvent = \"destroy\" + namespace;\n    var data = settings.aoData;\n    api.off(drawEvent + \" \" + colvisEvent + \" \" + destroyEvent);\n    if (_pluck(data, \"_details\").length > 0) {\n        // On each draw, insert the required elements into the document\n        api.on(drawEvent, function(e, ctx) {\n            if (settings !== ctx) {\n                return;\n            }\n            api.rows({\n                page: \"current\"\n            }).eq(0).each(function(idx) {\n                // Internal data grab\n                var row = data[idx];\n                if (row._detailsShow) {\n                    row._details.insertAfter(row.nTr);\n                }\n            });\n        });\n        // Column visibility change - update the colspan\n        api.on(colvisEvent, function(e, ctx) {\n            if (settings !== ctx) {\n                return;\n            }\n            // Update the colspan for the details rows (note, only if it already has\n            // a colspan)\n            var row, visible = _fnVisbleColumns(ctx);\n            for(var i = 0, ien = data.length; i < ien; i++){\n                row = data[i];\n                if (row && row._details) {\n                    row._details.each(function() {\n                        var el = $(this).children(\"td\");\n                        if (el.length == 1) {\n                            el.attr(\"colspan\", visible);\n                        }\n                    });\n                }\n            }\n        });\n        // Table destroyed - nuke any child rows\n        api.on(destroyEvent, function(e, ctx) {\n            if (settings !== ctx) {\n                return;\n            }\n            for(var i = 0, ien = data.length; i < ien; i++){\n                if (data[i] && data[i]._details) {\n                    __details_remove(api, i);\n                }\n            }\n        });\n    }\n};\n// Strings for the method names to help minification\nvar _emp = \"\";\nvar _child_obj = _emp + \"row().child\";\nvar _child_mth = _child_obj + \"()\";\n// data can be:\n//  tr\n//  string\n//  jQuery or array of any of the above\n_api_register(_child_mth, function(data, klass) {\n    var ctx = this.context;\n    if (data === undefined) {\n        // get\n        return ctx.length && this.length && ctx[0].aoData[this[0]] ? ctx[0].aoData[this[0]]._details : undefined;\n    } else if (data === true) {\n        // show\n        this.child.show();\n    } else if (data === false) {\n        // remove\n        __details_remove(this);\n    } else if (ctx.length && this.length) {\n        // set\n        __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);\n    }\n    return this;\n});\n_api_register([\n    _child_obj + \".show()\",\n    _child_mth + \".show()\" // only when `child()` was called with parameters (without\n], function() {\n    __details_display(this, true);\n    return this;\n});\n_api_register([\n    _child_obj + \".hide()\",\n    _child_mth + \".hide()\" // only when `child()` was called with parameters (without\n], function() {\n    __details_display(this, false);\n    return this;\n});\n_api_register([\n    _child_obj + \".remove()\",\n    _child_mth + \".remove()\" // only when `child()` was called with parameters (without\n], function() {\n    __details_remove(this);\n    return this;\n});\n_api_register(_child_obj + \".isShown()\", function() {\n    var ctx = this.context;\n    if (ctx.length && this.length && ctx[0].aoData[this[0]]) {\n        // _detailsShown as false or undefined will fall through to return false\n        return ctx[0].aoData[this[0]]._detailsShow || false;\n    }\n    return false;\n});\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Columns\n *\n * {integer}           - column index (>=0 count from left, <0 count from right)\n * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n * \"{string}:name\"     - column name\n * \"{string}\"          - jQuery selector on column header nodes\n *\n */ // can be an array of these items, comma separated list, or an array of comma\n// separated lists\nvar __re_column_selector = /^([^:]+)?:(name|title|visIdx|visible)$/;\n// r1 and r2 are redundant - but it means that the parameters match for the\n// iterator callback in columns().data()\nvar __columnData = function(settings, column, r1, r2, rows, type) {\n    var a = [];\n    for(var row = 0, ien = rows.length; row < ien; row++){\n        a.push(_fnGetCellData(settings, rows[row], column, type));\n    }\n    return a;\n};\nvar __column_header = function(settings, column, row) {\n    var header = settings.aoHeader;\n    var titleRow = settings.titleRow;\n    var target = null;\n    if (row !== undefined) {\n        target = row;\n    } else if (titleRow === true) {\n        target = 0;\n    } else if (titleRow === false) {\n        target = header.length - 1;\n    } else if (titleRow !== null) {\n        target = titleRow;\n    } else {\n        // Automatic - find the _last_ unique cell from the top that is not empty (last for\n        // backwards compatibility)\n        for(var i = 0; i < header.length; i++){\n            if (header[i][column].unique && $(\"span.dt-column-title\", header[i][column].cell).text()) {\n                target = i;\n            }\n        }\n        if (target === null) {\n            target = 0;\n        }\n    }\n    return header[target][column].cell;\n};\nvar __column_header_cells = function(header) {\n    var out = [];\n    for(var i = 0; i < header.length; i++){\n        for(var j = 0; j < header[i].length; j++){\n            var cell = header[i][j].cell;\n            if (!out.includes(cell)) {\n                out.push(cell);\n            }\n        }\n    }\n    return out;\n};\nvar __column_selector = function(settings, selector, opts) {\n    var columns = settings.aoColumns, names, titles, nodes = __column_header_cells(settings.aoHeader);\n    var run = function(s) {\n        var selInt = _intVal(s);\n        // Selector - all\n        if (s === \"\") {\n            return _range(columns.length);\n        }\n        // Selector - index\n        if (selInt !== null) {\n            return [\n                selInt >= 0 ? selInt : columns.length + selInt // Count from right (+ because its a negative value)\n            ];\n        }\n        // Selector = function\n        if (typeof s === \"function\") {\n            var rows = _selector_row_indexes(settings, opts);\n            return columns.map(function(col, idx) {\n                return s(idx, __columnData(settings, idx, 0, 0, rows), __column_header(settings, idx)) ? idx : null;\n            });\n        }\n        // jQuery or string selector\n        var match = typeof s === \"string\" ? s.match(__re_column_selector) : \"\";\n        if (match) {\n            switch(match[2]){\n                case \"visIdx\":\n                case \"visible\":\n                    // Selector is a column index\n                    if (match[1] && match[1].match(/^\\d+$/)) {\n                        var idx = parseInt(match[1], 10);\n                        // Visible index given, convert to column index\n                        if (idx < 0) {\n                            // Counting from the right\n                            var visColumns = columns.map(function(col, i) {\n                                return col.bVisible ? i : null;\n                            });\n                            return [\n                                visColumns[visColumns.length + idx]\n                            ];\n                        }\n                        // Counting from the left\n                        return [\n                            _fnVisibleToColumnIndex(settings, idx)\n                        ];\n                    }\n                    return columns.map(function(col, idx) {\n                        // Not visible, can't match\n                        if (!col.bVisible) {\n                            return null;\n                        }\n                        // Selector\n                        if (match[1]) {\n                            return $(nodes[idx]).filter(match[1]).length > 0 ? idx : null;\n                        }\n                        // `:visible` on its own\n                        return idx;\n                    });\n                case \"name\":\n                    // Don't get names, unless needed, and only get once if it is\n                    if (!names) {\n                        names = _pluck(columns, \"sName\");\n                    }\n                    // match by name. `names` is column index complete and in order\n                    return names.map(function(name, i) {\n                        return name === match[1] ? i : null;\n                    });\n                case \"title\":\n                    if (!titles) {\n                        titles = _pluck(columns, \"sTitle\");\n                    }\n                    // match by column title\n                    return titles.map(function(title, i) {\n                        return title === match[1] ? i : null;\n                    });\n                default:\n                    return [];\n            }\n        }\n        // Cell in the table body\n        if (s.nodeName && s._DT_CellIndex) {\n            return [\n                s._DT_CellIndex.column\n            ];\n        }\n        // jQuery selector on the TH elements for the columns\n        var jqResult = $(nodes).filter(s).map(function() {\n            return _fnColumnsFromHeader(this); // `nodes` is column index complete and in order\n        }).toArray().sort(function(a, b) {\n            return a - b;\n        });\n        if (jqResult.length || !s.nodeName) {\n            return jqResult;\n        }\n        // Otherwise a node which might have a `dt-column` data attribute, or be\n        // a child or such an element\n        var host = $(s).closest(\"*[data-dt-column]\");\n        return host.length ? [\n            host.data(\"dt-column\")\n        ] : [];\n    };\n    var selected = _selector_run(\"column\", selector, run, settings, opts);\n    return opts.columnOrder && opts.columnOrder === \"index\" ? selected.sort(function(a, b) {\n        return a - b;\n    }) : selected; // implied\n};\nvar __setColumnVis = function(settings, column, vis) {\n    var cols = settings.aoColumns, col = cols[column], data = settings.aoData, cells, i, ien, tr;\n    // Get\n    if (vis === undefined) {\n        return col.bVisible;\n    }\n    // Set\n    // No change\n    if (col.bVisible === vis) {\n        return false;\n    }\n    if (vis) {\n        // Insert column\n        // Need to decide if we should use appendChild or insertBefore\n        var insertBefore = _pluck(cols, \"bVisible\").indexOf(true, column + 1);\n        for(i = 0, ien = data.length; i < ien; i++){\n            if (data[i]) {\n                tr = data[i].nTr;\n                cells = data[i].anCells;\n                if (tr) {\n                    // insertBefore can act like appendChild if 2nd arg is null\n                    tr.insertBefore(cells[column], cells[insertBefore] || null);\n                }\n            }\n        }\n    } else {\n        // Remove column\n        $(_pluck(settings.aoData, \"anCells\", column)).detach();\n    }\n    // Common actions\n    col.bVisible = vis;\n    _colGroup(settings);\n    return true;\n};\n_api_register(\"columns()\", function(selector, opts) {\n    // argument shifting\n    if (selector === undefined) {\n        selector = \"\";\n    } else if ($.isPlainObject(selector)) {\n        opts = selector;\n        selector = \"\";\n    }\n    opts = _selector_opts(opts);\n    var inst = this.iterator(\"table\", function(settings) {\n        return __column_selector(settings, selector, opts);\n    }, 1);\n    // Want argument shifting here and in _row_selector?\n    inst.selector.cols = selector;\n    inst.selector.opts = opts;\n    return inst;\n});\n_api_registerPlural(\"columns().header()\", \"column().header()\", function(row) {\n    return this.iterator(\"column\", function(settings, column) {\n        return __column_header(settings, column, row);\n    }, 1);\n});\n_api_registerPlural(\"columns().footer()\", \"column().footer()\", function(row) {\n    return this.iterator(\"column\", function(settings, column) {\n        var footer = settings.aoFooter;\n        if (!footer.length) {\n            return null;\n        }\n        return settings.aoFooter[row !== undefined ? row : 0][column].cell;\n    }, 1);\n});\n_api_registerPlural(\"columns().data()\", \"column().data()\", function() {\n    return this.iterator(\"column-rows\", __columnData, 1);\n});\n_api_registerPlural(\"columns().render()\", \"column().render()\", function(type) {\n    return this.iterator(\"column-rows\", function(settings, column, i, j, rows) {\n        return __columnData(settings, column, i, j, rows, type);\n    }, 1);\n});\n_api_registerPlural(\"columns().dataSrc()\", \"column().dataSrc()\", function() {\n    return this.iterator(\"column\", function(settings, column) {\n        return settings.aoColumns[column].mData;\n    }, 1);\n});\n_api_registerPlural(\"columns().cache()\", \"column().cache()\", function(type) {\n    return this.iterator(\"column-rows\", function(settings, column, i, j, rows) {\n        return _pluck_order(settings.aoData, rows, type === \"search\" ? \"_aFilterData\" : \"_aSortData\", column);\n    }, 1);\n});\n_api_registerPlural(\"columns().init()\", \"column().init()\", function() {\n    return this.iterator(\"column\", function(settings, column) {\n        return settings.aoColumns[column];\n    }, 1);\n});\n_api_registerPlural(\"columns().names()\", \"column().name()\", function() {\n    return this.iterator(\"column\", function(settings, column) {\n        return settings.aoColumns[column].sName;\n    }, 1);\n});\n_api_registerPlural(\"columns().nodes()\", \"column().nodes()\", function() {\n    return this.iterator(\"column-rows\", function(settings, column, i, j, rows) {\n        return _pluck_order(settings.aoData, rows, \"anCells\", column);\n    }, 1);\n});\n_api_registerPlural(\"columns().titles()\", \"column().title()\", function(title, row) {\n    return this.iterator(\"column\", function(settings, column) {\n        // Argument shifting\n        if (typeof title === \"number\") {\n            row = title;\n            title = undefined;\n        }\n        var span = $(\"span.dt-column-title\", this.column(column).header(row));\n        if (title !== undefined) {\n            span.html(title);\n            return this;\n        }\n        return span.html();\n    }, 1);\n});\n_api_registerPlural(\"columns().types()\", \"column().type()\", function() {\n    return this.iterator(\"column\", function(settings, column) {\n        var type = settings.aoColumns[column].sType;\n        // If the type was invalidated, then resolve it. This actually does\n        // all columns at the moment. Would only happen once if getting all\n        // column's data types.\n        if (!type) {\n            _fnColumnTypes(settings);\n        }\n        return type;\n    }, 1);\n});\n_api_registerPlural(\"columns().visible()\", \"column().visible()\", function(vis, calc) {\n    var that = this;\n    var changed = [];\n    var ret = this.iterator(\"column\", function(settings, column) {\n        if (vis === undefined) {\n            return settings.aoColumns[column].bVisible;\n        } // else\n        if (__setColumnVis(settings, column, vis)) {\n            changed.push(column);\n        }\n    });\n    // Group the column visibility changes\n    if (vis !== undefined) {\n        this.iterator(\"table\", function(settings) {\n            // Redraw the header after changes\n            _fnDrawHead(settings, settings.aoHeader);\n            _fnDrawHead(settings, settings.aoFooter);\n            // Update colspan for no records display. Child rows and extensions will use their own\n            // listeners to do this - only need to update the empty table item here\n            if (!settings.aiDisplay.length) {\n                $(settings.nTBody).find(\"td[colspan]\").attr(\"colspan\", _fnVisbleColumns(settings));\n            }\n            _fnSaveState(settings);\n            // Second loop once the first is done for events\n            that.iterator(\"column\", function(settings, column) {\n                if (changed.includes(column)) {\n                    _fnCallbackFire(settings, null, \"column-visibility\", [\n                        settings,\n                        column,\n                        vis,\n                        calc\n                    ]);\n                }\n            });\n            if (changed.length && (calc === undefined || calc)) {\n                that.columns.adjust();\n            }\n        });\n    }\n    return ret;\n});\n_api_registerPlural(\"columns().widths()\", \"column().width()\", function() {\n    // Injects a fake row into the table for just a moment so the widths can\n    // be read, regardless of colspan in the header and rows being present in\n    // the body\n    var columns = this.columns(\":visible\").count();\n    var row = $(\"<tr>\").html(\"<td>\" + Array(columns).join(\"</td><td>\") + \"</td>\");\n    $(this.table().body()).append(row);\n    var widths = row.children().map(function() {\n        return $(this).outerWidth();\n    });\n    row.remove();\n    return this.iterator(\"column\", function(settings, column) {\n        var visIdx = _fnColumnIndexToVisible(settings, column);\n        return visIdx !== null ? widths[visIdx] : 0;\n    }, 1);\n});\n_api_registerPlural(\"columns().indexes()\", \"column().index()\", function(type) {\n    return this.iterator(\"column\", function(settings, column) {\n        return type === \"visible\" ? _fnColumnIndexToVisible(settings, column) : column;\n    }, 1);\n});\n_api_register(\"columns.adjust()\", function() {\n    return this.iterator(\"table\", function(settings) {\n        // Force a column sizing to happen with a manual call - otherwise it can skip\n        // if the size hasn't changed\n        settings.containerWidth = -1;\n        _fnAdjustColumnSizing(settings);\n    }, 1);\n});\n_api_register(\"column.index()\", function(type, idx) {\n    if (this.context.length !== 0) {\n        var ctx = this.context[0];\n        if (type === \"fromVisible\" || type === \"toData\") {\n            return _fnVisibleToColumnIndex(ctx, idx);\n        } else if (type === \"fromData\" || type === \"toVisible\") {\n            return _fnColumnIndexToVisible(ctx, idx);\n        }\n    }\n});\n_api_register(\"column()\", function(selector, opts) {\n    return _selector_first(this.columns(selector, opts));\n});\nvar __cell_selector = function(settings, selector, opts) {\n    var data = settings.aoData;\n    var rows = _selector_row_indexes(settings, opts);\n    var cells = _removeEmpty(_pluck_order(data, rows, \"anCells\"));\n    var allCells = $(_flatten([], cells));\n    var row;\n    var columns = settings.aoColumns.length;\n    var a, i, ien, j, o, host;\n    var run = function(s) {\n        var fnSelector = typeof s === \"function\";\n        if (s === null || s === undefined || fnSelector) {\n            // All cells and function selectors\n            a = [];\n            for(i = 0, ien = rows.length; i < ien; i++){\n                row = rows[i];\n                for(j = 0; j < columns; j++){\n                    o = {\n                        row: row,\n                        column: j\n                    };\n                    if (fnSelector) {\n                        // Selector - function\n                        host = data[row];\n                        if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {\n                            a.push(o);\n                        }\n                    } else {\n                        // Selector - all\n                        a.push(o);\n                    }\n                }\n            }\n            return a;\n        }\n        // Selector - index\n        if ($.isPlainObject(s)) {\n            // Valid cell index and its in the array of selectable rows\n            return s.column !== undefined && s.row !== undefined && rows.indexOf(s.row) !== -1 ? [\n                s\n            ] : [];\n        }\n        // Selector - jQuery filtered cells\n        var jqResult = allCells.filter(s).map(function(i, el) {\n            return {\n                row: el._DT_CellIndex.row,\n                column: el._DT_CellIndex.column\n            };\n        }).toArray();\n        if (jqResult.length || !s.nodeName) {\n            return jqResult;\n        }\n        // Otherwise the selector is a node, and there is one last option - the\n        // element might be a child of an element which has dt-row and dt-column\n        // data attributes\n        host = $(s).closest(\"*[data-dt-row]\");\n        return host.length ? [\n            {\n                row: host.data(\"dt-row\"),\n                column: host.data(\"dt-column\")\n            }\n        ] : [];\n    };\n    return _selector_run(\"cell\", selector, run, settings, opts);\n};\n_api_register(\"cells()\", function(rowSelector, columnSelector, opts) {\n    // Argument shifting\n    if ($.isPlainObject(rowSelector)) {\n        // Indexes\n        if (rowSelector.row === undefined) {\n            // Selector options in first parameter\n            opts = rowSelector;\n            rowSelector = null;\n        } else {\n            // Cell index objects in first parameter\n            opts = columnSelector;\n            columnSelector = null;\n        }\n    }\n    if ($.isPlainObject(columnSelector)) {\n        opts = columnSelector;\n        columnSelector = null;\n    }\n    // Cell selector\n    if (columnSelector === null || columnSelector === undefined) {\n        return this.iterator(\"table\", function(settings) {\n            return __cell_selector(settings, rowSelector, _selector_opts(opts));\n        });\n    }\n    // The default built in options need to apply to row and columns\n    var internalOpts = opts ? {\n        page: opts.page,\n        order: opts.order,\n        search: opts.search\n    } : {};\n    // Row + column selector\n    var columns = this.columns(columnSelector, internalOpts);\n    var rows = this.rows(rowSelector, internalOpts);\n    var i, ien, j, jen;\n    var cellsNoOpts = this.iterator(\"table\", function(settings, idx) {\n        var a = [];\n        for(i = 0, ien = rows[idx].length; i < ien; i++){\n            for(j = 0, jen = columns[idx].length; j < jen; j++){\n                a.push({\n                    row: rows[idx][i],\n                    column: columns[idx][j]\n                });\n            }\n        }\n        return a;\n    }, 1);\n    // There is currently only one extension which uses a cell selector extension\n    // It is a _major_ performance drag to run this if it isn't needed, so this is\n    // an extension specific check at the moment\n    var cells = opts && opts.selected ? this.cells(cellsNoOpts, opts) : cellsNoOpts;\n    $.extend(cells.selector, {\n        cols: columnSelector,\n        rows: rowSelector,\n        opts: opts\n    });\n    return cells;\n});\n_api_registerPlural(\"cells().nodes()\", \"cell().node()\", function() {\n    return this.iterator(\"cell\", function(settings, row, column) {\n        var data = settings.aoData[row];\n        return data && data.anCells ? data.anCells[column] : undefined;\n    }, 1);\n});\n_api_register(\"cells().data()\", function() {\n    return this.iterator(\"cell\", function(settings, row, column) {\n        return _fnGetCellData(settings, row, column);\n    }, 1);\n});\n_api_registerPlural(\"cells().cache()\", \"cell().cache()\", function(type) {\n    type = type === \"search\" ? \"_aFilterData\" : \"_aSortData\";\n    return this.iterator(\"cell\", function(settings, row, column) {\n        return settings.aoData[row][type][column];\n    }, 1);\n});\n_api_registerPlural(\"cells().render()\", \"cell().render()\", function(type) {\n    return this.iterator(\"cell\", function(settings, row, column) {\n        return _fnGetCellData(settings, row, column, type);\n    }, 1);\n});\n_api_registerPlural(\"cells().indexes()\", \"cell().index()\", function() {\n    return this.iterator(\"cell\", function(settings, row, column) {\n        return {\n            row: row,\n            column: column,\n            columnVisible: _fnColumnIndexToVisible(settings, column)\n        };\n    }, 1);\n});\n_api_registerPlural(\"cells().invalidate()\", \"cell().invalidate()\", function(src) {\n    return this.iterator(\"cell\", function(settings, row, column) {\n        _fnInvalidate(settings, row, src, column);\n    });\n});\n_api_register(\"cell()\", function(rowSelector, columnSelector, opts) {\n    return _selector_first(this.cells(rowSelector, columnSelector, opts));\n});\n_api_register(\"cell().data()\", function(data) {\n    var ctx = this.context;\n    var cell = this[0];\n    if (data === undefined) {\n        // Get\n        return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined;\n    }\n    // Set\n    _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);\n    _fnInvalidate(ctx[0], cell[0].row, \"data\", cell[0].column);\n    return this;\n});\n/**\n * Get current ordering (sorting) that has been applied to the table.\n *\n * @returns {array} 2D array containing the sorting information for the first\n *   table in the current context. Each element in the parent array represents\n *   a column being sorted upon (i.e. multi-sorting with two columns would have\n *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n *   the column index that the sorting condition applies to, the second is the\n *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n *   index of the sorting order from the `column.sorting` initialisation array.\n */ /**\n * Set the ordering for the table.\n *\n * @param {integer} order Column index to sort upon.\n * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n * @returns {DataTables.Api} this\n */ /**\n * Set the ordering for the table.\n *\n * @param {array} order 1D array of sorting information to be applied.\n * @param {array} [...] Optional additional sorting conditions\n * @returns {DataTables.Api} this\n */ /**\n * Set the ordering for the table.\n *\n * @param {array} order 2D array of sorting information to be applied.\n * @returns {DataTables.Api} this\n */ _api_register(\"order()\", function(order, dir) {\n    var ctx = this.context;\n    var args = Array.prototype.slice.call(arguments);\n    if (order === undefined) {\n        // get\n        return ctx.length !== 0 ? ctx[0].aaSorting : undefined;\n    }\n    // set\n    if (typeof order === \"number\") {\n        // Simple column / direction passed in\n        order = [\n            [\n                order,\n                dir\n            ]\n        ];\n    } else if (args.length > 1) {\n        // Arguments passed in (list of 1D arrays)\n        order = args;\n    }\n    // otherwise a 2D array was passed in\n    return this.iterator(\"table\", function(settings) {\n        var resolved = [];\n        _fnSortResolve(settings, resolved, order);\n        settings.aaSorting = resolved;\n    });\n});\n/**\n * Attach a sort listener to an element for a given column\n *\n * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n *   listener to. This can take the form of a single DOM node, a jQuery\n *   collection of nodes or a jQuery selector which will identify the node(s).\n * @param {integer} column the column that a click on this node will sort on\n * @param {function} [callback] callback function when sort is run\n * @returns {DataTables.Api} this\n */ _api_register(\"order.listener()\", function(node, column, callback) {\n    return this.iterator(\"table\", function(settings) {\n        _fnSortAttachListener(settings, node, {}, column, callback);\n    });\n});\n_api_register(\"order.fixed()\", function(set) {\n    if (!set) {\n        var ctx = this.context;\n        var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;\n        return Array.isArray(fixed) ? {\n            pre: fixed\n        } : fixed;\n    }\n    return this.iterator(\"table\", function(settings) {\n        settings.aaSortingFixed = $.extend(true, {}, set);\n    });\n});\n// Order by the selected column(s)\n_api_register([\n    \"columns().order()\",\n    \"column().order()\"\n], function(dir) {\n    var that = this;\n    if (!dir) {\n        return this.iterator(\"column\", function(settings, idx) {\n            var sort = _fnSortFlatten(settings);\n            for(var i = 0, ien = sort.length; i < ien; i++){\n                if (sort[i].col === idx) {\n                    return sort[i].dir;\n                }\n            }\n            return null;\n        }, 1);\n    } else {\n        return this.iterator(\"table\", function(settings, i) {\n            settings.aaSorting = that[i].map(function(col) {\n                return [\n                    col,\n                    dir\n                ];\n            });\n        });\n    }\n});\n_api_registerPlural(\"columns().orderable()\", \"column().orderable()\", function(directions) {\n    return this.iterator(\"column\", function(settings, idx) {\n        var col = settings.aoColumns[idx];\n        return directions ? col.asSorting : col.bSortable;\n    }, 1);\n});\n_api_register(\"processing()\", function(show) {\n    return this.iterator(\"table\", function(ctx) {\n        _fnProcessingDisplay(ctx, show);\n    });\n});\n_api_register(\"search()\", function(input, regex, smart, caseInsen) {\n    var ctx = this.context;\n    if (input === undefined) {\n        // get\n        return ctx.length !== 0 ? ctx[0].oPreviousSearch.search : undefined;\n    }\n    // set\n    return this.iterator(\"table\", function(settings) {\n        if (!settings.oFeatures.bFilter) {\n            return;\n        }\n        if (typeof regex === \"object\") {\n            // New style options to pass to the search builder\n            _fnFilterComplete(settings, $.extend(settings.oPreviousSearch, regex, {\n                search: input\n            }));\n        } else {\n            // Compat for the old options\n            _fnFilterComplete(settings, $.extend(settings.oPreviousSearch, {\n                search: input,\n                regex: regex === null ? false : regex,\n                smart: smart === null ? true : smart,\n                caseInsensitive: caseInsen === null ? true : caseInsen\n            }));\n        }\n    });\n});\n_api_register(\"search.fixed()\", function(name, search) {\n    var ret = this.iterator(true, \"table\", function(settings) {\n        var fixed = settings.searchFixed;\n        if (!name) {\n            return Object.keys(fixed);\n        } else if (search === undefined) {\n            return fixed[name];\n        } else if (search === null) {\n            delete fixed[name];\n        } else {\n            fixed[name] = search;\n        }\n        return this;\n    });\n    return name !== undefined && search === undefined ? ret[0] : ret;\n});\n_api_registerPlural(\"columns().search()\", \"column().search()\", function(input, regex, smart, caseInsen) {\n    return this.iterator(\"column\", function(settings, column) {\n        var preSearch = settings.aoPreSearchCols;\n        if (input === undefined) {\n            // get\n            return preSearch[column].search;\n        }\n        // set\n        if (!settings.oFeatures.bFilter) {\n            return;\n        }\n        if (typeof regex === \"object\") {\n            // New style options to pass to the search builder\n            $.extend(preSearch[column], regex, {\n                search: input\n            });\n        } else {\n            // Old style (with not all options available)\n            $.extend(preSearch[column], {\n                search: input,\n                regex: regex === null ? false : regex,\n                smart: smart === null ? true : smart,\n                caseInsensitive: caseInsen === null ? true : caseInsen\n            });\n        }\n        _fnFilterComplete(settings, settings.oPreviousSearch);\n    });\n});\n_api_register([\n    \"columns().search.fixed()\",\n    \"column().search.fixed()\"\n], function(name, search) {\n    var ret = this.iterator(true, \"column\", function(settings, colIdx) {\n        var fixed = settings.aoColumns[colIdx].searchFixed;\n        if (!name) {\n            return Object.keys(fixed);\n        } else if (search === undefined) {\n            return fixed[name] || null;\n        } else if (search === null) {\n            delete fixed[name];\n        } else {\n            fixed[name] = search;\n        }\n        return this;\n    });\n    return name !== undefined && search === undefined ? ret[0] : ret;\n});\n/*\n * State API methods\n */ _api_register(\"state()\", function(set, ignoreTime) {\n    // getter\n    if (!set) {\n        return this.context.length ? this.context[0].oSavedState : null;\n    }\n    var setMutate = $.extend(true, {}, set);\n    // setter\n    return this.iterator(\"table\", function(settings) {\n        if (ignoreTime !== false) {\n            setMutate.time = +new Date() + 100;\n        }\n        _fnImplementState(settings, setMutate, function() {});\n    });\n});\n_api_register(\"state.clear()\", function() {\n    return this.iterator(\"table\", function(settings) {\n        // Save an empty object\n        settings.fnStateSaveCallback.call(settings.oInstance, settings, {});\n    });\n});\n_api_register(\"state.loaded()\", function() {\n    return this.context.length ? this.context[0].oLoadedState : null;\n});\n_api_register(\"state.save()\", function() {\n    return this.iterator(\"table\", function(settings) {\n        _fnSaveState(settings);\n    });\n});\n// Can be assigned in DateTable.use() - note luxon and moment vars are in helpers.js\nvar __bootstrap;\nvar __foundation;\n/**\n * Set the libraries that DataTables uses, or the global objects.\n * Note that the arguments can be either way around (legacy support)\n * and the second is optional. See docs.\n */ DataTable.use = function(arg1, arg2) {\n    // Reverse arguments for legacy support\n    var module = typeof arg1 === \"string\" ? arg2 : arg1;\n    var type = typeof arg2 === \"string\" ? arg2 : arg1;\n    // Getter\n    if (module === undefined && typeof type === \"string\") {\n        switch(type){\n            case \"lib\":\n            case \"jq\":\n                return $;\n            case \"win\":\n                return window;\n            case \"datetime\":\n                return DataTable.DateTime;\n            case \"luxon\":\n                return __luxon;\n            case \"moment\":\n                return __moment;\n            case \"bootstrap\":\n                // Use local if set, otherwise try window, which could be undefined\n                return __bootstrap || window.bootstrap;\n            case \"foundation\":\n                // Ditto\n                return __foundation || window.Foundation;\n            default:\n                return null;\n        }\n    }\n    // Setter\n    if (type === \"lib\" || type === \"jq\" || module && module.fn && module.fn.jquery) {\n        $ = module;\n    } else if (type === \"win\" || module && module.document) {\n        window = module;\n        document = module.document;\n    } else if (type === \"datetime\" || module && module.type === \"DateTime\") {\n        DataTable.DateTime = module;\n    } else if (type === \"luxon\" || module && module.FixedOffsetZone) {\n        __luxon = module;\n    } else if (type === \"moment\" || module && module.isMoment) {\n        __moment = module;\n    } else if (type === \"bootstrap\" || module && module.Modal && module.Modal.NAME === \"modal\") {\n        // This is currently for BS5 only. BS3/4 attach to jQuery, so no need to use `.use()`\n        __bootstrap = module;\n    } else if (type === \"foundation\" || module && module.Reveal) {\n        __foundation = module;\n    }\n};\n/**\n * CommonJS factory function pass through. This will check if the arguments\n * given are a window object or a jQuery object. If so they are set\n * accordingly.\n * @param {*} root Window\n * @param {*} jq jQUery\n * @returns {boolean} Indicator\n */ DataTable.factory = function(root, jq) {\n    var is = false;\n    // Test if the first parameter is a window object\n    if (root && root.document) {\n        window = root;\n        document = root.document;\n    }\n    // Test if the second parameter is a jQuery object\n    if (jq && jq.fn && jq.fn.jquery) {\n        $ = jq;\n        is = true;\n    }\n    return is;\n};\n/**\n * Provide a common method for plug-ins to check the version of DataTables being\n * used, in order to ensure compatibility.\n *\n *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n *  @param {string} [version2=current DataTables version] As above, but optional.\n *   If not given the current DataTables version will be used.\n *  @returns {boolean} true if this version of DataTables is greater or equal to\n *    the required version, or false if this version of DataTales is not\n *    suitable\n *  @static\n *  @dtopt API-Static\n *\n *  @example\n *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n */ DataTable.versionCheck = function(version, version2) {\n    var aThis = version2 ? version2.split(\".\") : DataTable.version.split(\".\");\n    var aThat = version.split(\".\");\n    var iThis, iThat;\n    for(var i = 0, iLen = aThat.length; i < iLen; i++){\n        iThis = parseInt(aThis[i], 10) || 0;\n        iThat = parseInt(aThat[i], 10) || 0;\n        // Parts are the same, keep comparing\n        if (iThis === iThat) {\n            continue;\n        }\n        // Parts are different, return immediately\n        return iThis > iThat;\n    }\n    return true;\n};\n/**\n * Check if a `<table>` node is a DataTable table already or not.\n *\n *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n *      selector for the table to test. Note that if more than more than one\n *      table is passed on, only the first will be checked\n *  @returns {boolean} true the table given is a DataTable, or false otherwise\n *  @static\n *  @dtopt API-Static\n *\n *  @example\n *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n *      $('#example').dataTable();\n *    }\n */ DataTable.isDataTable = function(table) {\n    var t = $(table).get(0);\n    var is = false;\n    if (table instanceof DataTable.Api) {\n        return true;\n    }\n    $.each(DataTable.settings, function(i, o) {\n        var head = o.nScrollHead ? $(\"table\", o.nScrollHead)[0] : null;\n        var foot = o.nScrollFoot ? $(\"table\", o.nScrollFoot)[0] : null;\n        if (o.nTable === t || head === t || foot === t) {\n            is = true;\n        }\n    });\n    return is;\n};\n/**\n * Get all DataTable tables that have been initialised - optionally you can\n * select to get only currently visible tables.\n *\n *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n *    or visible tables only.\n *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n *    DataTables\n *  @static\n *  @dtopt API-Static\n *\n *  @example\n *    $.each( $.fn.dataTable.tables(true), function () {\n *      $(table).DataTable().columns.adjust();\n *    } );\n */ DataTable.tables = function(visible) {\n    var api = false;\n    if ($.isPlainObject(visible)) {\n        api = visible.api;\n        visible = visible.visible;\n    }\n    var a = DataTable.settings.filter(function(o) {\n        return !visible || visible && $(o.nTable).is(\":visible\") ? true : false;\n    }).map(function(o) {\n        return o.nTable;\n    });\n    return api ? new _Api(a) : a;\n};\n/**\n * Convert from camel case parameters to Hungarian notation. This is made public\n * for the extensions to provide the same ability as DataTables core to accept\n * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n * parameters.\n *\n *  @param {object} src The model object which holds all parameters that can be\n *    mapped.\n *  @param {object} user The object to convert from camel case to Hungarian.\n *  @param {boolean} force When set to `true`, properties which already have a\n *    Hungarian value in the `user` object will be overwritten. Otherwise they\n *    won't be.\n */ DataTable.camelToHungarian = _fnCamelToHungarian;\n/**\n *\n */ _api_register(\"$()\", function(selector, opts) {\n    var rows = this.rows(opts).nodes(), jqRows = $(rows);\n    return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));\n});\n// jQuery functions to operate on the tables\n$.each([\n    \"on\",\n    \"one\",\n    \"off\"\n], function(i, key) {\n    _api_register(key + \"()\", function() {\n        var args = Array.prototype.slice.call(arguments);\n        // Add the `dt` namespace automatically if it isn't already present\n        args[0] = args[0].split(/\\s/).map(function(e) {\n            return !e.match(/\\.dt\\b/) ? e + \".dt\" : e;\n        }).join(\" \");\n        var inst = $(this.tables().nodes());\n        inst[key].apply(inst, args);\n        return this;\n    });\n});\n_api_register(\"clear()\", function() {\n    return this.iterator(\"table\", function(settings) {\n        _fnClearTable(settings);\n    });\n});\n_api_register(\"error()\", function(msg) {\n    return this.iterator(\"table\", function(settings) {\n        _fnLog(settings, 0, msg);\n    });\n});\n_api_register(\"settings()\", function() {\n    return new _Api(this.context, this.context);\n});\n_api_register(\"init()\", function() {\n    var ctx = this.context;\n    return ctx.length ? ctx[0].oInit : null;\n});\n_api_register(\"data()\", function() {\n    return this.iterator(\"table\", function(settings) {\n        return _pluck(settings.aoData, \"_aData\");\n    }).flatten();\n});\n_api_register(\"trigger()\", function(name, args, bubbles) {\n    return this.iterator(\"table\", function(settings) {\n        return _fnCallbackFire(settings, null, name, args, bubbles);\n    }).flatten();\n});\n_api_register(\"ready()\", function(fn) {\n    var ctx = this.context;\n    // Get status of first table\n    if (!fn) {\n        return ctx.length ? ctx[0]._bInitComplete || false : null;\n    }\n    // Function to run either once the table becomes ready or\n    // immediately if it is already ready.\n    return this.tables().every(function() {\n        var api = this;\n        if (this.context[0]._bInitComplete) {\n            fn.call(api);\n        } else {\n            this.on(\"init.dt.DT\", function() {\n                fn.call(api);\n            });\n        }\n    });\n});\n_api_register(\"destroy()\", function(remove) {\n    remove = remove || false;\n    return this.iterator(\"table\", function(settings) {\n        var classes = settings.oClasses;\n        var table = settings.nTable;\n        var tbody = settings.nTBody;\n        var thead = settings.nTHead;\n        var tfoot = settings.nTFoot;\n        var jqTable = $(table);\n        var jqTbody = $(tbody);\n        var jqWrapper = $(settings.nTableWrapper);\n        var rows = settings.aoData.map(function(r) {\n            return r ? r.nTr : null;\n        });\n        var orderClasses = classes.order;\n        // Flag to note that the table is currently being destroyed - no action\n        // should be taken\n        settings.bDestroying = true;\n        // Fire off the destroy callbacks for plug-ins etc\n        _fnCallbackFire(settings, \"aoDestroyCallback\", \"destroy\", [\n            settings\n        ], true);\n        // If not being removed from the document, make all columns visible\n        if (!remove) {\n            new _Api(settings).columns().visible(true);\n        }\n        // Container width change listener\n        if (settings.resizeObserver) {\n            settings.resizeObserver.disconnect();\n        }\n        // Blitz all `DT` namespaced events (these are internal events, the\n        // lowercase, `dt` events are user subscribed and they are responsible\n        // for removing them\n        jqWrapper.off(\".DT\").find(\":not(tbody *)\").off(\".DT\");\n        $(window).off(\".DT-\" + settings.sInstance);\n        // When scrolling we had to break the table up - restore it\n        if (table != thead.parentNode) {\n            jqTable.children(\"thead\").detach();\n            jqTable.append(thead);\n        }\n        if (tfoot && table != tfoot.parentNode) {\n            jqTable.children(\"tfoot\").detach();\n            jqTable.append(tfoot);\n        }\n        // Clean up the header / footer\n        cleanHeader(thead, \"header\");\n        cleanHeader(tfoot, \"footer\");\n        settings.colgroup.remove();\n        settings.aaSorting = [];\n        settings.aaSortingFixed = [];\n        _fnSortingClasses(settings);\n        $(jqTable).find(\"th, td\").removeClass($.map(DataTable.ext.type.className, function(v) {\n            return v;\n        }).join(\" \"));\n        $(\"th, td\", thead).removeClass(orderClasses.none + \" \" + orderClasses.canAsc + \" \" + orderClasses.canDesc + \" \" + orderClasses.isAsc + \" \" + orderClasses.isDesc).css(\"width\", \"\").removeAttr(\"aria-sort\");\n        // Add the TR elements back into the table in their original order\n        jqTbody.children().detach();\n        jqTbody.append(rows);\n        var orig = settings.nTableWrapper.parentNode;\n        var insertBefore = settings.nTableWrapper.nextSibling;\n        // Remove the DataTables generated nodes, events and classes\n        var removedMethod = remove ? \"remove\" : \"detach\";\n        jqTable[removedMethod]();\n        jqWrapper[removedMethod]();\n        // If we need to reattach the table to the document\n        if (!remove && orig) {\n            // insertBefore acts like appendChild if !arg[1]\n            orig.insertBefore(table, insertBefore);\n            // Restore the width of the original table - was read from the style property,\n            // so we can restore directly to that\n            jqTable.css(\"width\", settings.sDestroyWidth).removeClass(classes.table);\n        }\n        /* Remove the settings object from the settings array */ var idx = DataTable.settings.indexOf(settings);\n        if (idx !== -1) {\n            DataTable.settings.splice(idx, 1);\n        }\n    });\n});\n// Add the `every()` method for rows, columns and cells in a compact form\n$.each([\n    \"column\",\n    \"row\",\n    \"cell\"\n], function(i, type) {\n    _api_register(type + \"s().every()\", function(fn) {\n        var opts = this.selector.opts;\n        var api = this;\n        var inst;\n        var counter = 0;\n        return this.iterator(\"every\", function(settings, selectedIdx, tableIdx) {\n            inst = api[type](selectedIdx, opts);\n            if (type === \"cell\") {\n                fn.call(inst, inst[0][0].row, inst[0][0].column, tableIdx, counter);\n            } else {\n                fn.call(inst, selectedIdx, tableIdx, counter);\n            }\n            counter++;\n        });\n    });\n});\n// i18n method for extensions to be able to use the language object from the\n// DataTable\n_api_register(\"i18n()\", function(token, def, plural) {\n    var ctx = this.context[0];\n    var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);\n    if (resolved === undefined) {\n        resolved = def;\n    }\n    if ($.isPlainObject(resolved)) {\n        resolved = plural !== undefined && resolved[plural] !== undefined ? resolved[plural] : resolved._;\n    }\n    return typeof resolved === \"string\" ? resolved.replace(\"%d\", plural) // nb: plural might be undefined,\n     : resolved;\n});\n// Needed for header and footer, so pulled into its own function\nfunction cleanHeader(node, className) {\n    $(node).find(\"span.dt-column-order\").remove();\n    $(node).find(\"span.dt-column-title\").each(function() {\n        var title = $(this).html();\n        $(this).parent().parent().append(title);\n        $(this).remove();\n    });\n    $(node).find(\"div.dt-column-\" + className).remove();\n    $(\"th, td\", node).removeAttr(\"data-dt-column\");\n}\n/**\n * Version string for plug-ins to check compatibility. Allowed format is\n * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n * only for non-release builds. See https://semver.org/ for more information.\n *  @member\n *  @type string\n *  @default Version number\n */ DataTable.version = \"2.3.0\";\n/**\n * Private data store, containing all of the settings objects that are\n * created for the tables on a given page.\n *\n * Note that the `DataTable.settings` object is aliased to\n * `jQuery.fn.dataTableExt` through which it may be accessed and\n * manipulated, or `jQuery.fn.dataTable.settings`.\n *  @member\n *  @type array\n *  @default []\n *  @private\n */ DataTable.settings = [];\n/**\n * Object models container, for the various models that DataTables has\n * available to it. These models define the objects that are used to hold\n * the active state and configuration of the table.\n *  @namespace\n */ DataTable.models = {};\n/**\n * Template object for the way in which DataTables holds information about\n * search information for the global filter and individual column filters.\n *  @namespace\n */ DataTable.models.oSearch = {\n    /**\n\t * Flag to indicate if the filtering should be case insensitive or not\n\t */ \"caseInsensitive\": true,\n    /**\n\t * Applied search term\n\t */ \"search\": \"\",\n    /**\n\t * Flag to indicate if the search term should be interpreted as a\n\t * regular expression (true) or not (false) and therefore and special\n\t * regex characters escaped.\n\t */ \"regex\": false,\n    /**\n\t * Flag to indicate if DataTables is to use its smart filtering or not.\n\t */ \"smart\": true,\n    /**\n\t * Flag to indicate if DataTables should only trigger a search when\n\t * the return key is pressed.\n\t */ \"return\": false\n};\n/**\n * Template object for the way in which DataTables holds information about\n * each individual row. This is the object format used for the settings\n * aoData array.\n *  @namespace\n */ DataTable.models.oRow = {\n    /**\n\t * TR element for the row\n\t */ \"nTr\": null,\n    /**\n\t * Array of TD elements for each row. This is null until the row has been\n\t * created.\n\t */ \"anCells\": null,\n    /**\n\t * Data object from the original data source for the row. This is either\n\t * an array if using the traditional form of DataTables, or an object if\n\t * using mData options. The exact type will depend on the passed in\n\t * data from the data source, or will be an array if using DOM a data\n\t * source.\n\t */ \"_aData\": [],\n    /**\n\t * Sorting data cache - this array is ostensibly the same length as the\n\t * number of columns (although each index is generated only as it is\n\t * needed), and holds the data that is used for sorting each column in the\n\t * row. We do this cache generation at the start of the sort in order that\n\t * the formatting of the sort data need be done only once for each cell\n\t * per sort. This array should not be read from or written to by anything\n\t * other than the master sorting methods.\n\t */ \"_aSortData\": null,\n    /**\n\t * Per cell filtering data cache. As per the sort data cache, used to\n\t * increase the performance of the filtering in DataTables\n\t */ \"_aFilterData\": null,\n    /**\n\t * Filtering data cache. This is the same as the cell filtering cache, but\n\t * in this case a string rather than an array. This is easily computed with\n\t * a join on `_aFilterData`, but is provided as a cache so the join isn't\n\t * needed on every search (memory traded for performance)\n\t */ \"_sFilterRow\": null,\n    /**\n\t * Denote if the original data source was from the DOM, or the data source\n\t * object. This is used for invalidating data, so DataTables can\n\t * automatically read data from the original source, unless uninstructed\n\t * otherwise.\n\t */ \"src\": null,\n    /**\n\t * Index in the aoData array. This saves an indexOf lookup when we have the\n\t * object, but want to know the index\n\t */ \"idx\": -1,\n    /**\n\t * Cached display value\n\t */ displayData: null\n};\n/**\n * Template object for the column information object in DataTables. This object\n * is held in the settings aoColumns array and contains all the information that\n * DataTables needs about each individual column.\n *\n * Note that this object is related to {@link DataTable.defaults.column}\n * but this one is the internal data store for DataTables's cache of columns.\n * It should NOT be manipulated outside of DataTables. Any configuration should\n * be done through the initialisation options.\n *  @namespace\n */ DataTable.models.oColumn = {\n    /**\n\t * Column index.\n\t */ \"idx\": null,\n    /**\n\t * A list of the columns that sorting should occur on when this column\n\t * is sorted. That this property is an array allows multi-column sorting\n\t * to be defined for a column (for example first name / last name columns\n\t * would benefit from this). The values are integers pointing to the\n\t * columns to be sorted on (typically it will be a single integer pointing\n\t * at itself, but that doesn't need to be the case).\n\t */ \"aDataSort\": null,\n    /**\n\t * Define the sorting directions that are applied to the column, in sequence\n\t * as the column is repeatedly sorted upon - i.e. the first value is used\n\t * as the sorting direction when the column if first sorted (clicked on).\n\t * Sort it again (click again) and it will move on to the next index.\n\t * Repeat until loop.\n\t */ \"asSorting\": null,\n    /**\n\t * Flag to indicate if the column is searchable, and thus should be included\n\t * in the filtering or not.\n\t */ \"bSearchable\": null,\n    /**\n\t * Flag to indicate if the column is sortable or not.\n\t */ \"bSortable\": null,\n    /**\n\t * Flag to indicate if the column is currently visible in the table or not\n\t */ \"bVisible\": null,\n    /**\n\t * Store for manual type assignment using the `column.type` option. This\n\t * is held in store so we can manipulate the column's `sType` property.\n\t */ \"_sManualType\": null,\n    /**\n\t * Flag to indicate if HTML5 data attributes should be used as the data\n\t * source for filtering or sorting. True is either are.\n\t */ \"_bAttrSrc\": false,\n    /**\n\t * Developer definable function that is called whenever a cell is created (Ajax source,\n\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n\t * allowing you to modify the DOM element (add background colour for example) when the\n\t * element is available.\n\t */ \"fnCreatedCell\": null,\n    /**\n\t * Function to get data from a cell in a column. You should <b>never</b>\n\t * access data directly through _aData internally in DataTables - always use\n\t * the method attached to this property. It allows mData to function as\n\t * required. This function is automatically assigned by the column\n\t * initialisation method\n\t */ \"fnGetData\": null,\n    /**\n\t * Function to set data for a cell in the column. You should <b>never</b>\n\t * set the data directly to _aData internally in DataTables - always use\n\t * this method. It allows mData to function as required. This function\n\t * is automatically assigned by the column initialisation method\n\t */ \"fnSetData\": null,\n    /**\n\t * Property to read the value for the cells in the column from the data\n\t * source array / object. If null, then the default content is used, if a\n\t * function is given then the return from the function is used.\n\t */ \"mData\": null,\n    /**\n\t * Partner property to mData which is used (only when defined) to get\n\t * the data - i.e. it is basically the same as mData, but without the\n\t * 'set' option, and also the data fed to it is the result from mData.\n\t * This is the rendering method to match the data method of mData.\n\t */ \"mRender\": null,\n    /**\n\t * The class to apply to all TD elements in the table's TBODY for the column\n\t */ \"sClass\": null,\n    /**\n\t * When DataTables calculates the column widths to assign to each column,\n\t * it finds the longest string in each column and then constructs a\n\t * temporary table and reads the widths from that. The problem with this\n\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n\t * string - thus the calculation can go wrong (doing it properly and putting\n\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\n\t * a \"work around\" we provide this option. It will append its value to the\n\t * text that is found to be the longest string for the column - i.e. padding.\n\t */ \"sContentPadding\": null,\n    /**\n\t * Allows a default value to be given for a column's data, and will be used\n\t * whenever a null data source is encountered (this can be because mData\n\t * is set to null, or because the data source itself is null).\n\t */ \"sDefaultContent\": null,\n    /**\n\t * Name for the column, allowing reference to the column by name as well as\n\t * by index (needs a lookup to work by name).\n\t */ \"sName\": null,\n    /**\n\t * Custom sorting data type - defines which of the available plug-ins in\n\t * afnSortData the custom sorting will use - if any is defined.\n\t */ \"sSortDataType\": \"std\",\n    /**\n\t * Class to be applied to the header element when sorting on this column\n\t */ \"sSortingClass\": null,\n    /**\n\t * Title of the column - what is seen in the TH element (nTh).\n\t */ \"sTitle\": null,\n    /**\n\t * Column sorting and filtering type\n\t */ \"sType\": null,\n    /**\n\t * Width of the column\n\t */ \"sWidth\": null,\n    /**\n\t * Width of the column when it was first \"encountered\"\n\t */ \"sWidthOrig\": null,\n    /** Cached string which is the longest in the column */ maxLenString: null,\n    /**\n\t * Store for named searches\n\t */ searchFixed: null\n};\n/*\n * Developer note: The properties of the object below are given in Hungarian\n * notation, that was used as the interface for DataTables prior to v1.10, however\n * from v1.10 onwards the primary interface is camel case. In order to avoid\n * breaking backwards compatibility utterly with this change, the Hungarian\n * version is still, internally the primary interface, but is is not documented\n * - hence the @name tags in each doc comment. This allows a Javascript function\n * to create a map from Hungarian notation to camel case (going the other direction\n * would require each property to be listed, which would add around 3K to the size\n * of DataTables, while this method is about a 0.5K hit).\n *\n * Ultimately this does pave the way for Hungarian notation to be dropped\n * completely, but that is a massive amount of work and will break current\n * installs (therefore is on-hold until v2).\n */ /**\n * Initialisation options that can be given to DataTables at initialisation\n * time.\n *  @namespace\n */ DataTable.defaults = {\n    /**\n\t * An array of data to use for the table, passed in at initialisation which\n\t * will be used in preference to any data which is already in the DOM. This is\n\t * particularly useful for constructing tables purely in Javascript, for\n\t * example with a custom Ajax call.\n\t */ \"aaData\": null,\n    /**\n\t * If ordering is enabled, then DataTables will perform a first pass sort on\n\t * initialisation. You can define which column(s) the sort is performed\n\t * upon, and the sorting direction, with this variable. The `sorting` array\n\t * should contain an array for each column to be sorted initially containing\n\t * the column's index and a direction string ('asc' or 'desc').\n\t */ \"aaSorting\": [\n        [\n            0,\n            \"asc\"\n        ]\n    ],\n    /**\n\t * This parameter is basically identical to the `sorting` parameter, but\n\t * cannot be overridden by user interaction with the table. What this means\n\t * is that you could have a column (visible or hidden) which the sorting\n\t * will always be forced on first - any sorting after that (from the user)\n\t * will then be performed as required. This can be useful for grouping rows\n\t * together.\n\t */ \"aaSortingFixed\": [],\n    /**\n\t * DataTables can be instructed to load data to display in the table from a\n\t * Ajax source. This option defines how that Ajax call is made and where to.\n\t *\n\t * The `ajax` property has three different modes of operation, depending on\n\t * how it is defined. These are:\n\t *\n\t * * `string` - Set the URL from where the data should be loaded from.\n\t * * `object` - Define properties for `jQuery.ajax`.\n\t * * `function` - Custom data get function\n\t *\n\t * `string`\n\t * --------\n\t *\n\t * As a string, the `ajax` property simply defines the URL from which\n\t * DataTables will load data.\n\t *\n\t * `object`\n\t * --------\n\t *\n\t * As an object, the parameters in the object are passed to\n\t * [jQuery.ajax](https://api.jquery.com/jQuery.ajax/) allowing fine control\n\t * of the Ajax request. DataTables has a number of default parameters which\n\t * you can override using this option. Please refer to the jQuery\n\t * documentation for a full description of the options available, although\n\t * the following parameters provide additional options in DataTables or\n\t * require special consideration:\n\t *\n\t * * `data` - As with jQuery, `data` can be provided as an object, but it\n\t *   can also be used as a function to manipulate the data DataTables sends\n\t *   to the server. The function takes a single parameter, an object of\n\t *   parameters with the values that DataTables has readied for sending. An\n\t *   object may be returned which will be merged into the DataTables\n\t *   defaults, or you can add the items to the object that was passed in and\n\t *   not return anything from the function. This supersedes `fnServerParams`\n\t *   from DataTables 1.9-.\n\t *\n\t * * `dataSrc` - By default DataTables will look for the property `data` (or\n\t *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n\t *   from an Ajax source or for server-side processing - this parameter\n\t *   allows that property to be changed. You can use Javascript dotted\n\t *   object notation to get a data source for multiple levels of nesting, or\n\t *   it my be used as a function. As a function it takes a single parameter,\n\t *   the JSON returned from the server, which can be manipulated as\n\t *   required, with the returned value being that used by DataTables as the\n\t *   data source for the table.\n\t *\n\t * * `success` - Should not be overridden it is used internally in\n\t *   DataTables. To manipulate / transform the data returned by the server\n\t *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n\t *\n\t * `function`\n\t * ----------\n\t *\n\t * As a function, making the Ajax call is left up to yourself allowing\n\t * complete control of the Ajax request. Indeed, if desired, a method other\n\t * than Ajax could be used to obtain the required data, such as Web storage\n\t * or an AIR database.\n\t *\n\t * The function is given four parameters and no return is required. The\n\t * parameters are:\n\t *\n\t * 1. _object_ - Data to send to the server\n\t * 2. _function_ - Callback function that must be executed when the required\n\t *    data has been obtained. That data should be passed into the callback\n\t *    as the only parameter\n\t * 3. _object_ - DataTables settings object for the table\n\t */ \"ajax\": null,\n    /**\n\t * This parameter allows you to readily specify the entries in the length drop\n\t * down menu that DataTables shows when pagination is enabled. It can be\n\t * either a 1D array of options which will be used for both the displayed\n\t * option and the value, or a 2D array which will use the array in the first\n\t * position as the value, and the array in the second position as the\n\t * displayed options (useful for language strings such as 'All').\n\t *\n\t * Note that the `pageLength` property will be automatically set to the\n\t * first value given in this array, unless `pageLength` is also provided.\n\t */ \"aLengthMenu\": [\n        10,\n        25,\n        50,\n        100\n    ],\n    /**\n\t * The `columns` option in the initialisation parameter allows you to define\n\t * details about the way individual columns behave. For a full list of\n\t * column options that can be set, please see\n\t * {@link DataTable.defaults.column}. Note that if you use `columns` to\n\t * define your columns, you must have an entry in the array for every single\n\t * column that you have in your table (these can be null if you don't which\n\t * to specify any options).\n\t */ \"aoColumns\": null,\n    /**\n\t * Very similar to `columns`, `columnDefs` allows you to target a specific\n\t * column, multiple columns, or all columns, using the `targets` property of\n\t * each object in the array. This allows great flexibility when creating\n\t * tables, as the `columnDefs` arrays can be of any length, targeting the\n\t * columns you specifically want. `columnDefs` may use any of the column\n\t * options available: {@link DataTable.defaults.column}, but it _must_\n\t * have `targets` defined in each object in the array. Values in the `targets`\n\t * array may be:\n\t *   <ul>\n\t *     <li>a string - class name will be matched on the TH for the column</li>\n\t *     <li>0 or a positive integer - column index counting from the left</li>\n\t *     <li>a negative integer - column index counting from the right</li>\n\t *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n\t *   </ul>\n\t */ \"aoColumnDefs\": null,\n    /**\n\t * Basically the same as `search`, this parameter defines the individual column\n\t * filtering state at initialisation time. The array must be of the same size\n\t * as the number of columns, and each element be an object with the parameters\n\t * `search` and `escapeRegex` (the latter is optional). 'null' is also\n\t * accepted and the default will be used.\n\t */ \"aoSearchCols\": [],\n    /**\n\t * Enable or disable automatic column width calculation. This can be disabled\n\t * as an optimisation (it takes some time to calculate the widths) if the\n\t * tables widths are passed in using `columns`.\n\t */ \"bAutoWidth\": true,\n    /**\n\t * Deferred rendering can provide DataTables with a huge speed boost when you\n\t * are using an Ajax or JS data source for the table. This option, when set to\n\t * true, will cause DataTables to defer the creation of the table elements for\n\t * each row until they are needed for a draw - saving a significant amount of\n\t * time.\n\t */ \"bDeferRender\": true,\n    /**\n\t * Replace a DataTable which matches the given selector and replace it with\n\t * one which has the properties of the new initialisation object passed. If no\n\t * table matches the selector, then the new DataTable will be constructed as\n\t * per normal.\n\t */ \"bDestroy\": false,\n    /**\n\t * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n\t * that it allows the end user to input multiple words (space separated) and\n\t * will match a row containing those words, even if not in the order that was\n\t * specified (this allow matching across multiple columns). Note that if you\n\t * wish to use filtering in DataTables this must remain 'true' - to remove the\n\t * default filtering input box and retain filtering abilities, please use\n\t * {@link DataTable.defaults.dom}.\n\t */ \"bFilter\": true,\n    /**\n\t * Used only for compatiblity with DT1\n\t * @deprecated\n\t */ \"bInfo\": true,\n    /**\n\t * Used only for compatiblity with DT1\n\t * @deprecated\n\t */ \"bLengthChange\": true,\n    /**\n\t * Enable or disable pagination.\n\t */ \"bPaginate\": true,\n    /**\n\t * Enable or disable the display of a 'processing' indicator when the table is\n\t * being processed (e.g. a sort). This is particularly useful for tables with\n\t * large amounts of data where it can take a noticeable amount of time to sort\n\t * the entries.\n\t */ \"bProcessing\": false,\n    /**\n\t * Retrieve the DataTables object for the given selector. Note that if the\n\t * table has already been initialised, this parameter will cause DataTables\n\t * to simply return the object that has already been set up - it will not take\n\t * account of any changes you might have made to the initialisation object\n\t * passed to DataTables (setting this parameter to true is an acknowledgement\n\t * that you understand this). `destroy` can be used to reinitialise a table if\n\t * you need.\n\t */ \"bRetrieve\": false,\n    /**\n\t * When vertical (y) scrolling is enabled, DataTables will force the height of\n\t * the table's viewport to the given height at all times (useful for layout).\n\t * However, this can look odd when filtering data down to a small data set,\n\t * and the footer is left \"floating\" further down. This parameter (when\n\t * enabled) will cause DataTables to collapse the table's viewport down when\n\t * the result set will fit within the given Y height.\n\t */ \"bScrollCollapse\": false,\n    /**\n\t * Configure DataTables to use server-side processing. Note that the\n\t * `ajax` parameter must also be given in order to give DataTables a\n\t * source to obtain the required data for each draw.\n\t */ \"bServerSide\": false,\n    /**\n\t * Enable or disable sorting of columns. Sorting of individual columns can be\n\t * disabled by the `sortable` option for each column.\n\t */ \"bSort\": true,\n    /**\n\t * Enable or display DataTables' ability to sort multiple columns at the\n\t * same time (activated by shift-click by the user).\n\t */ \"bSortMulti\": true,\n    /**\n\t * Allows control over whether DataTables should use the top (true) unique\n\t * cell that is found for a single column, or the bottom (false - default).\n\t * This is useful when using complex headers.\n\t */ \"bSortCellsTop\": null,\n    /** Specify which row is the title row in the header. Replacement for bSortCellsTop */ titleRow: null,\n    /**\n\t * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n\t * `sorting\\_3` to the columns which are currently being sorted on. This is\n\t * presented as a feature switch as it can increase processing time (while\n\t * classes are removed and added) so for large data sets you might want to\n\t * turn this off.\n\t */ \"bSortClasses\": true,\n    /**\n\t * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n\t * used to save table display information such as pagination information,\n\t * display length, filtering and sorting. As such when the end user reloads\n\t * the page the display display will match what thy had previously set up.\n\t */ \"bStateSave\": false,\n    /**\n\t * This function is called when a TR element is created (and all TD child\n\t * elements have been inserted), or registered if using a DOM source, allowing\n\t * manipulation of the TR element (adding classes etc).\n\t */ \"fnCreatedRow\": null,\n    /**\n\t * This function is called on every 'draw' event, and allows you to\n\t * dynamically modify any aspect you want about the created DOM.\n\t */ \"fnDrawCallback\": null,\n    /**\n\t * Identical to fnHeaderCallback() but for the table footer this function\n\t * allows you to modify the table footer on every 'draw' event.\n\t */ \"fnFooterCallback\": null,\n    /**\n\t * When rendering large numbers in the information element for the table\n\t * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n\t * to have a comma separator for the 'thousands' units (e.g. 1 million is\n\t * rendered as \"1,000,000\") to help readability for the end user. This\n\t * function will override the default method DataTables uses.\n\t */ \"fnFormatNumber\": function(toFormat) {\n        return toFormat.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.oLanguage.sThousands);\n    },\n    /**\n\t * This function is called on every 'draw' event, and allows you to\n\t * dynamically modify the header row. This can be used to calculate and\n\t * display useful information about the table.\n\t */ \"fnHeaderCallback\": null,\n    /**\n\t * The information element can be used to convey information about the current\n\t * state of the table. Although the internationalisation options presented by\n\t * DataTables are quite capable of dealing with most customisations, there may\n\t * be times where you wish to customise the string further. This callback\n\t * allows you to do exactly that.\n\t */ \"fnInfoCallback\": null,\n    /**\n\t * Called when the table has been initialised. Normally DataTables will\n\t * initialise sequentially and there will be no need for this function,\n\t * however, this does not hold true when using external language information\n\t * since that is obtained using an async XHR call.\n\t */ \"fnInitComplete\": null,\n    /**\n\t * Called at the very start of each table draw and can be used to cancel the\n\t * draw by returning false, any other return (including undefined) results in\n\t * the full draw occurring).\n\t */ \"fnPreDrawCallback\": null,\n    /**\n\t * This function allows you to 'post process' each row after it have been\n\t * generated for each table draw, but before it is rendered on screen. This\n\t * function might be used for setting the row class name etc.\n\t */ \"fnRowCallback\": null,\n    /**\n\t * Load the table state. With this function you can define from where, and how, the\n\t * state of a table is loaded. By default DataTables will load from `localStorage`\n\t * but you might wish to use a server-side database or cookies.\n\t */ \"fnStateLoadCallback\": function(settings) {\n        try {\n            return JSON.parse((settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\"DataTables_\" + settings.sInstance + \"_\" + location.pathname));\n        } catch (e) {\n            return {};\n        }\n    },\n    /**\n\t * Callback which allows modification of the saved state prior to loading that state.\n\t * This callback is called when the table is loading state from the stored data, but\n\t * prior to the settings object being modified by the saved state. Note that for\n\t * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n\t * a plug-in.\n\t */ \"fnStateLoadParams\": null,\n    /**\n\t * Callback that is called when the state has been loaded from the state saving method\n\t * and the DataTables settings object has been modified as a result of the loaded state.\n\t */ \"fnStateLoaded\": null,\n    /**\n\t * Save the table state. This function allows you to define where and how the state\n\t * information for the table is stored By default DataTables will use `localStorage`\n\t * but you might wish to use a server-side database or cookies.\n\t */ \"fnStateSaveCallback\": function(settings, data) {\n        try {\n            (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\"DataTables_\" + settings.sInstance + \"_\" + location.pathname, JSON.stringify(data));\n        } catch (e) {\n        // noop\n        }\n    },\n    /**\n\t * Callback which allows modification of the state to be saved. Called when the table\n\t * has changed state a new state save is required. This method allows modification of\n\t * the state saving object prior to actually doing the save, including addition or\n\t * other state properties or modification. Note that for plug-in authors, you should\n\t * use the `stateSaveParams` event to save parameters for a plug-in.\n\t */ \"fnStateSaveParams\": null,\n    /**\n\t * Duration for which the saved state information is considered valid. After this period\n\t * has elapsed the state will be returned to the default.\n\t * Value is given in seconds.\n\t */ \"iStateDuration\": 7200,\n    /**\n\t * Number of rows to display on a single page when using pagination. If\n\t * feature enabled (`lengthChange`) then the end user will be able to override\n\t * this to a custom setting using a pop-up menu.\n\t */ \"iDisplayLength\": 10,\n    /**\n\t * Define the starting point for data display when using DataTables with\n\t * pagination. Note that this parameter is the number of records, rather than\n\t * the page number, so if you have 10 records per page and want to start on\n\t * the third page, it should be \"20\".\n\t */ \"iDisplayStart\": 0,\n    /**\n\t * By default DataTables allows keyboard navigation of the table (sorting, paging,\n\t * and filtering) by adding a `tabindex` attribute to the required elements. This\n\t * allows you to tab through the controls and press the enter key to activate them.\n\t * The tabindex is default 0, meaning that the tab follows the flow of the document.\n\t * You can overrule this using this parameter if you wish. Use a value of -1 to\n\t * disable built-in keyboard navigation.\n\t */ \"iTabIndex\": 0,\n    /**\n\t * Classes that DataTables assigns to the various components and features\n\t * that it adds to the HTML table. This allows classes to be configured\n\t * during initialisation in addition to through the static\n\t * {@link DataTable.ext.oStdClasses} object).\n\t */ \"oClasses\": {},\n    /**\n\t * All strings that DataTables uses in the user interface that it creates\n\t * are defined in this object, allowing you to modified them individually or\n\t * completely replace them all as required.\n\t */ \"oLanguage\": {\n        /**\n\t\t * Strings that are used for WAI-ARIA labels and controls only (these are not\n\t\t * actually visible on the page, but will be read by screenreaders, and thus\n\t\t * must be internationalised as well).\n\t\t */ \"oAria\": {\n            /**\n\t\t\t * ARIA label that is added to the table headers when the column may be sorted\n\t\t\t */ \"orderable\": \": Activate to sort\",\n            /**\n\t\t\t * ARIA label that is added to the table headers when the column is currently being sorted\n\t\t\t */ \"orderableReverse\": \": Activate to invert sorting\",\n            /**\n\t\t\t * ARIA label that is added to the table headers when the column is currently being \n\t\t\t * sorted and next step is to remove sorting\n\t\t\t */ \"orderableRemove\": \": Activate to remove sorting\",\n            paginate: {\n                first: \"First\",\n                last: \"Last\",\n                next: \"Next\",\n                previous: \"Previous\",\n                number: \"\"\n            }\n        },\n        /**\n\t\t * Pagination string used by DataTables for the built-in pagination\n\t\t * control types.\n\t\t */ \"oPaginate\": {\n            /**\n\t\t\t * Label and character for first page button (Â«)\n\t\t\t */ \"sFirst\": \"\\xab\",\n            /**\n\t\t\t * Last page button (Â»)\n\t\t\t */ \"sLast\": \"\\xbb\",\n            /**\n\t\t\t * Next page button (âº)\n\t\t\t */ \"sNext\": \"âº\",\n            /**\n\t\t\t * Previous page button (â¹)\n\t\t\t */ \"sPrevious\": \"â¹\"\n        },\n        /**\n\t\t * Plural object for the data type the table is showing\n\t\t */ entries: {\n            _: \"entries\",\n            1: \"entry\"\n        },\n        /**\n\t\t * Page length options\n\t\t */ lengthLabels: {\n            \"-1\": \"All\"\n        },\n        /**\n\t\t * This string is shown in preference to `zeroRecords` when the table is\n\t\t * empty of data (regardless of filtering). Note that this is an optional\n\t\t * parameter - if it is not given, the value of `zeroRecords` will be used\n\t\t * instead (either the default or given value).\n\t\t */ \"sEmptyTable\": \"No data available in table\",\n        /**\n\t\t * This string gives information to the end user about the information\n\t\t * that is current on display on the page. The following tokens can be\n\t\t * used in the string and will be dynamically replaced as the table\n\t\t * display updates. This tokens can be placed anywhere in the string, or\n\t\t * removed as needed by the language requires:\n\t\t *\n\t\t * * `\\_START\\_` - Display index of the first record on the current page\n\t\t * * `\\_END\\_` - Display index of the last record on the current page\n\t\t * * `\\_TOTAL\\_` - Number of records in the table after filtering\n\t\t * * `\\_MAX\\_` - Number of records in the table without filtering\n\t\t * * `\\_PAGE\\_` - Current page number\n\t\t * * `\\_PAGES\\_` - Total number of pages of data in the table\n\t\t */ \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ _ENTRIES-TOTAL_\",\n        /**\n\t\t * Display information string for when the table is empty. Typically the\n\t\t * format of this string should match `info`.\n\t\t */ \"sInfoEmpty\": \"Showing 0 to 0 of 0 _ENTRIES-TOTAL_\",\n        /**\n\t\t * When a user filters the information in a table, this string is appended\n\t\t * to the information (`info`) to give an idea of how strong the filtering\n\t\t * is. The variable _MAX_ is dynamically updated.\n\t\t */ \"sInfoFiltered\": \"(filtered from _MAX_ total _ENTRIES-MAX_)\",\n        /**\n\t\t * If can be useful to append extra information to the info string at times,\n\t\t * and this variable does exactly that. This information will be appended to\n\t\t * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n\t\t * being used) at all times.\n\t\t */ \"sInfoPostFix\": \"\",\n        /**\n\t\t * This decimal place operator is a little different from the other\n\t\t * language options since DataTables doesn't output floating point\n\t\t * numbers, so it won't ever use this for display of a number. Rather,\n\t\t * what this parameter does is modify the sort methods of the table so\n\t\t * that numbers which are in a format which has a character other than\n\t\t * a period (`.`) as a decimal place will be sorted numerically.\n\t\t *\n\t\t * Note that numbers with different decimal places cannot be shown in\n\t\t * the same table and still be sortable, the table must be consistent.\n\t\t * However, multiple different tables on the page can use different\n\t\t * decimal place characters.\n\t\t */ \"sDecimal\": \"\",\n        /**\n\t\t * DataTables has a build in number formatter (`formatNumber`) which is\n\t\t * used to format large numbers that are used in the table information.\n\t\t * By default a comma is used, but this can be trivially changed to any\n\t\t * character you wish with this parameter.\n\t\t */ \"sThousands\": \",\",\n        /**\n\t\t * Detail the action that will be taken when the drop down menu for the\n\t\t * pagination length option is changed. The '_MENU_' variable is replaced\n\t\t * with a default select list of 10, 25, 50 and 100, and can be replaced\n\t\t * with a custom select box if required.\n\t\t */ \"sLengthMenu\": \"_MENU_ _ENTRIES_ per page\",\n        /**\n\t\t * When using Ajax sourced data and during the first draw when DataTables is\n\t\t * gathering the data, this message is shown in an empty row in the table to\n\t\t * indicate to the end user the the data is being loaded. Note that this\n\t\t * parameter is not used when loading data by server-side processing, just\n\t\t * Ajax sourced data with client-side processing.\n\t\t */ \"sLoadingRecords\": \"Loading...\",\n        /**\n\t\t * Text which is displayed when the table is processing a user action\n\t\t * (usually a sort command or similar).\n\t\t */ \"sProcessing\": \"\",\n        /**\n\t\t * Details the actions that will be taken when the user types into the\n\t\t * filtering input text box. The variable \"_INPUT_\", if used in the string,\n\t\t * is replaced with the HTML text box for the filtering input allowing\n\t\t * control over where it appears in the string. If \"_INPUT_\" is not given\n\t\t * then the input box is appended to the string automatically.\n\t\t */ \"sSearch\": \"Search:\",\n        /**\n\t\t * Assign a `placeholder` attribute to the search `input` element\n\t\t *  @type string\n\t\t *  @default \n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.searchPlaceholder\n\t\t */ \"sSearchPlaceholder\": \"\",\n        /**\n\t\t * All of the language information can be stored in a file on the\n\t\t * server-side, which DataTables will look up if this parameter is passed.\n\t\t * It must store the URL of the language file, which is in a JSON format,\n\t\t * and the object has the same properties as the oLanguage object in the\n\t\t * initialiser object (i.e. the above parameters). Please refer to one of\n\t\t * the example language files to see how this works in action.\n\t\t */ \"sUrl\": \"\",\n        /**\n\t\t * Text shown inside the table records when the is no information to be\n\t\t * displayed after filtering. `emptyTable` is shown when there is simply no\n\t\t * information in the table at all (regardless of filtering).\n\t\t */ \"sZeroRecords\": \"No matching records found\"\n    },\n    /** The initial data order is reversed when `desc` ordering */ orderDescReverse: true,\n    /**\n\t * This parameter allows you to have define the global filtering state at\n\t * initialisation time. As an object the `search` parameter must be\n\t * defined, but all other parameters are optional. When `regex` is true,\n\t * the search string will be treated as a regular expression, when false\n\t * (default) it will be treated as a straight string. When `smart`\n\t * DataTables will use it's smart filtering methods (to word match at\n\t * any point in the data), when false this will not be done.\n\t */ \"oSearch\": $.extend({}, DataTable.models.oSearch),\n    /**\n\t * Table and control layout. This replaces the legacy `dom` option.\n\t */ layout: {\n        topStart: \"pageLength\",\n        topEnd: \"search\",\n        bottomStart: \"info\",\n        bottomEnd: \"paging\"\n    },\n    /**\n\t * Legacy DOM layout option\n\t */ \"sDom\": null,\n    /**\n\t * Search delay option. This will throttle full table searches that use the\n\t * DataTables provided search input element (it does not effect calls to\n\t * `dt-api search()`, providing a delay before the search is made.\n\t */ \"searchDelay\": null,\n    /**\n\t * DataTables features six different built-in options for the buttons to\n\t * display for pagination control:\n\t *\n\t * * `numbers` - Page number buttons only\n\t * * `simple` - 'Previous' and 'Next' buttons only\n\t * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n\t * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n\t * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n\t * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n\t */ \"sPaginationType\": \"\",\n    /**\n\t * Enable horizontal scrolling. When a table is too wide to fit into a\n\t * certain layout, or you have a large number of columns in the table, you\n\t * can enable x-scrolling to show the table in a viewport, which can be\n\t * scrolled. This property can be `true` which will allow the table to\n\t * scroll horizontally when needed, or any CSS unit, or a number (in which\n\t * case it will be treated as a pixel measurement). Setting as simply `true`\n\t * is recommended.\n\t */ \"sScrollX\": \"\",\n    /**\n\t * This property can be used to force a DataTable to use more width than it\n\t * might otherwise do when x-scrolling is enabled. For example if you have a\n\t * table which requires to be well spaced, this parameter is useful for\n\t * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n\t * any CSS unit, or a number (in which case it will be treated as a pixel\n\t * measurement).\n\t */ \"sScrollXInner\": \"\",\n    /**\n\t * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n\t * to the given height, and enable scrolling for any data which overflows the\n\t * current viewport. This can be used as an alternative to paging to display\n\t * a lot of data in a small area (although paging and scrolling can both be\n\t * enabled at the same time). This property can be any CSS unit, or a number\n\t * (in which case it will be treated as a pixel measurement).\n\t */ \"sScrollY\": \"\",\n    /**\n\t * __Deprecated__ The functionality provided by this parameter has now been\n\t * superseded by that provided through `ajax`, which should be used instead.\n\t *\n\t * Set the HTTP method that is used to make the Ajax call for server-side\n\t * processing or Ajax sourced data.\n\t */ \"sServerMethod\": \"GET\",\n    /**\n\t * DataTables makes use of renderers when displaying HTML elements for\n\t * a table. These renderers can be added or modified by plug-ins to\n\t * generate suitable mark-up for a site. For example the Bootstrap\n\t * integration plug-in for DataTables uses a paging button renderer to\n\t * display pagination buttons in the mark-up required by Bootstrap.\n\t *\n\t * For further information about the renderers available see\n\t * DataTable.ext.renderer\n\t */ \"renderer\": null,\n    /**\n\t * Set the data property name that DataTables should use to get a row's id\n\t * to set as the `id` property in the node.\n\t */ \"rowId\": \"DT_RowId\",\n    /**\n\t * Caption value\n\t */ \"caption\": null,\n    /**\n\t * For server-side processing - use the data from the DOM for the first draw\n\t */ iDeferLoading: null,\n    /** Event listeners */ on: null\n};\n_fnHungarianMap(DataTable.defaults);\n/*\n * Developer note - See note in model.defaults.js about the use of Hungarian\n * notation and camel case.\n */ /**\n * Column options that can be given to DataTables at initialisation time.\n *  @namespace\n */ DataTable.defaults.column = {\n    /**\n\t * Define which column(s) an order will occur on for this column. This\n\t * allows a column's ordering to take multiple columns into account when\n\t * doing a sort or use the data from a different column. For example first\n\t * name / last name columns make sense to do a multi-column sort over the\n\t * two columns.\n\t */ \"aDataSort\": null,\n    \"iDataSort\": -1,\n    ariaTitle: \"\",\n    /**\n\t * You can control the default ordering direction, and even alter the\n\t * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n\t * using this parameter.\n\t */ \"asSorting\": [\n        \"asc\",\n        \"desc\",\n        \"\"\n    ],\n    /**\n\t * Enable or disable filtering on the data in this column.\n\t */ \"bSearchable\": true,\n    /**\n\t * Enable or disable ordering on this column.\n\t */ \"bSortable\": true,\n    /**\n\t * Enable or disable the display of this column.\n\t */ \"bVisible\": true,\n    /**\n\t * Developer definable function that is called whenever a cell is created (Ajax source,\n\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n\t * allowing you to modify the DOM element (add background colour for example) when the\n\t * element is available.\n\t */ \"fnCreatedCell\": null,\n    /**\n\t * This property can be used to read data from any data source property,\n\t * including deeply nested objects / properties. `data` can be given in a\n\t * number of different ways which effect its behaviour:\n\t *\n\t * * `integer` - treated as an array index for the data source. This is the\n\t *   default that DataTables uses (incrementally increased for each column).\n\t * * `string` - read an object property from the data source. There are\n\t *   three 'special' options that can be used in the string to alter how\n\t *   DataTables reads the data from the source object:\n\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n\t *      Javascript to read from nested objects, so to can the options\n\t *      specified in `data`. For example: `browser.version` or\n\t *      `browser.name`. If your object parameter name contains a period, use\n\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\n\t *    * `[]` - Array notation. DataTables can automatically combine data\n\t *      from and array source, joining the data with the characters provided\n\t *      between the two brackets. For example: `name[, ]` would provide a\n\t *      comma-space separated list from the source array. If no characters\n\t *      are provided between the brackets, the original array source is\n\t *      returned.\n\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\n\t *      execute a function of the name given. For example: `browser()` for a\n\t *      simple function on the data source, `browser.version()` for a\n\t *      function in a nested property or even `browser().version` to get an\n\t *      object property if the function called returns an object. Note that\n\t *      function notation is recommended for use in `render` rather than\n\t *      `data` as it is much simpler to use as a renderer.\n\t * * `null` - use the original data source for the row rather than plucking\n\t *   data directly from it. This action has effects on two other\n\t *   initialisation options:\n\t *    * `defaultContent` - When null is given as the `data` option and\n\t *      `defaultContent` is specified for the column, the value defined by\n\t *      `defaultContent` will be used for the cell.\n\t *    * `render` - When null is used for the `data` option and the `render`\n\t *      option is specified for the column, the whole data source for the\n\t *      row is used for the renderer.\n\t * * `function` - the function given will be executed whenever DataTables\n\t *   needs to set or get the data for a cell in the column. The function\n\t *   takes three parameters:\n\t *    * Parameters:\n\t *      * `{array|object}` The data source for the row\n\t *      * `{string}` The type call data requested - this will be 'set' when\n\t *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n\t *        when gathering data. Note that when `undefined` is given for the\n\t *        type DataTables expects to get the raw data for the object back<\n\t *      * `{*}` Data to set when the second parameter is 'set'.\n\t *    * Return:\n\t *      * The return value from the function is not required when 'set' is\n\t *        the type of call, but otherwise the return is what will be used\n\t *        for the data requested.\n\t *\n\t * Note that `data` is a getter and setter option. If you just require\n\t * formatting of data for output, you will likely want to use `render` which\n\t * is simply a getter and thus simpler to use.\n\t *\n\t * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n\t * name change reflects the flexibility of this property and is consistent\n\t * with the naming of mRender. If 'mDataProp' is given, then it will still\n\t * be used by DataTables, as it automatically maps the old name to the new\n\t * if required.\n\t */ \"mData\": null,\n    /**\n\t * This property is the rendering partner to `data` and it is suggested that\n\t * when you want to manipulate data for display (including filtering,\n\t * sorting etc) without altering the underlying data for the table, use this\n\t * property. `render` can be considered to be the the read only companion to\n\t * `data` which is read / write (then as such more complex). Like `data`\n\t * this option can be given in a number of different ways to effect its\n\t * behaviour:\n\t *\n\t * * `integer` - treated as an array index for the data source. This is the\n\t *   default that DataTables uses (incrementally increased for each column).\n\t * * `string` - read an object property from the data source. There are\n\t *   three 'special' options that can be used in the string to alter how\n\t *   DataTables reads the data from the source object:\n\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n\t *      Javascript to read from nested objects, so to can the options\n\t *      specified in `data`. For example: `browser.version` or\n\t *      `browser.name`. If your object parameter name contains a period, use\n\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\n\t *    * `[]` - Array notation. DataTables can automatically combine data\n\t *      from and array source, joining the data with the characters provided\n\t *      between the two brackets. For example: `name[, ]` would provide a\n\t *      comma-space separated list from the source array. If no characters\n\t *      are provided between the brackets, the original array source is\n\t *      returned.\n\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\n\t *      execute a function of the name given. For example: `browser()` for a\n\t *      simple function on the data source, `browser.version()` for a\n\t *      function in a nested property or even `browser().version` to get an\n\t *      object property if the function called returns an object.\n\t * * `object` - use different data for the different data types requested by\n\t *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n\t *   of the object is the data type the property refers to and the value can\n\t *   defined using an integer, string or function using the same rules as\n\t *   `render` normally does. Note that an `_` option _must_ be specified.\n\t *   This is the default value to use if you haven't specified a value for\n\t *   the data type requested by DataTables.\n\t * * `function` - the function given will be executed whenever DataTables\n\t *   needs to set or get the data for a cell in the column. The function\n\t *   takes three parameters:\n\t *    * Parameters:\n\t *      * {array|object} The data source for the row (based on `data`)\n\t *      * {string} The type call data requested - this will be 'filter',\n\t *        'display', 'type' or 'sort'.\n\t *      * {array|object} The full data source for the row (not based on\n\t *        `data`)\n\t *    * Return:\n\t *      * The return value from the function is what will be used for the\n\t *        data requested.\n\t */ \"mRender\": null,\n    /**\n\t * Change the cell type created for the column - either TD cells or TH cells. This\n\t * can be useful as TH cells have semantic meaning in the table body, allowing them\n\t * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n\t */ \"sCellType\": \"td\",\n    /**\n\t * Class to give to each cell in this column.\n\t */ \"sClass\": \"\",\n    /**\n\t * When DataTables calculates the column widths to assign to each column,\n\t * it finds the longest string in each column and then constructs a\n\t * temporary table and reads the widths from that. The problem with this\n\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n\t * string - thus the calculation can go wrong (doing it properly and putting\n\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\n\t * a \"work around\" we provide this option. It will append its value to the\n\t * text that is found to be the longest string for the column - i.e. padding.\n\t * Generally you shouldn't need this!\n\t */ \"sContentPadding\": \"\",\n    /**\n\t * Allows a default value to be given for a column's data, and will be used\n\t * whenever a null data source is encountered (this can be because `data`\n\t * is set to null, or because the data source itself is null).\n\t */ \"sDefaultContent\": null,\n    /**\n\t * This parameter is only used in DataTables' server-side processing. It can\n\t * be exceptionally useful to know what columns are being displayed on the\n\t * client side, and to map these to database fields. When defined, the names\n\t * also allow DataTables to reorder information from the server if it comes\n\t * back in an unexpected order (i.e. if you switch your columns around on the\n\t * client-side, your server-side code does not also need updating).\n\t */ \"sName\": \"\",\n    /**\n\t * Defines a data source type for the ordering which can be used to read\n\t * real-time information from the table (updating the internally cached\n\t * version) prior to ordering. This allows ordering to occur on user\n\t * editable elements such as form inputs.\n\t */ \"sSortDataType\": \"std\",\n    /**\n\t * The title of this column.\n\t */ \"sTitle\": null,\n    /**\n\t * The type allows you to specify how the data for this column will be\n\t * ordered. Four types (string, numeric, date and html (which will strip\n\t * HTML tags before ordering)) are currently available. Note that only date\n\t * formats understood by Javascript's Date() object will be accepted as type\n\t * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n\t * 'numeric', 'date' or 'html' (by default). Further types can be adding\n\t * through plug-ins.\n\t */ \"sType\": null,\n    /**\n\t * Defining the width of the column, this parameter may take any CSS value\n\t * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n\t * been given a specific width through this interface ensuring that the table\n\t * remains readable.\n\t */ \"sWidth\": null\n};\n_fnHungarianMap(DataTable.defaults.column);\n/**\n * DataTables settings object - this holds all the information needed for a\n * given table, including configuration, data and current application of the\n * table options. DataTables does not have a single instance for each DataTable\n * with the settings attached to that instance, but rather instances of the\n * DataTable \"class\" are created on-the-fly as needed (typically by a\n * $().dataTable() call) and the settings object is then applied to that\n * instance.\n *\n * Note that this object is related to {@link DataTable.defaults} but this\n * one is the internal data store for DataTables's cache of columns. It should\n * NOT be manipulated outside of DataTables. Any configuration should be done\n * through the initialisation options.\n */ DataTable.models.oSettings = {\n    /**\n\t * Primary features of DataTables and their enablement state.\n\t */ \"oFeatures\": {\n        /**\n\t\t * Flag to say if DataTables should automatically try to calculate the\n\t\t * optimum table and columns widths (true) or not (false).\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"bAutoWidth\": null,\n        /**\n\t\t * Delay the creation of TR and TD elements until they are actually\n\t\t * needed by a driven page draw. This can give a significant speed\n\t\t * increase for Ajax source and Javascript source data, but makes no\n\t\t * difference at all for DOM and server-side processing tables.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"bDeferRender\": null,\n        /**\n\t\t * Enable filtering on the table or not. Note that if this is disabled\n\t\t * then there is no filtering at all on the table, including fnFilter.\n\t\t * To just remove the filtering input use sDom and remove the 'f' option.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"bFilter\": null,\n        /**\n\t\t * Used only for compatiblity with DT1\n\t\t * @deprecated\n\t\t */ \"bInfo\": true,\n        /**\n\t\t * Used only for compatiblity with DT1\n\t\t * @deprecated\n\t\t */ \"bLengthChange\": true,\n        /**\n\t\t * Pagination enabled or not. Note that if this is disabled then length\n\t\t * changing must also be disabled.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"bPaginate\": null,\n        /**\n\t\t * Processing indicator enable flag whenever DataTables is enacting a\n\t\t * user request - typically an Ajax request for server-side processing.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"bProcessing\": null,\n        /**\n\t\t * Server-side processing enabled flag - when enabled DataTables will\n\t\t * get all data from the server for every draw - there is no filtering,\n\t\t * sorting or paging done on the client-side.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"bServerSide\": null,\n        /**\n\t\t * Sorting enablement flag.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"bSort\": null,\n        /**\n\t\t * Multi-column sorting\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"bSortMulti\": null,\n        /**\n\t\t * Apply a class to the columns which are being sorted to provide a\n\t\t * visual highlight or not. This can slow things down when enabled since\n\t\t * there is a lot of DOM interaction.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"bSortClasses\": null,\n        /**\n\t\t * State saving enablement flag.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"bStateSave\": null\n    },\n    /**\n\t * Scrolling settings for a table.\n\t */ \"oScroll\": {\n        /**\n\t\t * When the table is shorter in height than sScrollY, collapse the\n\t\t * table container down to the height of the table (when true).\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"bCollapse\": null,\n        /**\n\t\t * Width of the scrollbar for the web-browser's platform. Calculated\n\t\t * during table initialisation.\n\t\t */ \"iBarWidth\": 0,\n        /**\n\t\t * Viewport width for horizontal scrolling. Horizontal scrolling is\n\t\t * disabled if an empty string.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"sX\": null,\n        /**\n\t\t * Width to expand the table to when using x-scrolling. Typically you\n\t\t * should not need to use this.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @deprecated\n\t\t */ \"sXInner\": null,\n        /**\n\t\t * Viewport height for vertical scrolling. Vertical scrolling is disabled\n\t\t * if an empty string.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t */ \"sY\": null\n    },\n    /**\n\t * Language information for the table.\n\t */ \"oLanguage\": {\n        /**\n\t\t * Information callback function. See\n\t\t * {@link DataTable.defaults.fnInfoCallback}\n\t\t */ \"fnInfoCallback\": null\n    },\n    /**\n\t * Browser support parameters\n\t */ \"oBrowser\": {\n        /**\n\t\t * Determine if the vertical scrollbar is on the right or left of the\n\t\t * scrolling container - needed for rtl language layout, although not\n\t\t * all browsers move the scrollbar (Safari).\n\t\t */ \"bScrollbarLeft\": false,\n        /**\n\t\t * Browser scrollbar width\n\t\t */ \"barWidth\": 0\n    },\n    \"ajax\": null,\n    /**\n\t * Array referencing the nodes which are used for the features. The\n\t * parameters of this object match what is allowed by sDom - i.e.\n\t *   <ul>\n\t *     <li>'l' - Length changing</li>\n\t *     <li>'f' - Filtering input</li>\n\t *     <li>'t' - The table!</li>\n\t *     <li>'i' - Information</li>\n\t *     <li>'p' - Pagination</li>\n\t *     <li>'r' - pRocessing</li>\n\t *   </ul>\n\t */ \"aanFeatures\": [],\n    /**\n\t * Store data information - see {@link DataTable.models.oRow} for detailed\n\t * information.\n\t */ \"aoData\": [],\n    /**\n\t * Array of indexes which are in the current display (after filtering etc)\n\t */ \"aiDisplay\": [],\n    /**\n\t * Array of indexes for display - no filtering\n\t */ \"aiDisplayMaster\": [],\n    /**\n\t * Map of row ids to data indexes\n\t */ \"aIds\": {},\n    /**\n\t * Store information about each column that is in use\n\t */ \"aoColumns\": [],\n    /**\n\t * Store information about the table's header\n\t */ \"aoHeader\": [],\n    /**\n\t * Store information about the table's footer\n\t */ \"aoFooter\": [],\n    /**\n\t * Store the applied global search information in case we want to force a\n\t * research or compare the old search to a new one.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t */ \"oPreviousSearch\": {},\n    /**\n\t * Store for named searches\n\t */ searchFixed: {},\n    /**\n\t * Store the applied search for each column - see\n\t * {@link DataTable.models.oSearch} for the format that is used for the\n\t * filtering information for each column.\n\t */ \"aoPreSearchCols\": [],\n    /**\n\t * Sorting that is applied to the table. Note that the inner arrays are\n\t * used in the following manner:\n\t * <ul>\n\t *   <li>Index 0 - column number</li>\n\t *   <li>Index 1 - current sorting direction</li>\n\t * </ul>\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t */ \"aaSorting\": null,\n    /**\n\t * Sorting that is always applied to the table (i.e. prefixed in front of\n\t * aaSorting).\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t */ \"aaSortingFixed\": [],\n    /**\n\t * If restoring a table - we should restore its width\n\t */ \"sDestroyWidth\": 0,\n    /**\n\t * Callback functions array for every time a row is inserted (i.e. on a draw).\n\t */ \"aoRowCallback\": [],\n    /**\n\t * Callback functions for the header on each draw.\n\t */ \"aoHeaderCallback\": [],\n    /**\n\t * Callback function for the footer on each draw.\n\t */ \"aoFooterCallback\": [],\n    /**\n\t * Array of callback functions for draw callback functions\n\t */ \"aoDrawCallback\": [],\n    /**\n\t * Array of callback functions for row created function\n\t */ \"aoRowCreatedCallback\": [],\n    /**\n\t * Callback functions for just before the table is redrawn. A return of\n\t * false will be used to cancel the draw.\n\t */ \"aoPreDrawCallback\": [],\n    /**\n\t * Callback functions for when the table has been initialised.\n\t */ \"aoInitComplete\": [],\n    /**\n\t * Callbacks for modifying the settings to be stored for state saving, prior to\n\t * saving state.\n\t */ \"aoStateSaveParams\": [],\n    /**\n\t * Callbacks for modifying the settings that have been stored for state saving\n\t * prior to using the stored values to restore the state.\n\t */ \"aoStateLoadParams\": [],\n    /**\n\t * Callbacks for operating on the settings object once the saved state has been\n\t * loaded\n\t */ \"aoStateLoaded\": [],\n    /**\n\t * Cache the table ID for quick access\n\t */ \"sTableId\": \"\",\n    /**\n\t * The TABLE node for the main table\n\t */ \"nTable\": null,\n    /**\n\t * Permanent ref to the thead element\n\t */ \"nTHead\": null,\n    /**\n\t * Permanent ref to the tfoot element - if it exists\n\t */ \"nTFoot\": null,\n    /**\n\t * Permanent ref to the tbody element\n\t */ \"nTBody\": null,\n    /**\n\t * Cache the wrapper node (contains all DataTables controlled elements)\n\t */ \"nTableWrapper\": null,\n    /**\n\t * Indicate if all required information has been read in\n\t */ \"bInitialised\": false,\n    /**\n\t * Information about open rows. Each object in the array has the parameters\n\t * 'nTr' and 'nParent'\n\t */ \"aoOpenRows\": [],\n    /**\n\t * Dictate the positioning of DataTables' control elements - see\n\t * {@link DataTable.model.oInit.sDom}.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t */ \"sDom\": null,\n    /**\n\t * Search delay (in mS)\n\t */ \"searchDelay\": null,\n    /**\n\t * Which type of pagination should be used.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t */ \"sPaginationType\": \"two_button\",\n    /**\n\t * Number of paging controls on the page. Only used for backwards compatibility\n\t */ pagingControls: 0,\n    /**\n\t * The state duration (for `stateSave`) in seconds.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t */ \"iStateDuration\": 0,\n    /**\n\t * Array of callback functions for state saving. Each array element is an\n\t * object with the following parameters:\n\t *   <ul>\n\t *     <li>function:fn - function to call. Takes two parameters, oSettings\n\t *       and the JSON string to save that has been thus far created. Returns\n\t *       a JSON string to be inserted into a json object\n\t *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n\t *     <li>string:sName - name of callback</li>\n\t *   </ul>\n\t */ \"aoStateSave\": [],\n    /**\n\t * Array of callback functions for state loading. Each array element is an\n\t * object with the following parameters:\n\t *   <ul>\n\t *     <li>function:fn - function to call. Takes two parameters, oSettings\n\t *       and the object stored. May return false to cancel state loading</li>\n\t *     <li>string:sName - name of callback</li>\n\t *   </ul>\n\t */ \"aoStateLoad\": [],\n    /**\n\t * State that was saved. Useful for back reference\n\t */ \"oSavedState\": null,\n    /**\n\t * State that was loaded. Useful for back reference\n\t */ \"oLoadedState\": null,\n    /**\n\t * Note if draw should be blocked while getting data\n\t */ \"bAjaxDataGet\": true,\n    /**\n\t * The last jQuery XHR object that was used for server-side data gathering.\n\t * This can be used for working with the XHR information in one of the\n\t * callbacks\n\t */ \"jqXHR\": null,\n    /**\n\t * JSON returned from the server in the last Ajax request\n\t */ \"json\": undefined,\n    /**\n\t * Data submitted as part of the last Ajax request\n\t */ \"oAjaxData\": undefined,\n    /**\n\t * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n\t * required).\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t */ \"sServerMethod\": null,\n    /**\n\t * Format numbers for display.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t */ \"fnFormatNumber\": null,\n    /**\n\t * List of options that can be used for the user selectable length menu.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t */ \"aLengthMenu\": null,\n    /**\n\t * Counter for the draws that the table does. Also used as a tracker for\n\t * server-side processing\n\t */ \"iDraw\": 0,\n    /**\n\t * Indicate if a redraw is being done - useful for Ajax\n\t */ \"bDrawing\": false,\n    /**\n\t * Draw index (iDraw) of the last error when parsing the returned data\n\t */ \"iDrawError\": -1,\n    /**\n\t * Paging display length\n\t */ \"_iDisplayLength\": 10,\n    /**\n\t * Paging start point - aiDisplay index\n\t */ \"_iDisplayStart\": 0,\n    /**\n\t * Server-side processing - number of records in the result set\n\t * (i.e. before filtering), Use fnRecordsTotal rather than\n\t * this property to get the value of the number of records, regardless of\n\t * the server-side processing setting.\n\t */ \"_iRecordsTotal\": 0,\n    /**\n\t * Server-side processing - number of records in the current display set\n\t * (i.e. after filtering). Use fnRecordsDisplay rather than\n\t * this property to get the value of the number of records, regardless of\n\t * the server-side processing setting.\n\t */ \"_iRecordsDisplay\": 0,\n    /**\n\t * The classes to use for the table\n\t */ \"oClasses\": {},\n    /**\n\t * Flag attached to the settings object so you can check in the draw\n\t * callback if filtering has been done in the draw. Deprecated in favour of\n\t * events.\n\t *  @deprecated\n\t */ \"bFiltered\": false,\n    /**\n\t * Flag attached to the settings object so you can check in the draw\n\t * callback if sorting has been done in the draw. Deprecated in favour of\n\t * events.\n\t *  @deprecated\n\t */ \"bSorted\": false,\n    /**\n\t * Indicate that if multiple rows are in the header and there is more than\n\t * one unique cell per column. Replaced by titleRow\n\t */ \"bSortCellsTop\": null,\n    /**\n\t * Initialisation object that is used for the table\n\t */ \"oInit\": null,\n    /**\n\t * Destroy callback functions - for plug-ins to attach themselves to the\n\t * destroy so they can clean up markup and events.\n\t */ \"aoDestroyCallback\": [],\n    /**\n\t * Get the number of records in the current record set, before filtering\n\t */ \"fnRecordsTotal\": function() {\n        return _fnDataSource(this) == \"ssp\" ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;\n    },\n    /**\n\t * Get the number of records in the current record set, after filtering\n\t */ \"fnRecordsDisplay\": function() {\n        return _fnDataSource(this) == \"ssp\" ? this._iRecordsDisplay * 1 : this.aiDisplay.length;\n    },\n    /**\n\t * Get the display end point - aiDisplay index\n\t */ \"fnDisplayEnd\": function() {\n        var len = this._iDisplayLength, start = this._iDisplayStart, calc = start + len, records = this.aiDisplay.length, features = this.oFeatures, paginate = features.bPaginate;\n        if (features.bServerSide) {\n            return paginate === false || len === -1 ? start + records : Math.min(start + len, this._iRecordsDisplay);\n        } else {\n            return !paginate || calc > records || len === -1 ? records : calc;\n        }\n    },\n    /**\n\t * The DataTables object for this table\n\t */ \"oInstance\": null,\n    /**\n\t * Unique identifier for each instance of the DataTables object. If there\n\t * is an ID on the table node, then it takes that value, otherwise an\n\t * incrementing internal counter is used.\n\t */ \"sInstance\": null,\n    /**\n\t * tabindex attribute value that is added to DataTables control elements, allowing\n\t * keyboard navigation of the table and its controls.\n\t */ \"iTabIndex\": 0,\n    /**\n\t * DIV container for the footer scrolling table if scrolling\n\t */ \"nScrollHead\": null,\n    /**\n\t * DIV container for the footer scrolling table if scrolling\n\t */ \"nScrollFoot\": null,\n    /**\n\t * Last applied sort\n\t */ \"aLastSort\": [],\n    /**\n\t * Stored plug-in instances\n\t */ \"oPlugins\": {},\n    /**\n\t * Function used to get a row's id from the row's data\n\t */ \"rowIdFn\": null,\n    /**\n\t * Data location where to store a row's id\n\t */ \"rowId\": null,\n    caption: \"\",\n    captionNode: null,\n    colgroup: null,\n    /** Delay loading of data */ deferLoading: null,\n    /** Allow auto type detection */ typeDetect: true,\n    /** ResizeObserver for the container div */ resizeObserver: null,\n    /** Keep a record of the last size of the container, so we can skip duplicates */ containerWidth: -1,\n    /** Reverse the initial order of the data set on desc ordering */ orderDescReverse: null,\n    /** Show / hide ordering indicators in headers */ orderIndicators: true,\n    /** Default ordering listener */ orderHandler: true,\n    /** Title row indicator */ titleRow: null\n};\n/**\n * Extension object for DataTables that is used to provide all extension\n * options.\n *\n * Note that the `DataTable.ext` object is available through\n * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n *  @namespace\n *  @extends DataTable.models.ext\n */ var extPagination = DataTable.ext.pager;\n// Paging buttons configuration\n$.extend(extPagination, {\n    simple: function() {\n        return [\n            \"previous\",\n            \"next\"\n        ];\n    },\n    full: function() {\n        return [\n            \"first\",\n            \"previous\",\n            \"next\",\n            \"last\"\n        ];\n    },\n    numbers: function() {\n        return [\n            \"numbers\"\n        ];\n    },\n    simple_numbers: function() {\n        return [\n            \"previous\",\n            \"numbers\",\n            \"next\"\n        ];\n    },\n    full_numbers: function() {\n        return [\n            \"first\",\n            \"previous\",\n            \"numbers\",\n            \"next\",\n            \"last\"\n        ];\n    },\n    first_last: function() {\n        return [\n            \"first\",\n            \"last\"\n        ];\n    },\n    first_last_numbers: function() {\n        return [\n            \"first\",\n            \"numbers\",\n            \"last\"\n        ];\n    },\n    // For testing and plug-ins to use\n    _numbers: _pagingNumbers,\n    // Number of number buttons - legacy, use `numbers` option for paging feature\n    numbers_length: 7\n});\n$.extend(true, DataTable.ext.renderer, {\n    pagingButton: {\n        _: function(settings, buttonType, content, active, disabled) {\n            var classes = settings.oClasses.paging;\n            var btnClasses = [\n                classes.button\n            ];\n            var btn;\n            if (active) {\n                btnClasses.push(classes.active);\n            }\n            if (disabled) {\n                btnClasses.push(classes.disabled);\n            }\n            if (buttonType === \"ellipsis\") {\n                btn = $('<span class=\"ellipsis\"></span>').html(content)[0];\n            } else {\n                btn = $(\"<button>\", {\n                    class: btnClasses.join(\" \"),\n                    role: \"link\",\n                    type: \"button\"\n                }).html(content);\n            }\n            return {\n                display: btn,\n                clicker: btn\n            };\n        }\n    },\n    pagingContainer: {\n        _: function(settings, buttons) {\n            // No wrapping element - just append directly to the host\n            return buttons;\n        }\n    }\n});\n// Common function to remove new lines, strip HTML and diacritic control\nvar _filterString = function(stripHtml, normalize) {\n    return function(str) {\n        if (_empty(str) || typeof str !== \"string\") {\n            return str;\n        }\n        str = str.replace(_re_new_lines, \" \");\n        if (stripHtml) {\n            str = _stripHtml(str);\n        }\n        if (normalize) {\n            str = _normalize(str, false);\n        }\n        return str;\n    };\n};\n/*\n * Public helper functions. These aren't used internally by DataTables, or\n * called by any of the options passed into DataTables, but they can be used\n * externally by developers working with DataTables. They are helper functions\n * to make working with DataTables a little bit easier.\n */ /**\n * Common logic for moment, luxon or a date action.\n *\n * Happens after __mldObj, so don't need to call `resolveWindowsLibs` again\n */ function __mld(dtLib, momentFn, luxonFn, dateFn, arg1) {\n    if (__moment) {\n        return dtLib[momentFn](arg1);\n    } else if (__luxon) {\n        return dtLib[luxonFn](arg1);\n    }\n    return dateFn ? dtLib[dateFn](arg1) : dtLib;\n}\nvar __mlWarning = false;\nvar __luxon; // Can be assigned in DateTable.use()\nvar __moment; // Can be assigned in DateTable.use()\n/**\n * \n */ function resolveWindowLibs() {\n    if (window.luxon && !__luxon) {\n        __luxon = window.luxon;\n    }\n    if (window.moment && !__moment) {\n        __moment = window.moment;\n    }\n}\nfunction __mldObj(d, format, locale) {\n    var dt;\n    resolveWindowLibs();\n    if (__moment) {\n        dt = __moment.utc(d, format, locale, true);\n        if (!dt.isValid()) {\n            return null;\n        }\n    } else if (__luxon) {\n        dt = format && typeof d === \"string\" ? __luxon.DateTime.fromFormat(d, format) : __luxon.DateTime.fromISO(d);\n        if (!dt.isValid) {\n            return null;\n        }\n        dt = dt.setLocale(locale);\n    } else if (!format) {\n        // No format given, must be ISO\n        dt = new Date(d);\n    } else {\n        if (!__mlWarning) {\n            alert(\"DataTables warning: Formatted date without Moment.js or Luxon - https://datatables.net/tn/17\");\n        }\n        __mlWarning = true;\n    }\n    return dt;\n}\n// Wrapper for date, datetime and time which all operate the same way with the exception of\n// the output string for auto locale support\nfunction __mlHelper(localeString) {\n    return function(from, to, locale, def) {\n        // Luxon and Moment support\n        // Argument shifting\n        if (arguments.length === 0) {\n            locale = \"en\";\n            to = null; // means toLocaleString\n            from = null; // means iso8601\n        } else if (arguments.length === 1) {\n            locale = \"en\";\n            to = from;\n            from = null;\n        } else if (arguments.length === 2) {\n            locale = to;\n            to = from;\n            from = null;\n        }\n        var typeName = \"datetime\" + (to ? \"-\" + to : \"\");\n        // Add type detection and sorting specific to this date format - we need to be able to identify\n        // date type columns as such, rather than as numbers in extensions. Hence the need for this.\n        if (!DataTable.ext.type.order[typeName + \"-pre\"]) {\n            DataTable.type(typeName, {\n                detect: function(d) {\n                    // The renderer will give the value to type detect as the type!\n                    return d === typeName ? typeName : false;\n                },\n                order: {\n                    pre: function(d) {\n                        // The renderer gives us Moment, Luxon or Date obects for the sorting, all of which have a\n                        // `valueOf` which gives milliseconds epoch\n                        return d.valueOf();\n                    }\n                },\n                className: \"dt-right\"\n            });\n        }\n        return function(d, type) {\n            // Allow for a default value\n            if (d === null || d === undefined) {\n                if (def === \"--now\") {\n                    // We treat everything as UTC further down, so no changes are\n                    // made, as such need to get the local date / time as if it were\n                    // UTC\n                    var local = new Date();\n                    d = new Date(Date.UTC(local.getFullYear(), local.getMonth(), local.getDate(), local.getHours(), local.getMinutes(), local.getSeconds()));\n                } else {\n                    d = \"\";\n                }\n            }\n            if (type === \"type\") {\n                // Typing uses the type name for fast matching\n                return typeName;\n            }\n            if (d === \"\") {\n                return type !== \"sort\" ? \"\" : __mldObj(\"0000-01-01 00:00:00\", null, locale);\n            }\n            // Shortcut. If `from` and `to` are the same, we are using the renderer to\n            // format for ordering, not display - its already in the display format.\n            if (to !== null && from === to && type !== \"sort\" && type !== \"type\" && !(d instanceof Date)) {\n                return d;\n            }\n            var dt = __mldObj(d, from, locale);\n            if (dt === null) {\n                return d;\n            }\n            if (type === \"sort\") {\n                return dt;\n            }\n            var formatted = to === null ? __mld(dt, \"toDate\", \"toJSDate\", \"\")[localeString]() : __mld(dt, \"format\", \"toFormat\", \"toISOString\", to);\n            // XSS protection\n            return type === \"display\" ? _escapeHtml(formatted) : formatted;\n        };\n    };\n}\n// Based on locale, determine standard number formatting\n// Fallback for legacy browsers is US English\nvar __thousands = \",\";\nvar __decimal = \".\";\nif (window.Intl !== undefined) {\n    try {\n        var num = new Intl.NumberFormat().formatToParts(100000.1);\n        for(var i = 0; i < num.length; i++){\n            if (num[i].type === \"group\") {\n                __thousands = num[i].value;\n            } else if (num[i].type === \"decimal\") {\n                __decimal = num[i].value;\n            }\n        }\n    } catch (e) {\n    // noop\n    }\n}\n// Formatted date time detection - use by declaring the formats you are going to use\nDataTable.datetime = function(format, locale) {\n    var typeName = \"datetime-\" + format;\n    if (!locale) {\n        locale = \"en\";\n    }\n    if (!DataTable.ext.type.order[typeName]) {\n        DataTable.type(typeName, {\n            detect: function(d) {\n                var dt = __mldObj(d, format, locale);\n                return d === \"\" || dt ? typeName : false;\n            },\n            order: {\n                pre: function(d) {\n                    return __mldObj(d, format, locale) || 0;\n                }\n            },\n            className: \"dt-right\"\n        });\n    }\n};\n/**\n * Helpers for `columns.render`.\n *\n * The options defined here can be used with the `columns.render` initialisation\n * option to provide a display renderer. The following functions are defined:\n *\n * * `moment` - Uses the MomentJS library to convert from a given format into another.\n * This renderer has three overloads:\n *   * 1 parameter:\n *     * `string` - Format to convert to (assumes input is ISO8601 and locale is `en`)\n *   * 2 parameters:\n *     * `string` - Format to convert from\n *     * `string` - Format to convert to. Assumes `en` locale\n *   * 3 parameters:\n *     * `string` - Format to convert from\n *     * `string` - Format to convert to\n *     * `string` - Locale\n * * `number` - Will format numeric data (defined by `columns.data`) for\n *   display, retaining the original unformatted data for sorting and filtering.\n *   It takes 5 parameters:\n *   * `string` - Thousands grouping separator\n *   * `string` - Decimal point indicator\n *   * `integer` - Number of decimal points to show\n *   * `string` (optional) - Prefix.\n *   * `string` (optional) - Postfix (/suffix).\n * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n *   parameters.\n *\n * @example\n *   // Column definition using the number renderer\n *   {\n *     data: \"salary\",\n *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n *   }\n *\n * @namespace\n */ DataTable.render = {\n    date: __mlHelper(\"toLocaleDateString\"),\n    datetime: __mlHelper(\"toLocaleString\"),\n    time: __mlHelper(\"toLocaleTimeString\"),\n    number: function(thousands, decimal, precision, prefix, postfix) {\n        // Auto locale detection\n        if (thousands === null || thousands === undefined) {\n            thousands = __thousands;\n        }\n        if (decimal === null || decimal === undefined) {\n            decimal = __decimal;\n        }\n        return {\n            display: function(d) {\n                if (typeof d !== \"number\" && typeof d !== \"string\") {\n                    return d;\n                }\n                if (d === \"\" || d === null) {\n                    return d;\n                }\n                var negative = d < 0 ? \"-\" : \"\";\n                var flo = parseFloat(d);\n                var abs = Math.abs(flo);\n                // Scientific notation for large and small numbers\n                if (abs >= 100000000000 || abs < 0.0001 && abs !== 0) {\n                    var exp = flo.toExponential(precision).split(/e\\+?/);\n                    return exp[0] + \" x 10<sup>\" + exp[1] + \"</sup>\";\n                }\n                // If NaN then there isn't much formatting that we can do - just\n                // return immediately, escaping any HTML (this was supposed to\n                // be a number after all)\n                if (isNaN(flo)) {\n                    return _escapeHtml(d);\n                }\n                flo = flo.toFixed(precision);\n                d = Math.abs(flo);\n                var intPart = parseInt(d, 10);\n                var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : \"\";\n                // If zero, then can't have a negative prefix\n                if (intPart === 0 && parseFloat(floatPart) === 0) {\n                    negative = \"\";\n                }\n                return negative + (prefix || \"\") + intPart.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands) + floatPart + (postfix || \"\");\n            }\n        };\n    },\n    text: function() {\n        return {\n            display: _escapeHtml,\n            filter: _escapeHtml\n        };\n    }\n};\nvar _extTypes = DataTable.ext.type;\n// Get / set type\nDataTable.type = function(name, prop, val) {\n    if (!prop) {\n        return {\n            className: _extTypes.className[name],\n            detect: _extTypes.detect.find(function(fn) {\n                return fn._name === name;\n            }),\n            order: {\n                pre: _extTypes.order[name + \"-pre\"],\n                asc: _extTypes.order[name + \"-asc\"],\n                desc: _extTypes.order[name + \"-desc\"]\n            },\n            render: _extTypes.render[name],\n            search: _extTypes.search[name]\n        };\n    }\n    var setProp = function(prop, propVal) {\n        _extTypes[prop][name] = propVal;\n    };\n    var setDetect = function(detect) {\n        // `detect` can be a function or an object - we set a name\n        // property for either - that is used for the detection\n        Object.defineProperty(detect, \"_name\", {\n            value: name\n        });\n        var idx = _extTypes.detect.findIndex(function(item) {\n            return item._name === name;\n        });\n        if (idx === -1) {\n            _extTypes.detect.unshift(detect);\n        } else {\n            _extTypes.detect.splice(idx, 1, detect);\n        }\n    };\n    var setOrder = function(obj) {\n        _extTypes.order[name + \"-pre\"] = obj.pre; // can be undefined\n        _extTypes.order[name + \"-asc\"] = obj.asc; // can be undefined\n        _extTypes.order[name + \"-desc\"] = obj.desc; // can be undefined\n    };\n    // prop is optional\n    if (val === undefined) {\n        val = prop;\n        prop = null;\n    }\n    if (prop === \"className\") {\n        setProp(\"className\", val);\n    } else if (prop === \"detect\") {\n        setDetect(val);\n    } else if (prop === \"order\") {\n        setOrder(val);\n    } else if (prop === \"render\") {\n        setProp(\"render\", val);\n    } else if (prop === \"search\") {\n        setProp(\"search\", val);\n    } else if (!prop) {\n        if (val.className) {\n            setProp(\"className\", val.className);\n        }\n        if (val.detect !== undefined) {\n            setDetect(val.detect);\n        }\n        if (val.order) {\n            setOrder(val.order);\n        }\n        if (val.render !== undefined) {\n            setProp(\"render\", val.render);\n        }\n        if (val.search !== undefined) {\n            setProp(\"search\", val.search);\n        }\n    }\n};\n// Get a list of types\nDataTable.types = function() {\n    return _extTypes.detect.map(function(fn) {\n        return fn._name;\n    });\n};\nvar __diacriticSort = function(a, b) {\n    a = a !== null && a !== undefined ? a.toString().toLowerCase() : \"\";\n    b = b !== null && b !== undefined ? b.toString().toLowerCase() : \"\";\n    // Checked for `navigator.languages` support in `oneOf` so this code can't execute in old\n    // Safari and thus can disable this check\n    // eslint-disable-next-line compat/compat\n    return a.localeCompare(b, navigator.languages[0] || navigator.language, {\n        numeric: true,\n        ignorePunctuation: true\n    });\n};\nvar __diacriticHtmlSort = function(a, b) {\n    a = _stripHtml(a);\n    b = _stripHtml(b);\n    return __diacriticSort(a, b);\n};\n//\n// Built in data types\n//\nDataTable.type(\"string\", {\n    detect: function() {\n        return \"string\";\n    },\n    order: {\n        pre: function(a) {\n            // This is a little complex, but faster than always calling toString,\n            // http://jsperf.com/tostring-v-check\n            return _empty(a) && typeof a !== \"boolean\" ? \"\" : typeof a === \"string\" ? a.toLowerCase() : !a.toString ? \"\" : a.toString();\n        }\n    },\n    search: _filterString(false, true)\n});\nDataTable.type(\"string-utf8\", {\n    detect: {\n        allOf: function(d) {\n            return true;\n        },\n        oneOf: function(d) {\n            // At least one data point must contain a non-ASCII character\n            // This line will also check if navigator.languages is supported or not. If not (Safari 10.0-)\n            // this data type won't be supported.\n            // eslint-disable-next-line compat/compat\n            return !_empty(d) && navigator.languages && typeof d === \"string\" && d.match(/[^\\x00-\\x7F]/);\n        }\n    },\n    order: {\n        asc: __diacriticSort,\n        desc: function(a, b) {\n            return __diacriticSort(a, b) * -1;\n        }\n    },\n    search: _filterString(false, true)\n});\nDataTable.type(\"html\", {\n    detect: {\n        allOf: function(d) {\n            return _empty(d) || typeof d === \"string\" && d.indexOf(\"<\") !== -1;\n        },\n        oneOf: function(d) {\n            // At least one data point must contain a `<`\n            return !_empty(d) && typeof d === \"string\" && d.indexOf(\"<\") !== -1;\n        }\n    },\n    order: {\n        pre: function(a) {\n            return _empty(a) ? \"\" : a.replace ? _stripHtml(a).trim().toLowerCase() : a + \"\";\n        }\n    },\n    search: _filterString(true, true)\n});\nDataTable.type(\"html-utf8\", {\n    detect: {\n        allOf: function(d) {\n            return _empty(d) || typeof d === \"string\" && d.indexOf(\"<\") !== -1;\n        },\n        oneOf: function(d) {\n            // At least one data point must contain a `<` and a non-ASCII character\n            // eslint-disable-next-line compat/compat\n            return navigator.languages && !_empty(d) && typeof d === \"string\" && d.indexOf(\"<\") !== -1 && typeof d === \"string\" && d.match(/[^\\x00-\\x7F]/);\n        }\n    },\n    order: {\n        asc: __diacriticHtmlSort,\n        desc: function(a, b) {\n            return __diacriticHtmlSort(a, b) * -1;\n        }\n    },\n    search: _filterString(true, true)\n});\nDataTable.type(\"date\", {\n    className: \"dt-type-date\",\n    detect: {\n        allOf: function(d) {\n            // V8 tries _very_ hard to make a string passed into `Date.parse()`\n            // valid, so we need to use a regex to restrict date formats. Use a\n            // plug-in for anything other than ISO8601 style strings\n            if (d && !(d instanceof Date) && !_re_date.test(d)) {\n                return null;\n            }\n            var parsed = Date.parse(d);\n            return parsed !== null && !isNaN(parsed) || _empty(d);\n        },\n        oneOf: function(d) {\n            // At least one entry must be a date or a string with a date\n            return d instanceof Date || typeof d === \"string\" && _re_date.test(d);\n        }\n    },\n    order: {\n        pre: function(d) {\n            var ts = Date.parse(d);\n            return isNaN(ts) ? -Infinity : ts;\n        }\n    }\n});\nDataTable.type(\"html-num-fmt\", {\n    className: \"dt-type-numeric\",\n    detect: {\n        allOf: function(d, settings) {\n            var decimal = settings.oLanguage.sDecimal;\n            return _htmlNumeric(d, decimal, true, false);\n        },\n        oneOf: function(d, settings) {\n            // At least one data point must contain a numeric value\n            var decimal = settings.oLanguage.sDecimal;\n            return _htmlNumeric(d, decimal, true, false);\n        }\n    },\n    order: {\n        pre: function(d, s) {\n            var dp = s.oLanguage.sDecimal;\n            return __numericReplace(d, dp, _re_html, _re_formatted_numeric);\n        }\n    },\n    search: _filterString(true, true)\n});\nDataTable.type(\"html-num\", {\n    className: \"dt-type-numeric\",\n    detect: {\n        allOf: function(d, settings) {\n            var decimal = settings.oLanguage.sDecimal;\n            return _htmlNumeric(d, decimal, false, true);\n        },\n        oneOf: function(d, settings) {\n            // At least one data point must contain a numeric value\n            var decimal = settings.oLanguage.sDecimal;\n            return _htmlNumeric(d, decimal, false, false);\n        }\n    },\n    order: {\n        pre: function(d, s) {\n            var dp = s.oLanguage.sDecimal;\n            return __numericReplace(d, dp, _re_html);\n        }\n    },\n    search: _filterString(true, true)\n});\nDataTable.type(\"num-fmt\", {\n    className: \"dt-type-numeric\",\n    detect: {\n        allOf: function(d, settings) {\n            var decimal = settings.oLanguage.sDecimal;\n            return _isNumber(d, decimal, true, true);\n        },\n        oneOf: function(d, settings) {\n            // At least one data point must contain a numeric value\n            var decimal = settings.oLanguage.sDecimal;\n            return _isNumber(d, decimal, true, false);\n        }\n    },\n    order: {\n        pre: function(d, s) {\n            var dp = s.oLanguage.sDecimal;\n            return __numericReplace(d, dp, _re_formatted_numeric);\n        }\n    }\n});\nDataTable.type(\"num\", {\n    className: \"dt-type-numeric\",\n    detect: {\n        allOf: function(d, settings) {\n            var decimal = settings.oLanguage.sDecimal;\n            return _isNumber(d, decimal, false, true);\n        },\n        oneOf: function(d, settings) {\n            // At least one data point must contain a numeric value\n            var decimal = settings.oLanguage.sDecimal;\n            return _isNumber(d, decimal, false, false);\n        }\n    },\n    order: {\n        pre: function(d, s) {\n            var dp = s.oLanguage.sDecimal;\n            return __numericReplace(d, dp);\n        }\n    }\n});\nvar __numericReplace = function(d, decimalPlace, re1, re2) {\n    if (d !== 0 && (!d || d === \"-\")) {\n        return -Infinity;\n    }\n    var type = typeof d;\n    if (type === \"number\" || type === \"bigint\") {\n        return d;\n    }\n    // If a decimal place other than `.` is used, it needs to be given to the\n    // function so we can detect it and replace with a `.` which is the only\n    // decimal place Javascript recognises - it is not locale aware.\n    if (decimalPlace) {\n        d = _numToDecimal(d, decimalPlace);\n    }\n    if (d.replace) {\n        if (re1) {\n            d = d.replace(re1, \"\");\n        }\n        if (re2) {\n            d = d.replace(re2, \"\");\n        }\n    }\n    return d * 1;\n};\n$.extend(true, DataTable.ext.renderer, {\n    footer: {\n        _: function(settings, cell, classes) {\n            cell.addClass(classes.tfoot.cell);\n        }\n    },\n    header: {\n        _: function(settings, cell, classes) {\n            cell.addClass(classes.thead.cell);\n            if (!settings.oFeatures.bSort) {\n                cell.addClass(classes.order.none);\n            }\n            var titleRow = settings.titleRow;\n            var headerRows = cell.closest(\"thead\").find(\"tr\");\n            var rowIdx = cell.parent().index();\n            // Conditions to not apply the ordering icons\n            if (// Cells and rows which have the attribute to disable the icons\n            cell.attr(\"data-dt-order\") === \"disable\" || cell.parent().attr(\"data-dt-order\") === \"disable\" || // titleRow support, for defining a specific row in the header\n            titleRow === true && rowIdx !== 0 || titleRow === false && rowIdx !== headerRows.length - 1 || typeof titleRow === \"number\" && rowIdx !== titleRow) {\n                return;\n            }\n            // No additional mark-up required\n            // Attach a sort listener to update on sort - note that using the\n            // `DT` namespace will allow the event to be removed automatically\n            // on destroy, while the `dt` namespaced event is the one we are\n            // listening for\n            $(settings.nTable).on(\"order.dt.DT column-visibility.dt.DT\", function(e, ctx, column) {\n                if (settings !== ctx) {\n                    return; // table, not a nested one\n                }\n                var sorting = ctx.sortDetails;\n                if (!sorting) {\n                    return;\n                }\n                var orderedColumns = _pluck(sorting, \"col\");\n                // This handler is only needed on column visibility if the column is part of the\n                // ordering. If it isn't, then we can bail out to save performance. It could be a\n                // separate event handler, but this is a balance between code reuse / size and performance\n                // console.log(e, e.name, column, orderedColumns, orderedColumns.includes(column))\n                if (e.type === \"column-visibility\" && !orderedColumns.includes(column)) {\n                    return;\n                }\n                var i;\n                var orderClasses = classes.order;\n                var columns = ctx.api.columns(cell);\n                var col = settings.aoColumns[columns.flatten()[0]];\n                var orderable = columns.orderable().includes(true);\n                var ariaType = \"\";\n                var indexes = columns.indexes();\n                var sortDirs = columns.orderable(true).flatten();\n                var tabIndex = settings.iTabIndex;\n                var canOrder = ctx.orderHandler && orderable;\n                cell.removeClass(orderClasses.isAsc + \" \" + orderClasses.isDesc).toggleClass(orderClasses.none, !orderable).toggleClass(orderClasses.canAsc, canOrder && sortDirs.includes(\"asc\")).toggleClass(orderClasses.canDesc, canOrder && sortDirs.includes(\"desc\"));\n                // Determine if all of the columns that this cell covers are included in the\n                // current ordering\n                var isOrdering = true;\n                for(i = 0; i < indexes.length; i++){\n                    if (!orderedColumns.includes(indexes[i])) {\n                        isOrdering = false;\n                    }\n                }\n                if (isOrdering) {\n                    // Get the ordering direction for the columns under this cell\n                    // Note that it is possible for a cell to be asc and desc sorting\n                    // (column spanning cells)\n                    var orderDirs = columns.order();\n                    cell.addClass(orderDirs.includes(\"asc\") ? orderClasses.isAsc : \"\" + orderDirs.includes(\"desc\") ? orderClasses.isDesc : \"\");\n                }\n                // Find the first visible column that has ordering applied to it - it get's\n                // the aria information, as the ARIA spec says that only one column should\n                // be marked with aria-sort\n                var firstVis = -1; // column index\n                for(i = 0; i < orderedColumns.length; i++){\n                    if (settings.aoColumns[orderedColumns[i]].bVisible) {\n                        firstVis = orderedColumns[i];\n                        break;\n                    }\n                }\n                if (indexes[0] == firstVis) {\n                    var firstSort = sorting[0];\n                    var sortOrder = col.asSorting;\n                    cell.attr(\"aria-sort\", firstSort.dir === \"asc\" ? \"ascending\" : \"descending\");\n                    // Determine if the next click will remove sorting or change the sort\n                    ariaType = !sortOrder[firstSort.index + 1] ? \"Remove\" : \"Reverse\";\n                } else {\n                    cell.removeAttr(\"aria-sort\");\n                }\n                // Make the headers tab-able for keyboard navigation\n                if (orderable) {\n                    var orderSpan = cell.find(\".dt-column-order\");\n                    orderSpan.attr(\"role\", \"button\").attr(\"aria-label\", orderable ? col.ariaTitle + ctx.api.i18n(\"oAria.orderable\" + ariaType) : col.ariaTitle);\n                    if (tabIndex !== -1) {\n                        orderSpan.attr(\"tabindex\", tabIndex);\n                    }\n                }\n            });\n        }\n    },\n    layout: {\n        _: function(settings, container, items) {\n            var classes = settings.oClasses.layout;\n            var row = $(\"<div/>\").attr(\"id\", items.id || null).addClass(items.className || classes.row).appendTo(container);\n            DataTable.ext.renderer.layout._forLayoutRow(items, function(key, val) {\n                if (key === \"id\" || key === \"className\") {\n                    return;\n                }\n                var klass = \"\";\n                if (val.table) {\n                    row.addClass(classes.tableRow);\n                    klass += classes.tableCell + \" \";\n                }\n                if (key === \"start\") {\n                    klass += classes.start;\n                } else if (key === \"end\") {\n                    klass += classes.end;\n                } else {\n                    klass += classes.full;\n                }\n                $(\"<div/>\").attr({\n                    id: val.id || null,\n                    \"class\": val.className ? val.className : classes.cell + \" \" + klass\n                }).append(val.contents).appendTo(row);\n            });\n        },\n        // Shared for use by the styling frameworks\n        _forLayoutRow: function(items, fn) {\n            // As we are inserting dom elements, we need start / end in a\n            // specific order, this function is used for sorting the layout\n            // keys.\n            var layoutEnum = function(x) {\n                switch(x){\n                    case \"\":\n                        return 0;\n                    case \"start\":\n                        return 1;\n                    case \"end\":\n                        return 2;\n                    default:\n                        return 3;\n                }\n            };\n            Object.keys(items).sort(function(a, b) {\n                return layoutEnum(a) - layoutEnum(b);\n            }).forEach(function(key) {\n                fn(key, items[key]);\n            });\n        }\n    }\n});\nDataTable.feature = {};\n// Third parameter is internal only!\nDataTable.feature.register = function(name, cb, legacy) {\n    DataTable.ext.features[name] = cb;\n    if (legacy) {\n        _ext.feature.push({\n            cFeature: legacy,\n            fnInit: cb\n        });\n    }\n};\nfunction _divProp(el, prop, val) {\n    if (val) {\n        el[prop] = val;\n    }\n}\nDataTable.feature.register(\"div\", function(settings, opts) {\n    var n = $(\"<div>\")[0];\n    if (opts) {\n        _divProp(n, \"className\", opts.className);\n        _divProp(n, \"id\", opts.id);\n        _divProp(n, \"innerHTML\", opts.html);\n        _divProp(n, \"textContent\", opts.text);\n    }\n    return n;\n});\nDataTable.feature.register(\"info\", function(settings, opts) {\n    // For compatibility with the legacy `info` top level option\n    if (!settings.oFeatures.bInfo) {\n        return null;\n    }\n    var lang = settings.oLanguage, tid = settings.sTableId, n = $(\"<div/>\", {\n        \"class\": settings.oClasses.info.container\n    });\n    opts = $.extend({\n        callback: lang.fnInfoCallback,\n        empty: lang.sInfoEmpty,\n        postfix: lang.sInfoPostFix,\n        search: lang.sInfoFiltered,\n        text: lang.sInfo\n    }, opts);\n    // Update display on each draw\n    settings.aoDrawCallback.push(function(s) {\n        _fnUpdateInfo(s, opts, n);\n    });\n    // For the first info display in the table, we add a callback and aria information.\n    if (!settings._infoEl) {\n        n.attr({\n            \"aria-live\": \"polite\",\n            id: tid + \"_info\",\n            role: \"status\"\n        });\n        // Table is described by our info div\n        $(settings.nTable).attr(\"aria-describedby\", tid + \"_info\");\n        settings._infoEl = n;\n    }\n    return n;\n}, \"i\");\n/**\n * Update the information elements in the display\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */ function _fnUpdateInfo(settings, opts, node) {\n    var start = settings._iDisplayStart + 1, end = settings.fnDisplayEnd(), max = settings.fnRecordsTotal(), total = settings.fnRecordsDisplay(), out = total ? opts.text : opts.empty;\n    if (total !== max) {\n        // Record set after filtering\n        out += \" \" + opts.search;\n    }\n    // Convert the macros\n    out += opts.postfix;\n    out = _fnMacros(settings, out);\n    if (opts.callback) {\n        out = opts.callback.call(settings.oInstance, settings, start, end, max, total, out);\n    }\n    node.html(out);\n    _fnCallbackFire(settings, null, \"info\", [\n        settings,\n        node[0],\n        out\n    ]);\n}\nvar __searchCounter = 0;\n// opts\n// - text\n// - placeholder\nDataTable.feature.register(\"search\", function(settings, opts) {\n    // Don't show the input if filtering isn't available on the table\n    if (!settings.oFeatures.bFilter) {\n        return null;\n    }\n    var classes = settings.oClasses.search;\n    var tableId = settings.sTableId;\n    var language = settings.oLanguage;\n    var previousSearch = settings.oPreviousSearch;\n    var input = '<input type=\"search\" class=\"' + classes.input + '\"/>';\n    opts = $.extend({\n        placeholder: language.sSearchPlaceholder,\n        processing: false,\n        text: language.sSearch\n    }, opts);\n    // The _INPUT_ is optional - is appended if not present\n    if (opts.text.indexOf(\"_INPUT_\") === -1) {\n        opts.text += \"_INPUT_\";\n    }\n    opts.text = _fnMacros(settings, opts.text);\n    // We can put the <input> outside of the label if it is at the start or end\n    // which helps improve accessability (not all screen readers like implicit\n    // for elements).\n    var end = opts.text.match(/_INPUT_$/);\n    var start = opts.text.match(/^_INPUT_/);\n    var removed = opts.text.replace(/_INPUT_/, \"\");\n    var str = \"<label>\" + opts.text + \"</label>\";\n    if (start) {\n        str = \"_INPUT_<label>\" + removed + \"</label>\";\n    } else if (end) {\n        str = \"<label>\" + removed + \"</label>_INPUT_\";\n    }\n    var filter = $(\"<div>\").addClass(classes.container).append(str.replace(/_INPUT_/, input));\n    // add for and id to label and input\n    filter.find(\"label\").attr(\"for\", \"dt-search-\" + __searchCounter);\n    filter.find(\"input\").attr(\"id\", \"dt-search-\" + __searchCounter);\n    __searchCounter++;\n    var searchFn = function(event) {\n        var val = this.value;\n        if (previousSearch.return && event.key !== \"Enter\") {\n            return;\n        }\n        /* Now do the filter */ if (val != previousSearch.search) {\n            _fnProcessingRun(settings, opts.processing, function() {\n                previousSearch.search = val;\n                _fnFilterComplete(settings, previousSearch);\n                // Need to redraw, without resorting\n                settings._iDisplayStart = 0;\n                _fnDraw(settings);\n            });\n        }\n    };\n    var searchDelay = settings.searchDelay !== null ? settings.searchDelay : 0;\n    var jqFilter = $(\"input\", filter).val(previousSearch.search).attr(\"placeholder\", opts.placeholder).on(\"keyup.DT search.DT input.DT paste.DT cut.DT\", searchDelay ? DataTable.util.debounce(searchFn, searchDelay) : searchFn).on(\"mouseup.DT\", function(e) {\n        // Edge fix! Edge 17 does not trigger anything other than mouse events when clicking\n        // on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`\n        // checks the value to see if it has changed. In other browsers it won't have.\n        setTimeout(function() {\n            searchFn.call(jqFilter[0], e);\n        }, 10);\n    }).on(\"keypress.DT\", function(e) {\n        /* Prevent form submission */ if (e.keyCode == 13) {\n            return false;\n        }\n    }).attr(\"aria-controls\", tableId);\n    // Update the input elements whenever the table is filtered\n    $(settings.nTable).on(\"search.dt.DT\", function(ev, s) {\n        if (settings === s && jqFilter[0] !== document.activeElement) {\n            jqFilter.val(typeof previousSearch.search !== \"function\" ? previousSearch.search : \"\");\n        }\n    });\n    return filter;\n}, \"f\");\n// opts\n// - type - button configuration\n// - buttons - number of buttons to show - must be odd\nDataTable.feature.register(\"paging\", function(settings, opts) {\n    // Don't show the paging input if the table doesn't have paging enabled\n    if (!settings.oFeatures.bPaginate) {\n        return null;\n    }\n    opts = $.extend({\n        buttons: DataTable.ext.pager.numbers_length,\n        type: settings.sPaginationType,\n        boundaryNumbers: true,\n        firstLast: true,\n        previousNext: true,\n        numbers: true\n    }, opts);\n    var host = $(\"<div/>\").addClass(settings.oClasses.paging.container + (opts.type ? \" paging_\" + opts.type : \"\")).append($(\"<nav>\").attr(\"aria-label\", \"pagination\").addClass(settings.oClasses.paging.nav));\n    var draw = function() {\n        _pagingDraw(settings, host.children(), opts);\n    };\n    settings.aoDrawCallback.push(draw);\n    // Responsive redraw of paging control\n    $(settings.nTable).on(\"column-sizing.dt.DT\", draw);\n    return host;\n}, \"p\");\n/**\n * Dynamically create the button type array based on the configuration options.\n * This will only happen if the paging type is not defined.\n */ function _pagingDynamic(opts) {\n    var out = [];\n    if (opts.numbers) {\n        out.push(\"numbers\");\n    }\n    if (opts.previousNext) {\n        out.unshift(\"previous\");\n        out.push(\"next\");\n    }\n    if (opts.firstLast) {\n        out.unshift(\"first\");\n        out.push(\"last\");\n    }\n    return out;\n}\nfunction _pagingDraw(settings, host, opts) {\n    if (!settings._bInitComplete) {\n        return;\n    }\n    var plugin = opts.type ? DataTable.ext.pager[opts.type] : _pagingDynamic, aria = settings.oLanguage.oAria.paginate || {}, start = settings._iDisplayStart, len = settings._iDisplayLength, visRecords = settings.fnRecordsDisplay(), all = len === -1, page = all ? 0 : Math.ceil(start / len), pages = all ? 1 : Math.ceil(visRecords / len), buttons = [], buttonEls = [], buttonsNested = plugin(opts).map(function(val) {\n        return val === \"numbers\" ? _pagingNumbers(page, pages, opts.buttons, opts.boundaryNumbers) : val;\n    });\n    // .flat() would be better, but not supported in old Safari\n    buttons = buttons.concat.apply(buttons, buttonsNested);\n    for(var i = 0; i < buttons.length; i++){\n        var button = buttons[i];\n        var btnInfo = _pagingButtonInfo(settings, button, page, pages);\n        var btn = _fnRenderer(settings, \"pagingButton\")(settings, button, btnInfo.display, btnInfo.active, btnInfo.disabled);\n        var ariaLabel = typeof button === \"string\" ? aria[button] : aria.number ? aria.number + (button + 1) : null;\n        // Common attributes\n        $(btn.clicker).attr({\n            \"aria-controls\": settings.sTableId,\n            \"aria-disabled\": btnInfo.disabled ? \"true\" : null,\n            \"aria-current\": btnInfo.active ? \"page\" : null,\n            \"aria-label\": ariaLabel,\n            \"data-dt-idx\": button,\n            \"tabIndex\": btnInfo.disabled ? -1 : settings.iTabIndex && btn.clicker[0].nodeName.toLowerCase() !== \"span\" ? settings.iTabIndex : null\n        });\n        if (typeof button !== \"number\") {\n            $(btn.clicker).addClass(button);\n        }\n        _fnBindAction(btn.clicker, {\n            action: button\n        }, function(e) {\n            e.preventDefault();\n            _fnPageChange(settings, e.data.action, true);\n        });\n        buttonEls.push(btn.display);\n    }\n    var wrapped = _fnRenderer(settings, \"pagingContainer\")(settings, buttonEls);\n    var activeEl = host.find(document.activeElement).data(\"dt-idx\");\n    host.empty().append(wrapped);\n    if (activeEl !== undefined) {\n        host.find(\"[data-dt-idx=\" + activeEl + \"]\").trigger(\"focus\");\n    }\n    // Responsive - check if the buttons are over two lines based on the\n    // height of the buttons and the container.\n    if (buttonEls.length) {\n        var outerHeight = $(buttonEls[0]).outerHeight();\n        if (opts.buttons > 1 && // prevent infinite\n        outerHeight > 0 && // will be 0 if hidden\n        $(host).height() >= outerHeight * 2 - 10) {\n            _pagingDraw(settings, host, $.extend({}, opts, {\n                buttons: opts.buttons - 2\n            }));\n        }\n    }\n}\n/**\n * Get properties for a button based on the current paging state of the table\n *\n * @param {*} settings DT settings object\n * @param {*} button The button type in question\n * @param {*} page Table's current page\n * @param {*} pages Number of pages\n * @returns Info object\n */ function _pagingButtonInfo(settings, button, page, pages) {\n    var lang = settings.oLanguage.oPaginate;\n    var o = {\n        display: \"\",\n        active: false,\n        disabled: false\n    };\n    switch(button){\n        case \"ellipsis\":\n            o.display = \"&#x2026;\";\n            break;\n        case \"first\":\n            o.display = lang.sFirst;\n            if (page === 0) {\n                o.disabled = true;\n            }\n            break;\n        case \"previous\":\n            o.display = lang.sPrevious;\n            if (page === 0) {\n                o.disabled = true;\n            }\n            break;\n        case \"next\":\n            o.display = lang.sNext;\n            if (pages === 0 || page === pages - 1) {\n                o.disabled = true;\n            }\n            break;\n        case \"last\":\n            o.display = lang.sLast;\n            if (pages === 0 || page === pages - 1) {\n                o.disabled = true;\n            }\n            break;\n        default:\n            if (typeof button === \"number\") {\n                o.display = settings.fnFormatNumber(button + 1);\n                if (page === button) {\n                    o.active = true;\n                }\n            }\n            break;\n    }\n    return o;\n}\n/**\n * Compute what number buttons to show in the paging control\n *\n * @param {*} page Current page\n * @param {*} pages Total number of pages\n * @param {*} buttons Target number of number buttons\n * @param {boolean} addFirstLast Indicate if page 1 and end should be included\n * @returns Buttons to show\n */ function _pagingNumbers(page, pages, buttons, addFirstLast) {\n    var numbers = [], half = Math.floor(buttons / 2), before = addFirstLast ? 2 : 1, after = addFirstLast ? 1 : 0;\n    if (pages <= buttons) {\n        numbers = _range(0, pages);\n    } else if (buttons === 1) {\n        // Single button - current page only\n        numbers = [\n            page\n        ];\n    } else if (buttons === 3) {\n        // Special logic for just three buttons\n        if (page <= 1) {\n            numbers = [\n                0,\n                1,\n                \"ellipsis\"\n            ];\n        } else if (page >= pages - 2) {\n            numbers = _range(pages - 2, pages);\n            numbers.unshift(\"ellipsis\");\n        } else {\n            numbers = [\n                \"ellipsis\",\n                page,\n                \"ellipsis\"\n            ];\n        }\n    } else if (page <= half) {\n        numbers = _range(0, buttons - before);\n        numbers.push(\"ellipsis\");\n        if (addFirstLast) {\n            numbers.push(pages - 1);\n        }\n    } else if (page >= pages - 1 - half) {\n        numbers = _range(pages - (buttons - before), pages);\n        numbers.unshift(\"ellipsis\");\n        if (addFirstLast) {\n            numbers.unshift(0);\n        }\n    } else {\n        numbers = _range(page - half + before, page + half - after);\n        numbers.push(\"ellipsis\");\n        numbers.unshift(\"ellipsis\");\n        if (addFirstLast) {\n            numbers.push(pages - 1);\n            numbers.unshift(0);\n        }\n    }\n    return numbers;\n}\nvar __lengthCounter = 0;\n// opts\n// - menu\n// - text\nDataTable.feature.register(\"pageLength\", function(settings, opts) {\n    var features = settings.oFeatures;\n    // For compatibility with the legacy `pageLength` top level option\n    if (!features.bPaginate || !features.bLengthChange) {\n        return null;\n    }\n    opts = $.extend({\n        menu: settings.aLengthMenu,\n        text: settings.oLanguage.sLengthMenu\n    }, opts);\n    var classes = settings.oClasses.length, tableId = settings.sTableId, menu = opts.menu, lengths = [], language = [], i;\n    // Options can be given in a number of ways\n    if (Array.isArray(menu[0])) {\n        // Old 1.x style - 2D array\n        lengths = menu[0];\n        language = menu[1];\n    } else {\n        for(i = 0; i < menu.length; i++){\n            // An object with different label and value\n            if ($.isPlainObject(menu[i])) {\n                lengths.push(menu[i].value);\n                language.push(menu[i].label);\n            } else {\n                // Or just a number to display and use\n                lengths.push(menu[i]);\n                language.push(menu[i]);\n            }\n        }\n    }\n    // We can put the <select> outside of the label if it is at the start or\n    // end which helps improve accessability (not all screen readers like\n    // implicit for elements).\n    var end = opts.text.match(/_MENU_$/);\n    var start = opts.text.match(/^_MENU_/);\n    var removed = opts.text.replace(/_MENU_/, \"\");\n    var str = \"<label>\" + opts.text + \"</label>\";\n    if (start) {\n        str = \"_MENU_<label>\" + removed + \"</label>\";\n    } else if (end) {\n        str = \"<label>\" + removed + \"</label>_MENU_\";\n    }\n    // Wrapper element - use a span as a holder for where the select will go\n    var tmpId = \"tmp-\" + +new Date();\n    var div = $(\"<div/>\").addClass(classes.container).append(str.replace(\"_MENU_\", '<span id=\"' + tmpId + '\"></span>'));\n    // Save text node content for macro updating\n    var textNodes = [];\n    Array.prototype.slice.call(div.find(\"label\")[0].childNodes).forEach(function(el) {\n        if (el.nodeType === Node.TEXT_NODE) {\n            textNodes.push({\n                el: el,\n                text: el.textContent\n            });\n        }\n    });\n    // Update the label text in case it has an entries value\n    var updateEntries = function(len) {\n        textNodes.forEach(function(node) {\n            node.el.textContent = _fnMacros(settings, node.text, len);\n        });\n    };\n    // Next, the select itself, along with the options\n    var select = $(\"<select/>\", {\n        \"aria-controls\": tableId,\n        \"class\": classes.select\n    });\n    for(i = 0; i < lengths.length; i++){\n        // Attempt to look up the length from the i18n options\n        var label = settings.api.i18n(\"lengthLabels.\" + lengths[i], null);\n        if (label === null) {\n            // If not present, fallback to old style\n            label = typeof language[i] === \"number\" ? settings.fnFormatNumber(language[i]) : language[i];\n        }\n        select[0][i] = new Option(label, lengths[i]);\n    }\n    // add for and id to label and input\n    div.find(\"label\").attr(\"for\", \"dt-length-\" + __lengthCounter);\n    select.attr(\"id\", \"dt-length-\" + __lengthCounter);\n    __lengthCounter++;\n    // Swap in the select list\n    div.find(\"#\" + tmpId).replaceWith(select);\n    // Can't use `select` variable as user might provide their own and the\n    // reference is broken by the use of outerHTML\n    $(\"select\", div).val(settings._iDisplayLength).on(\"change.DT\", function() {\n        _fnLengthChange(settings, $(this).val());\n        _fnDraw(settings);\n    });\n    // Update node value whenever anything changes the table's length\n    $(settings.nTable).on(\"length.dt.DT\", function(e, s, len) {\n        if (settings === s) {\n            $(\"select\", div).val(len);\n            // Resolve plurals in the text for the new length\n            updateEntries(len);\n        }\n    });\n    updateEntries(settings._iDisplayLength);\n    return div;\n}, \"l\");\n// jQuery access\n$.fn.dataTable = DataTable;\n// Provide access to the host jQuery object (circular reference)\nDataTable.$ = $;\n// Legacy aliases\n$.fn.dataTableSettings = DataTable.settings;\n$.fn.dataTableExt = DataTable.ext;\n// With a capital `D` we return a DataTables API instance rather than a\n// jQuery object\n$.fn.DataTable = function(opts) {\n    return $(this).dataTable(opts).api();\n};\n// All properties that are available to $.fn.dataTable should also be\n// available on $.fn.DataTable\n$.each(DataTable, function(prop, val) {\n    $.fn.DataTable[prop] = val;\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DataTable);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/datatables.net/js/dataTables.mjs\n");

/***/ })

};
;