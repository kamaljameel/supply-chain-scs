"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/datatables.net-select";
exports.ids = ["vendor-chunks/datatables.net-select"];
exports.modules = {

/***/ "(ssr)/./node_modules/datatables.net-select/js/dataTables.select.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/datatables.net-select/js/dataTables.select.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var datatables_net__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! datatables.net */ \"(ssr)/./node_modules/datatables.net/js/dataTables.mjs\");\n/*! Select for DataTables 3.0.0\n * Â© SpryMedia Ltd - datatables.net/license/mit\n */\n\n\n\n\n// Allow reassignment of the $ variable\nlet $ = jquery__WEBPACK_IMPORTED_MODULE_0__;\n\n\n// Version information for debugger\ndatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select = {};\n\ndatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select.classes = {\n\tcheckbox: 'dt-select-checkbox'\n};\n\ndatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select.version = '3.0.0';\n\ndatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select.init = function (dt) {\n\tvar ctx = dt.settings()[0];\n\n\tif (!datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].versionCheck('2')) {\n\t\tthrow 'Warning: Select requires DataTables 2 or newer';\n\t}\n\n\tif (ctx._select) {\n\t\treturn;\n\t}\n\n\tvar savedSelected = dt.state.loaded();\n\n\tvar selectAndSave = function (e, settings, data) {\n\t\tif (data === null || data.select === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Clear any currently selected rows, before restoring state\n\t\t// None will be selected on first initialisation\n\t\tif (dt.rows({ selected: true }).any()) {\n\t\t\tdt.rows().deselect();\n\t\t}\n\t\tif (data.select.rows !== undefined) {\n\t\t\tdt.rows(data.select.rows).select();\n\t\t}\n\n\t\tif (dt.columns({ selected: true }).any()) {\n\t\t\tdt.columns().deselect();\n\t\t}\n\t\tif (data.select.columns !== undefined) {\n\t\t\tdt.columns(data.select.columns).select();\n\t\t}\n\n\t\tif (dt.cells({ selected: true }).any()) {\n\t\t\tdt.cells().deselect();\n\t\t}\n\t\tif (data.select.cells !== undefined) {\n\t\t\tfor (var i = 0; i < data.select.cells.length; i++) {\n\t\t\t\tdt.cell(data.select.cells[i].row, data.select.cells[i].column).select();\n\t\t\t}\n\t\t}\n\n\t\tdt.state.save();\n\t};\n\n\tdt.on('stateSaveParams', function (e, settings, data) {\n\t\tdata.select = {};\n\t\tdata.select.rows = dt.rows({ selected: true }).ids(true).toArray();\n\t\tdata.select.columns = dt.columns({ selected: true })[0];\n\t\tdata.select.cells = dt.cells({ selected: true })[0].map(function (coords) {\n\t\t\treturn { row: dt.row(coords.row).id(true), column: coords.column };\n\t\t});\n\t})\n\t\t.on('stateLoadParams', selectAndSave)\n\t\t.one('init', function () {\n\t\t\tselectAndSave(undefined, undefined, savedSelected);\n\t\t});\n\n\tvar init = ctx.oInit.select;\n\tvar defaults = datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].defaults.select;\n\tvar opts = init === undefined ? defaults : init;\n\n\t// Set defaults\n\tvar items = 'row';\n\tvar style = 'api';\n\tvar blurable = false;\n\tvar toggleable = true;\n\tvar selectable = null;\n\tvar info = true;\n\tvar selector = 'td, th';\n\tvar className = 'selected';\n\tvar headerCheckbox = true;\n\tvar setStyle = false;\n\tvar keys = false;\n\n\tctx._select = {\n\t\tinfoEls: []\n\t};\n\n\t// Initialisation customisations\n\tif (opts === true) {\n\t\tstyle = 'os';\n\t\tsetStyle = true;\n\t}\n\telse if (typeof opts === 'string') {\n\t\tstyle = opts;\n\t\tsetStyle = true;\n\t}\n\telse if ($.isPlainObject(opts)) {\n\t\tif (opts.blurable !== undefined) {\n\t\t\tblurable = opts.blurable;\n\t\t}\n\n\t\tif (opts.toggleable !== undefined) {\n\t\t\ttoggleable = opts.toggleable;\n\t\t}\n\n\t\tif (opts.info !== undefined) {\n\t\t\tinfo = opts.info;\n\t\t}\n\n\t\tif (opts.items !== undefined) {\n\t\t\titems = opts.items;\n\t\t}\n\n\t\tif (opts.style !== undefined) {\n\t\t\tstyle = opts.style;\n\t\t\tsetStyle = true;\n\t\t}\n\t\telse {\n\t\t\tstyle = 'os';\n\t\t\tsetStyle = true;\n\t\t}\n\n\t\tif (opts.selector !== undefined) {\n\t\t\tselector = opts.selector;\n\t\t}\n\n\t\tif (opts.className !== undefined) {\n\t\t\tclassName = opts.className;\n\t\t}\n\n\t\tif (opts.headerCheckbox !== undefined) {\n\t\t\theaderCheckbox = opts.headerCheckbox;\n\t\t}\n\n\t\tif (opts.selectable !== undefined) {\n\t\t\tselectable = opts.selectable;\n\t\t}\n\n\t\tif (opts.keys !== undefined) {\n\t\t\tkeys = opts.keys;\n\t\t}\n\t}\n\n\tdt.select.selector(selector);\n\tdt.select.items(items);\n\tdt.select.style(style);\n\tdt.select.blurable(blurable);\n\tdt.select.toggleable(toggleable);\n\tdt.select.info(info);\n\tdt.select.keys(keys);\n\tdt.select.selectable(selectable);\n\tctx._select.className = className;\n\n\t// If the init options haven't enabled select, but there is a selectable\n\t// class name, then enable\n\tif (!setStyle && $(dt.table().node()).hasClass('selectable')) {\n\t\tdt.select.style('os');\n\t}\n\n\t// Insert a checkbox into the header if needed - might need to wait\n\t// for init complete\n\tif (headerCheckbox || headerCheckbox === 'select-page' || headerCheckbox === 'select-all') {\n\t\tdt.ready(function () {\n\t\t\tinitCheckboxHeader(dt, headerCheckbox);\n\t\t});\n\t}\n};\n\n/*\n\nSelect is a collection of API methods, event handlers, event emitters and\nbuttons (for the `Buttons` extension) for DataTables. It provides the following\nfeatures, with an overview of how they are implemented:\n\n## Selection of rows, columns and cells. Whether an item is selected or not is\n   stored in:\n\n* rows: a `_select_selected` property which contains a boolean value of the\n  DataTables' `aoData` object for each row\n* columns: a `_select_selected` property which contains a boolean value of the\n  DataTables' `aoColumns` object for each column\n* cells: a `_selected_cells` property which contains an array of boolean values\n  of the `aoData` object for each row. The array is the same length as the\n  columns array, with each element of it representing a cell.\n\nThis method of using boolean flags allows Select to operate when nodes have not\nbeen created for rows / cells (DataTables' defer rendering feature).\n\n## API methods\n\nA range of API methods are available for triggering selection and de-selection\nof rows. Methods are also available to configure the selection events that can\nbe triggered by an end user (such as which items are to be selected). To a large\nextent, these of API methods *is* Select. It is basically a collection of helper\nfunctions that can be used to select items in a DataTable.\n\nConfiguration of select is held in the object `_select` which is attached to the\nDataTables settings object on initialisation. Select being available on a table\nis not optional when Select is loaded, but its default is for selection only to\nbe available via the API - so the end user wouldn't be able to select rows\nwithout additional configuration.\n\nThe `_select` object contains the following properties:\n\n```\n{\n\titems:string       - Can be `rows`, `columns` or `cells`. Defines what item \n\t                     will be selected if the user is allowed to activate row\n\t                     selection using the mouse.\n\tstyle:string       - Can be `none`, `single`, `multi` or `os`. Defines the\n\t                     interaction style when selecting items\n\tblurable:boolean   - If row selection can be cleared by clicking outside of\n\t                     the table\n\ttoggleable:boolean - If row selection can be cancelled by repeated clicking\n\t                     on the row\n\tinfo:boolean       - If the selection summary should be shown in the table\n\t                     information elements\n\tinfoEls:element[]  - List of HTML elements with info elements for a table\n}\n```\n\nIn addition to the API methods, Select also extends the DataTables selector\noptions for rows, columns and cells adding a `selected` option to the selector\noptions object, allowing the developer to select only selected items or\nunselected items.\n\n## Mouse selection of items\n\nClicking on items can be used to select items. This is done by a simple event\nhandler that will select the items using the API methods.\n\n */\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Local functions\n */\n\n/**\n * Add one or more cells to the selection when shift clicking in OS selection\n * style cell selection.\n *\n * Cell range is more complicated than row and column as we want to select\n * in the visible grid rather than by index in sequence. For example, if you\n * click first in cell 1-1 and then shift click in 2-2 - cells 1-2 and 2-1\n * should also be selected (and not 1-3, 1-4. etc)\n *\n * @param  {DataTable.Api} dt   DataTable\n * @param  {object}        idx  Cell index to select to\n * @param  {object}        last Cell index to select from\n * @private\n */\nfunction cellRange(dt, idx, last) {\n\tvar indexes;\n\tvar columnIndexes;\n\tvar rowIndexes;\n\tvar selectColumns = function (start, end) {\n\t\tif (start > end) {\n\t\t\tvar tmp = end;\n\t\t\tend = start;\n\t\t\tstart = tmp;\n\t\t}\n\n\t\tvar record = false;\n\t\treturn dt\n\t\t\t.columns(':visible')\n\t\t\t.indexes()\n\t\t\t.filter(function (i) {\n\t\t\t\tif (i === start) {\n\t\t\t\t\trecord = true;\n\t\t\t\t}\n\n\t\t\t\tif (i === end) {\n\t\t\t\t\t// not else if, as start might === end\n\t\t\t\t\trecord = false;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn record;\n\t\t\t});\n\t};\n\n\tvar selectRows = function (start, end) {\n\t\tvar indexes = dt.rows({ search: 'applied' }).indexes();\n\n\t\t// Which comes first - might need to swap\n\t\tif (indexes.indexOf(start) > indexes.indexOf(end)) {\n\t\t\tvar tmp = end;\n\t\t\tend = start;\n\t\t\tstart = tmp;\n\t\t}\n\n\t\tvar record = false;\n\t\treturn indexes.filter(function (i) {\n\t\t\tif (i === start) {\n\t\t\t\trecord = true;\n\t\t\t}\n\n\t\t\tif (i === end) {\n\t\t\t\trecord = false;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn record;\n\t\t});\n\t};\n\n\tif (!dt.cells({ selected: true }).any() && !last) {\n\t\t// select from the top left cell to this one\n\t\tcolumnIndexes = selectColumns(0, idx.column);\n\t\trowIndexes = selectRows(0, idx.row);\n\t}\n\telse {\n\t\t// Get column indexes between old and new\n\t\tcolumnIndexes = selectColumns(last.column, idx.column);\n\t\trowIndexes = selectRows(last.row, idx.row);\n\t}\n\n\tindexes = dt.cells(rowIndexes, columnIndexes).flatten();\n\n\tif (!dt.cells(idx, { selected: true }).any()) {\n\t\t// Select range\n\t\tdt.cells(indexes).select();\n\t}\n\telse {\n\t\t// Deselect range\n\t\tdt.cells(indexes).deselect();\n\t}\n}\n\n/**\n * Get the class\n * @returns \n */\nfunction checkboxClass(selector) {\n\tvar name = datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select.classes.checkbox;\n\n\treturn selector\n\t\t? name.replace(/ /g, '.')\n\t\t: name;\n}\n\n/**\n * Disable mouse selection by removing the selectors\n *\n * @param {DataTable.Api} dt DataTable to remove events from\n * @private\n */\nfunction disableMouseSelection(dt) {\n\tvar ctx = dt.settings()[0];\n\tvar selector = ctx._select.selector;\n\n\t$(dt.table().container())\n\t\t.off('mousedown.dtSelect', selector)\n\t\t.off('mouseup.dtSelect', selector)\n\t\t.off('click.dtSelect', selector);\n\n\t$('body').off('click.dtSelect' + _safeId(dt.table().node()));\n}\n\n/**\n * Attach mouse listeners to the table to allow mouse selection of items\n *\n * @param {DataTable.Api} dt DataTable to remove events from\n * @private\n */\nfunction enableMouseSelection(dt) {\n\tvar container = $(dt.table().container());\n\tvar ctx = dt.settings()[0];\n\tvar selector = ctx._select.selector;\n\tvar matchSelection;\n\n\tcontainer\n\t\t.on('mousedown.dtSelect', selector, function (e) {\n\t\t\t// Disallow text selection for shift clicking on the table so multi\n\t\t\t// element selection doesn't look terrible!\n\t\t\tif (e.shiftKey || e.metaKey || e.ctrlKey) {\n\t\t\t\tcontainer\n\t\t\t\t\t.css('-moz-user-select', 'none')\n\t\t\t\t\t.one('selectstart.dtSelect', selector, function () {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (window.getSelection) {\n\t\t\t\tmatchSelection = window.getSelection();\n\t\t\t}\n\t\t})\n\t\t.on('mouseup.dtSelect', selector, function () {\n\t\t\t// Allow text selection to occur again, Mozilla style (tested in FF\n\t\t\t// 35.0.1 - still required)\n\t\t\tcontainer.css('-moz-user-select', '');\n\t\t})\n\t\t.on('click.dtSelect', selector, function (e) {\n\t\t\tvar items = dt.select.items();\n\t\t\tvar idx;\n\n\t\t\t// If text was selected (click and drag), then we shouldn't change\n\t\t\t// the row's selected state\n\t\t\tif (matchSelection) {\n\t\t\t\tvar selection = window.getSelection();\n\n\t\t\t\t// If the element that contains the selection is not in the table, we can ignore it\n\t\t\t\t// This can happen if the developer selects text from the click event\n\t\t\t\tif (\n\t\t\t\t\t!selection.anchorNode ||\n\t\t\t\t\t$(selection.anchorNode).closest('table')[0] === dt.table().node()\n\t\t\t\t) {\n\t\t\t\t\tif (selection !== matchSelection) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar ctx = dt.settings()[0];\n\t\t\tvar container = dt.table().container();\n\n\t\t\t// Ignore clicks inside a sub-table\n\t\t\tif ($(e.target).closest('div.dt-container')[0] != container) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar cell = dt.cell($(e.target).closest('td, th'));\n\n\t\t\t// Check the cell actually belongs to the host DataTable (so child\n\t\t\t// rows, etc, are ignored)\n\t\t\tif (!cell.any()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar event = $.Event('user-select.dt');\n\t\t\teventTrigger(dt, event, [items, cell, e]);\n\n\t\t\tif (event.isDefaultPrevented()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar cellIndex = cell.index();\n\t\t\tif (items === 'row') {\n\t\t\t\tidx = cellIndex.row;\n\t\t\t\ttypeSelect(e, dt, ctx, 'row', idx);\n\t\t\t}\n\t\t\telse if (items === 'column') {\n\t\t\t\tidx = cell.index().column;\n\t\t\t\ttypeSelect(e, dt, ctx, 'column', idx);\n\t\t\t}\n\t\t\telse if (items === 'cell') {\n\t\t\t\tidx = cell.index();\n\t\t\t\ttypeSelect(e, dt, ctx, 'cell', idx);\n\t\t\t}\n\n\t\t\tctx._select_lastCell = cellIndex;\n\t\t});\n\n\t// Blurable\n\t$('body').on('click.dtSelect' + _safeId(dt.table().node()), function (e) {\n\t\tif (ctx._select.blurable) {\n\t\t\t// If the click was inside the DataTables container, don't blur\n\t\t\tif ($(e.target).parents().filter(dt.table().container()).length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore elements which have been removed from the DOM (i.e. paging\n\t\t\t// buttons)\n\t\t\tif ($(e.target).parents('html').length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't blur in Editor form\n\t\t\tif ($(e.target).parents('div.DTE').length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar event = $.Event('select-blur.dt');\n\t\t\teventTrigger(dt, event, [e.target, e]);\n\n\t\t\tif (event.isDefaultPrevented()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tclear(ctx, true);\n\t\t}\n\t});\n}\n\n/**\n * Trigger an event on a DataTable\n *\n * @param {DataTable.Api} api      DataTable to trigger events on\n * @param  {boolean}      selected true if selected, false if deselected\n * @param  {string}       type     Item type acting on\n * @param  {boolean}      any      Require that there are values before\n *     triggering\n * @private\n */\nfunction eventTrigger(api, type, args, any) {\n\tif (any && !api.flatten().length) {\n\t\treturn;\n\t}\n\n\tif (typeof type === 'string') {\n\t\ttype = type + '.dt';\n\t}\n\n\targs.unshift(api);\n\n\t$(api.table().node()).trigger(type, args);\n}\n\n/**\n * Determine if a column is a checkbox column\n * @param {*} col DataTables column object\n * @returns \n */\nfunction isCheckboxColumn(col) {\n\treturn col.mRender && col.mRender._name === 'selectCheckbox';\n}\n\n/**\n * Update the information element of the DataTable showing information about the\n * items selected. This is done by adding tags to the existing text\n *\n * @param {DataTable.Api} api DataTable to update\n * @private\n */\nfunction info(api, node) {\n\tif (api.select.style() === 'api' || api.select.info() === false) {\n\t\treturn;\n\t}\n\n\tvar ctx = api.settings()[0];\n\tvar rowSetLength = ctx._select_set.length;\n\tvar rows = rowSetLength ? rowSetLength : api.rows({ selected: true }).count();\n\tvar columns = api.columns({ selected: true }).count();\n\tvar cells = api.cells({ selected: true }).count();\n\n\t// If subtractive selection, then we need to take the number of rows and\n\t// subtract those that have been deselected\n\tif (ctx._select_mode === 'subtractive') {\n\t\trows = api.page.info().recordsDisplay - rowSetLength;\n\t}\n\n\tvar add = function (el, name, num) {\n\t\tel.append(\n\t\t\t$('<span class=\"select-item\"/>').append(\n\t\t\t\tapi.i18n(\n\t\t\t\t\t'select.' + name + 's',\n\t\t\t\t\t{ _: '%d ' + name + 's selected', 0: '', 1: '1 ' + name + ' selected' },\n\t\t\t\t\tnum\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t};\n\n\tvar el = $(node);\n\tvar output = $('<span class=\"select-info\"/>');\n\n\tadd(output, 'row', rows);\n\tadd(output, 'column', columns);\n\tadd(output, 'cell', cells);\n\n\tvar existing = el.children('span.select-info');\n\n\tif (existing.length) {\n\t\texisting.remove();\n\t}\n\n\tif (output.text() !== '') {\n\t\tel.append(output);\n\t}\n}\n\n/**\n * Add a checkbox to the header for checkbox columns, allowing all rows to\n * be selected, deselected or just to show the state.\n *\n * @param {*} dt API\n * @param {*} headerCheckbox the header checkbox option\n */\nfunction initCheckboxHeader( dt, headerCheckbox ) {\n\tvar dtSettings = dt.settings()[0];\n\tvar dtInternalColumns = dtSettings.aoColumns;\n\n\t// Find any checkbox column(s)\n\tdt.columns().iterator('column', function (s, idx) {\n\t\tvar col = dtInternalColumns[idx];\n\n\t\t// Checkbox columns have a rendering function with a given name\n\t\tif (! isCheckboxColumn(col)) {\n\t\t\treturn;\n\t\t}\n\t\tvar header = dt.column(idx).header();\n\n\t\tif (! $('input', header).length) {\n\t\t\t// If no checkbox yet, insert one\n\t\t\tvar input = $('<input>')\n\t\t\t\t.attr({\n\t\t\t\t\tclass: checkboxClass(true),\n\t\t\t\t\ttype: 'checkbox',\n\t\t\t\t\t'aria-label': dt.i18n('select.aria.headerCheckbox') || 'Select all rows'\n\t\t\t\t})\n\t\t\t\t.appendTo(header)\n\t\t\t\t.on('change', function () {\n\t\t\t\t\tif (this.checked) {\n\t\t\t\t\t\tif (headerCheckbox == 'select-page') {\n\t\t\t\t\t\t\tdt.rows({page: 'current'}).select();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdt.rows({search: 'applied'}).select();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (headerCheckbox == 'select-page') {\n\t\t\t\t\t\t\tdt.rows({page: 'current', selected: true}).deselect();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdt.rows({selected: true}).deselect();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.on('click', function (e) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t});\n\n\t\t\t// Update the header checkbox's state when the selection in the\n\t\t\t// table changes\n\t\t\tdt.on('draw select deselect', function (e, pass, type) {\n\t\t\t\tif (type === 'row' || ! type) {\n\t\t\t\t\tvar nums = headerCheckboxState(dt, headerCheckbox);\n\n\t\t\t\t\tif (nums.search && nums.search <= nums.count && nums.search === nums.available) {\n\t\t\t\t\t\tinput\n\t\t\t\t\t\t\t.prop('checked', true)\n\t\t\t\t\t\t\t.prop('indeterminate', false);\n\t\t\t\t\t}\n\t\t\t\t\telse if (nums.search === 0 && nums.count === 0) {\n\t\t\t\t\t\tinput\n\t\t\t\t\t\t\t.prop('checked', false)\n\t\t\t\t\t\t\t.prop('indeterminate', false);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tinput\n\t\t\t\t\t\t\t.prop('checked', false)\n\t\t\t\t\t\t\t.prop('indeterminate', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction keysSet(dt) {\n\tvar ctx = dt.settings()[0];\n\tvar flag = ctx._select.keys;\n\tvar namespace = 'dts-keys-' + ctx.sTableId;\n\n\tif (flag) {\n\t\t// Need a tabindex of the `tr` elements to make them focusable by the browser\n\t\t$(dt.rows({page: 'current'}).nodes()).attr('tabindex', 0);\n\n\t\tdt.on('draw.' + namespace, function () {\n\t\t\t$(dt.rows({page: 'current'}).nodes()).attr('tabindex', 0);\n\t\t});\n\n\t\t// Listen on document for tab, up and down\n\t\t$(document).on('keydown.' + namespace, function (e) {\n\t\t\tvar key = e.keyCode;\n\t\t\tvar active = document.activeElement;\n\n\t\t\t// Can't use e.key as it wasn't widely supported until 2017\n\t\t\t// 9 Tab\n\t\t\t// 13 Return\n\t\t\t// 32 Space\n\t\t\t// 38 ArrowUp\n\t\t\t// 40 ArrowDown\n\t\t\tif (! [9, 13, 32, 38, 40].includes(key)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar nodes = dt.rows({page: 'current'}).nodes().toArray();\n\t\t\tvar idx = nodes.indexOf(active);\n\t\t\tvar preventDefault = true;\n\n\t\t\t// Only take an action if a row has focus\n\t\t\tif (idx === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (key === 9) {\n\t\t\t\t// Tab focus change\n\t\t\t\tif (e.shift === false && idx === nodes.length - 1) {\n\t\t\t\t\tkeysPageDown(dt);\n\t\t\t\t}\n\t\t\t\telse if (e.shift === true && idx === 0) {\n\t\t\t\t\tkeysPageUp(dt);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Browser will do it for us\n\t\t\t\t\tpreventDefault = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (key === 13 || key === 32) {\n\t\t\t\t// Row selection / deselection\n\t\t\t\tvar row = dt.row(active);\n\n\t\t\t\tif (row.selected()) {\n\t\t\t\t\trow.deselect();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trow.select();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (key === 38) {\n\t\t\t\t// Move up\n\t\t\t\tif (idx > 0) {\n\t\t\t\t\tnodes[idx-1].focus();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tkeysPageUp(dt);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Move down\n\t\t\t\tif (idx < nodes.length -1) {\n\t\t\t\t\tnodes[idx+1].focus();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tkeysPageDown(dt);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (preventDefault) {\n\t\t\t\te.stopPropagation();\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t});\n\t}\n\telse {\n\t\t// Stop the rows from being able to gain focus\n\t\t$(dt.rows().nodes()).removeAttr('tabindex');\n\n\t\t// Nuke events\n\t\tdt.off('draw.' + namespace);\n\t\t$(document).off('keydown.' + namespace);\n\t}\n}\n\n/**\n * Change to the next page and focus on the first row\n *\n * @param {DataTable.Api} dt DataTable instance\n */\nfunction keysPageDown(dt) {\n\t// Is there another page to turn to?\n\tvar info = dt.page.info();\n\n\tif (info.page < info.pages - 1) {\n\t\tdt\n\t\t\t.one('draw', function () {\n\t\t\t\tdt.row(':first-child').node().focus();\n\t\t\t})\n\t\t\t.page('next')\n\t\t\t.draw(false);\n\t}\n}\n\n/**\n * Change to the previous page and focus on the last row\n *\n * @param {DataTable.Api} dt DataTable instance\n */\nfunction keysPageUp(dt) {\n\t// Is there another page to turn to?\n\tvar info = dt.page.info();\n\n\tif (info.page > 0) {\n\t\tdt\n\t\t\t.one('draw', function () {\n\t\t\t\tdt.row(':last-child').node().focus();\n\t\t\t})\n\t\t\t.page('previous')\n\t\t\t.draw(false);\n\t}\n}\n\n/**\n * Determine the counts used to define the header checkbox's state\n *\n * @param {*} dt DT API\n * @param {*} headerCheckbox Configuration for what the header checkbox does\n * @returns Counts object\n */\nfunction headerCheckboxState(dt, headerCheckbox) {\n\tvar ctx = dt.settings()[0];\n\tvar selectable = ctx._select.selectable;\n\tvar available = 0;\n\tvar count = headerCheckbox == 'select-page'\n\t\t? dt.rows({page: 'current', selected: true}).count()\n\t\t: dt.rows({selected: true}).count();\n\tvar search = headerCheckbox == 'select-page'\n\t\t? dt.rows({page: 'current', selected: true}).count()\n\t\t: dt.rows({search: 'applied', selected: true}).count();\n\n\tif (! selectable) {\n\t\tavailable = headerCheckbox == 'select-page'\n\t\t\t? dt.rows({page: 'current'}).count()\n\t\t\t: dt.rows({search: 'applied'}).count();\t\n\t}\n\telse {\n\t\t// Need to count how many rows are actually selectable to know if all selectable\n\t\t// rows are selected or not\n\t\tvar indexes = headerCheckbox == 'select-page'\n\t\t\t? dt.rows({page: 'current'}).indexes()\n\t\t\t: dt.rows({search: 'applied'}).indexes();\n\n\t\tfor (var i=0 ; i<indexes.length ; i++) {\n\t\t\t// For speed I use the internal DataTables object.\n\t\t\tvar rowInternal = ctx.aoData[indexes[i]];\n\t\t\tvar result = selectable(rowInternal._aData, rowInternal.nTr, indexes[i]);\n\n\t\t\tif (result) {\n\t\t\t\tavailable++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tavailable: available,\n\t\tcount: count,\n\t\tsearch: search\n\t}\n}\n\n/**\n * Initialisation of a new table. Attach event handlers and callbacks to allow\n * Select to operate correctly.\n *\n * This will occur _after_ the initial DataTables initialisation, although\n * before Ajax data is rendered, if there is ajax data\n *\n * @param  {DataTable.settings} ctx Settings object to operate on\n * @private\n */\nfunction init(ctx) {\n\tvar api = new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx);\n\tctx._select_init = true;\n\n\t// When `additive` then `_select_set` contains a list of the row ids that\n\t// are selected. If `subtractive` then all rows are selected, except those\n\t// in `_select_set`, which is a list of ids.\n\tctx._select_mode = 'additive';\n\tctx._select_set = [];\n\n\t// Row callback so that classes can be added to rows and cells if the item\n\t// was selected before the element was created. This will happen with the\n\t// `deferRender` option enabled.\n\t//\n\t// This method of attaching to `aoRowCreatedCallback` is a hack until\n\t// DataTables has proper events for row manipulation If you are reviewing\n\t// this code to create your own plug-ins, please do not do this!\n\tctx.aoRowCreatedCallback.push(function (row, data, index) {\n\t\t\tvar i, ien;\n\t\t\tvar d = ctx.aoData[index];\n\t\t\tvar id = api.row(index).id();\n\n\t\t\t// Row\n\t\t\tif (\n\t\t\t\td._select_selected ||\n\t\t\t\t(ctx._select_mode === 'additive' && ctx._select_set.includes(id)) ||\n\t\t\t\t(ctx._select_mode === 'subtractive' && ! ctx._select_set.includes(id))\n\t\t\t) {\n\t\t\t\td._select_selected = true;\n\n\t\t\t\t$(row)\n\t\t\t\t\t.addClass(ctx._select.className)\n\t\t\t\t\t.find('input.' + checkboxClass(true)).prop('checked', true);\n\t\t\t}\n\n\t\t\t// Cells and columns - if separated out, we would need to do two\n\t\t\t// loops, so it makes sense to combine them into a single one\n\t\t\tfor (i = 0, ien = ctx.aoColumns.length; i < ien; i++) {\n\t\t\t\tif (\n\t\t\t\t\tctx.aoColumns[i]._select_selected ||\n\t\t\t\t\t(d._selected_cells && d._selected_cells[i])\n\t\t\t\t) {\n\t\t\t\t\t$(d.anCells[i]).addClass(ctx._select.className)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t);\n\n\t_cumulativeEvents(api);\n\n\t// Update the table information element with selected item summary\n\tapi.on('info.dt', function (e, ctx, node) {\n\t\t// Store the info node for updating on select / deselect\n\t\tif (!ctx._select.infoEls.includes(node)) {\n\t\t\tctx._select.infoEls.push(node);\n\t\t}\n\n\t\tinfo(api, node);\n\t});\n\n\tapi.on('select.dtSelect.dt deselect.dtSelect.dt', function () {\n\t\tctx._select.infoEls.forEach(function (el) {\n\t\t\tinfo(api, el);\n\t\t});\n\n\t\tapi.state.save();\n\t});\n\n\t// Clean up and release\n\tapi.on('destroy.dtSelect', function () {\n\t\t// Remove class directly rather than calling deselect - which would trigger events\n\t\t$(api.rows({ selected: true }).nodes()).removeClass(api.settings()[0]._select.className);\n\n\t\t$('input.' + checkboxClass(true), api.table().header()).remove();\n\n\t\tdisableMouseSelection(api);\n\t\tapi.off('.dtSelect');\n\t\t$('body').off('.dtSelect' + _safeId(api.table().node()));\n\t});\n}\n\n/**\n * Add one or more items (rows or columns) to the selection when shift clicking\n * in OS selection style\n *\n * @param  {DataTable.Api} dt   DataTable\n * @param  {string}        type Row or column range selector\n * @param  {object}        idx  Item index to select to\n * @param  {object}        last Item index to select from\n * @private\n */\nfunction rowColumnRange(dt, type, idx, last) {\n\t// Add a range of rows from the last selected row to this one\n\tvar indexes = dt[type + 's']({ search: 'applied' }).indexes();\n\tvar idx1 = indexes.indexOf(last);\n\tvar idx2 = indexes.indexOf(idx);\n\n\tif (!dt[type + 's']({ selected: true }).any() && idx1 === -1) {\n\t\t// select from top to here - slightly odd, but both Windows and Mac OS\n\t\t// do this\n\t\tindexes.splice(indexes.indexOf(idx) + 1, indexes.length);\n\t}\n\telse {\n\t\t// reverse so we can shift click 'up' as well as down\n\t\tif (idx1 > idx2) {\n\t\t\tvar tmp = idx2;\n\t\t\tidx2 = idx1;\n\t\t\tidx1 = tmp;\n\t\t}\n\n\t\tindexes.splice(idx2 + 1, indexes.length);\n\t\tindexes.splice(0, idx1);\n\t}\n\n\tif (!dt[type](idx, { selected: true }).any()) {\n\t\t// Select range\n\t\tdt[type + 's'](indexes).select();\n\t}\n\telse {\n\t\t// Deselect range - need to keep the clicked on row selected\n\t\tindexes.splice(indexes.indexOf(idx), 1);\n\t\tdt[type + 's'](indexes).deselect();\n\t}\n}\n\n/**\n * Clear all selected items\n *\n * @param  {DataTable.settings} ctx Settings object of the host DataTable\n * @param  {boolean} [force=false] Force the de-selection to happen, regardless\n *     of selection style\n * @private\n */\nfunction clear(ctx, force) {\n\tif (force || ctx._select.style === 'single') {\n\t\tvar api = new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx);\n\n\t\tapi.rows({ selected: true }).deselect();\n\t\tapi.columns({ selected: true }).deselect();\n\t\tapi.cells({ selected: true }).deselect();\n\t}\n}\n\n/**\n * Select items based on the current configuration for style and items.\n *\n * @param  {object}             e    Mouse event object\n * @param  {DataTables.Api}     dt   DataTable\n * @param  {DataTable.settings} ctx  Settings object of the host DataTable\n * @param  {string}             type Items to select\n * @param  {int|object}         idx  Index of the item to select\n * @private\n */\nfunction typeSelect(e, dt, ctx, type, idx) {\n\tvar style = dt.select.style();\n\tvar toggleable = dt.select.toggleable();\n\tvar isSelected = dt[type](idx, { selected: true }).any();\n\n\tif (isSelected && !toggleable) {\n\t\treturn;\n\t}\n\n\tif (style === 'os') {\n\t\tif (e.ctrlKey || e.metaKey) {\n\t\t\t// Add or remove from the selection\n\t\t\tdt[type](idx).select(!isSelected);\n\t\t}\n\t\telse if (e.shiftKey) {\n\t\t\tif (type === 'cell') {\n\t\t\t\tcellRange(dt, idx, ctx._select_lastCell || null);\n\t\t\t}\n\t\t\telse {\n\t\t\t\trowColumnRange(\n\t\t\t\t\tdt,\n\t\t\t\t\ttype,\n\t\t\t\t\tidx,\n\t\t\t\t\tctx._select_lastCell ? ctx._select_lastCell[type] : null\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// No cmd or shift click - deselect if selected, or select\n\t\t\t// this row only\n\t\t\tvar selected = dt[type + 's']({ selected: true });\n\n\t\t\tif (isSelected && selected.flatten().length === 1) {\n\t\t\t\tdt[type](idx).deselect();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tselected.deselect();\n\t\t\t\tdt[type](idx).select();\n\t\t\t}\n\t\t}\n\t}\n\telse if (style == 'multi+shift') {\n\t\tif (e.shiftKey) {\n\t\t\tif (type === 'cell') {\n\t\t\t\tcellRange(dt, idx, ctx._select_lastCell || null);\n\t\t\t}\n\t\t\telse {\n\t\t\t\trowColumnRange(\n\t\t\t\t\tdt,\n\t\t\t\t\ttype,\n\t\t\t\t\tidx,\n\t\t\t\t\tctx._select_lastCell ? ctx._select_lastCell[type] : null\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdt[type](idx).select(!isSelected);\n\t\t}\n\t}\n\telse {\n\t\tdt[type](idx).select(!isSelected);\n\t}\n}\n\nfunction _safeId(node) {\n\treturn node.id.replace(/[^a-zA-Z0-9\\-\\_]/g, '-');\n}\n\n/**\n * Set up event handlers for cumulative selection\n *\n * @param {*} api DT API instance\n */\nfunction _cumulativeEvents(api) {\n\t// Add event listeners to add / remove from the _select_set\n\tapi.on('select', function (e, dt, type, indexes) {\n\t\t// Only support for rows at the moment\n\t\tif (type !== 'row') {\n\t\t\treturn;\n\t\t}\n\n\t\tvar ctx = api.settings()[0];\n\n\t\tif (ctx._select_mode === 'additive') {\n\t\t\t// Add row to the selection list if it isn't already there\n\t\t\t_add(api, ctx._select_set, indexes);\n\t\t}\n\t\telse {\n\t\t\t// Subtractive - if a row is selected it should not in the list\n\t\t\t// as in subtractive mode the list gives the rows which are not\n\t\t\t// selected\n\t\t\t_remove(api, ctx._select_set, indexes);\n\t\t}\n\t});\n\n\tapi.on('deselect', function (e, dt, type, indexes) {\n\t\t// Only support for rows at the moment\n\t\tif (type !== 'row') {\n\t\t\treturn;\n\t\t}\n\n\t\tvar ctx = api.settings()[0];\n\n\t\tif (ctx._select_mode === 'additive') {\n\t\t\t// List is of those rows selected, so remove it\n\t\t\t_remove(api, ctx._select_set, indexes);\n\t\t}\n\t\telse {\n\t\t\t// List is of rows which are deselected, so add it!\n\t\t\t_add(api, ctx._select_set, indexes);\n\t\t}\n\t});\n}\n\nfunction _add(api, arr, indexes) {\n\tfor (var i=0 ; i<indexes.length ; i++) {\n\t\tvar id = api.row(indexes[i]).id();\n\n\t\tif (id && id !== 'undefined' && ! arr.includes(id)) {\n\t\t\tarr.push(id);\n\t\t}\n\t}\n}\n\nfunction _remove(api, arr, indexes) {\n\tfor (var i=0 ; i<indexes.length ; i++) {\n\t\tvar id = api.row(indexes[i]).id();\n\t\tvar idx = arr.indexOf(id);\n\n\t\tif (idx !== -1) {\n\t\t\tarr.splice(idx, 1);\n\t\t}\n\t}\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * DataTables selectors\n */\n\n// row and column are basically identical just assigned to different properties\n// and checking a different array, so we can dynamically create the functions to\n// reduce the code size\n$.each(\n\t[\n\t\t{ type: 'row', prop: 'aoData' },\n\t\t{ type: 'column', prop: 'aoColumns' }\n\t],\n\tfunction (i, o) {\n\t\tdatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ext.selector[o.type].push(function (settings, opts, indexes) {\n\t\t\tvar selected = opts.selected;\n\t\t\tvar data;\n\t\t\tvar out = [];\n\n\t\t\tif (selected !== true && selected !== false) {\n\t\t\t\treturn indexes;\n\t\t\t}\n\n\t\t\tfor (var i = 0, ien = indexes.length; i < ien; i++) {\n\t\t\t\tdata = settings[o.prop][indexes[i]];\n\n\t\t\t\tif (\n\t\t\t\t\tdata && (\n\t\t\t\t\t\t(selected === true && data._select_selected === true) ||\n\t\t\t\t\t\t(selected === false && !data._select_selected)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tout.push(indexes[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn out;\n\t\t});\n\t}\n);\n\ndatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ext.selector.cell.push(function (settings, opts, cells) {\n\tvar selected = opts.selected;\n\tvar rowData;\n\tvar out = [];\n\n\tif (selected === undefined) {\n\t\treturn cells;\n\t}\n\n\tfor (var i = 0, ien = cells.length; i < ien; i++) {\n\t\trowData = settings.aoData[cells[i].row];\n\n\t\tif (\n\t\t\trowData && (\n\t\t\t\t(selected === true &&\n\t\t\t\t\trowData._selected_cells &&\n\t\t\t\t\trowData._selected_cells[cells[i].column] === true) ||\n\t\t\t\t(selected === false &&\n\t\t\t\t\t(!rowData._selected_cells || !rowData._selected_cells[cells[i].column]))\n\t\t\t)\n\t\t) {\n\t\t\tout.push(cells[i]);\n\t\t}\n\t}\n\n\treturn out;\n});\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * DataTables API\n *\n * For complete documentation, please refer to the docs/api directory or the\n * DataTables site\n */\n\n// Local variables to improve compression\nvar apiRegister = datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api.register;\nvar apiRegisterPlural = datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api.registerPlural;\n\napiRegister('select()', function () {\n\treturn this.iterator('table', function (ctx) {\n\t\tdatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select.init(new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx));\n\t});\n});\n\napiRegister('select.blurable()', function (flag) {\n\tif (flag === undefined) {\n\t\treturn this.context[0]._select.blurable;\n\t}\n\n\treturn this.iterator('table', function (ctx) {\n\t\tctx._select.blurable = flag;\n\t});\n});\n\napiRegister('select.toggleable()', function (flag) {\n\tif (flag === undefined) {\n\t\treturn this.context[0]._select.toggleable;\n\t}\n\n\treturn this.iterator('table', function (ctx) {\n\t\tctx._select.toggleable = flag;\n\t});\n});\n\napiRegister('select.info()', function (flag) {\n\tif (flag === undefined) {\n\t\treturn this.context[0]._select.info;\n\t}\n\n\treturn this.iterator('table', function (ctx) {\n\t\tctx._select.info = flag;\n\t});\n});\n\napiRegister('select.items()', function (items) {\n\tif (items === undefined) {\n\t\treturn this.context[0]._select.items;\n\t}\n\n\treturn this.iterator('table', function (ctx) {\n\t\tctx._select.items = items;\n\n\t\teventTrigger(new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx), 'selectItems', [items]);\n\t});\n});\n\napiRegister('select.keys()', function (flag) {\n\tif (flag === undefined) {\n\t\treturn this.context[0]._select.keys;\n\t}\n\n\treturn this.iterator('table', function (ctx) {\n\t\tif (!ctx._select) {\n\t\t\tdatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select.init(new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx));\n\t\t}\n\n\t\tctx._select.keys = flag;\n\n\t\tkeysSet(new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx));\n\t});\n});\n\n// Takes effect from the _next_ selection. None disables future selection, but\n// does not clear the current selection. Use the `deselect` methods for that\napiRegister('select.style()', function (style) {\n\tif (style === undefined) {\n\t\treturn this.context[0]._select.style;\n\t}\n\n\treturn this.iterator('table', function (ctx) {\n\t\tif (!ctx._select) {\n\t\t\tdatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select.init(new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx));\n\t\t}\n\n\t\tif (!ctx._select_init) {\n\t\t\tinit(ctx);\n\t\t}\n\n\t\tctx._select.style = style;\n\n\t\t// Add / remove mouse event handlers. They aren't required when only\n\t\t// API selection is available\n\t\tvar dt = new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx);\n\n\t\tif (style !== 'api') {\n\t\t\tdt.ready(function () {\n\t\t\t\tdisableMouseSelection(dt);\n\t\t\t\tenableMouseSelection(dt);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tdisableMouseSelection(dt);\n\t\t}\n\n\t\teventTrigger(new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx), 'selectStyle', [style]);\n\t});\n});\n\napiRegister('select.selector()', function (selector) {\n\tif (selector === undefined) {\n\t\treturn this.context[0]._select.selector;\n\t}\n\n\treturn this.iterator('table', function (ctx) {\n\t\tvar dt = new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx);\n\t\tvar style = ctx._select.style;\n\n\t\tdisableMouseSelection(dt);\n\n\t\tctx._select.selector = selector;\n\n\t\tif (style && style !== 'api') {\n\t\t\tdt.ready(function () {\n\t\t\t\tdisableMouseSelection(dt);\n\t\t\t\tenableMouseSelection(dt);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tdisableMouseSelection(dt);\n\t\t}\n\t});\n});\n\napiRegister('select.selectable()', function (set) {\n\tlet ctx = this.context[0];\n\n\tif (set) {\n\t\tctx._select.selectable = set;\n\t\treturn this;\n\t}\n\n\treturn ctx._select.selectable;\n});\n\napiRegister('select.last()', function (set) {\n\tlet ctx = this.context[0];\n\n\tif (set) {\n\t\tctx._select_lastCell = set;\n\t\treturn this;\n\t}\n\n\treturn ctx._select_lastCell;\n});\n\napiRegister('select.cumulative()', function (mode) {\n\tif (mode) {\n\t\treturn this.iterator('table', function (ctx) {\n\t\t\tif (ctx._select_mode === mode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar dt = new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx);\n\n\t\t\t// Convert from the current mode, to the new\n\t\t\tif (mode === 'subtractive') {\n\t\t\t\t// For subtractive mode we track the row ids which are not selected\n\t\t\t\tvar unselected = dt.rows({selected: false}).ids().toArray();\n\n\t\t\t\tctx._select_mode = mode;\n\t\t\t\tctx._select_set.length = 0;\n\t\t\t\tctx._select_set.push.apply(ctx._select_set, unselected);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Switching to additive, so selected rows are to be used\n\t\t\t\tvar selected = dt.rows({selected: true}).ids().toArray();\n\n\t\t\t\tctx._select_mode = mode;\n\t\t\t\tctx._select_set.length = 0;\n\t\t\t\tctx._select_set.push.apply(ctx._select_set, selected);\n\t\t\t}\n\t\t}).draw(false);\n\t}\n\n\tlet ctx = this.context[0];\n\n\tif (ctx && ctx._select_set) {\n\t\treturn {\n\t\t\tmode: ctx._select_mode,\n\t\t\trows: ctx._select_set\n\t\t};\n\t}\n\n\treturn null;\n});\n\napiRegisterPlural('rows().select()', 'row().select()', function (select) {\n\tvar api = this;\n\tvar selectedIndexes = [];\n\n\tif (select === false) {\n\t\treturn this.deselect();\n\t}\n\n\tthis.iterator('row', function (ctx, idx) {\n\t\tclear(ctx);\n\n\t\t// There is a good amount of knowledge of DataTables internals in\n\t\t// this function. It _could_ be done without that, but it would hurt\n\t\t// performance (or DT would need new APIs for this work)\n\t\tvar dtData = ctx.aoData[idx];\n\t\tvar dtColumns = ctx.aoColumns;\n\n\t\tif (ctx._select.selectable) {\n\t\t\tvar result = ctx._select.selectable(dtData._aData, dtData.nTr, idx);\n\n\t\t\tif (result === false) {\n\t\t\t\t// Not selectable - do nothing\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t$(dtData.nTr).addClass(ctx._select.className);\n\t\tdtData._select_selected = true;\n\n\t\tselectedIndexes.push(idx);\n\n\t\tfor (var i=0 ; i<dtColumns.length ; i++) {\n\t\t\tvar col = dtColumns[i];\n\n\t\t\t// Regenerate the column type if not present\n\t\t\tif (col.sType === null) {\n\t\t\t\tapi.columns().types()\n\t\t\t}\n\t\t\t\n\t\t\tif (isCheckboxColumn(col)) {\n\t\t\t\tvar cells = dtData.anCells;\n\n\t\t\t\t// Make sure the checkbox shows the right state\n\t\t\t\tif (cells && cells[i]) {\n\t\t\t\t\t$('input.' + checkboxClass(true), cells[i]).prop('checked', true);\n\t\t\t\t}\n\n\t\t\t\t// Invalidate the sort data for this column, if not already done\n\t\t\t\tif (dtData._aSortData !== null) {\n\t\t\t\t\tdtData._aSortData[i] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.iterator('table', function (ct) {\n\t\teventTrigger(api, 'select', ['row', selectedIndexes], true);\n\t});\n\n\treturn this;\n});\n\napiRegister('row().selected()', function () {\n\tvar ctx = this.context[0];\n\n\tif (ctx && this.length && ctx.aoData[this[0]] && ctx.aoData[this[0]]._select_selected) {\n\t\treturn true;\n\t}\n\n\treturn false;\n});\n\napiRegister('row().focus()', function () {\n\tvar ctx = this.context[0];\n\n\tif (ctx && this.length && ctx.aoData[this[0]] && ctx.aoData[this[0]].nTr) {\n\t\tctx.aoData[this[0]].nTr.focus();\n\t}\n});\n\napiRegister('row().blur()', function () {\n\tvar ctx = this.context[0];\n\n\tif (ctx && this.length && ctx.aoData[this[0]] && ctx.aoData[this[0]].nTr) {\n\t\tctx.aoData[this[0]].nTr.blur();\n\t}\n});\n\napiRegisterPlural('columns().select()', 'column().select()', function (select) {\n\tvar api = this;\n\n\tif (select === false) {\n\t\treturn this.deselect();\n\t}\n\n\tthis.iterator('column', function (ctx, idx) {\n\t\tclear(ctx);\n\n\t\tctx.aoColumns[idx]._select_selected = true;\n\n\t\tvar column = new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx).column(idx);\n\n\t\t$(column.header()).addClass(ctx._select.className);\n\t\t$(column.footer()).addClass(ctx._select.className);\n\n\t\tcolumn.nodes().to$().addClass(ctx._select.className);\n\t});\n\n\tthis.iterator('table', function (ctx, i) {\n\t\teventTrigger(api, 'select', ['column', api[i]], true);\n\t});\n\n\treturn this;\n});\n\napiRegister('column().selected()', function () {\n\tvar ctx = this.context[0];\n\n\tif (ctx && this.length && ctx.aoColumns[this[0]] && ctx.aoColumns[this[0]]._select_selected) {\n\t\treturn true;\n\t}\n\n\treturn false;\n});\n\napiRegisterPlural('cells().select()', 'cell().select()', function (select) {\n\tvar api = this;\n\n\tif (select === false) {\n\t\treturn this.deselect();\n\t}\n\n\tthis.iterator('cell', function (ctx, rowIdx, colIdx) {\n\t\tclear(ctx);\n\n\t\tvar data = ctx.aoData[rowIdx];\n\n\t\tif (data._selected_cells === undefined) {\n\t\t\tdata._selected_cells = [];\n\t\t}\n\n\t\tdata._selected_cells[colIdx] = true;\n\n\t\tif (data.anCells) {\n\t\t\t$(data.anCells[colIdx]).addClass(ctx._select.className);\n\t\t}\n\t});\n\n\tthis.iterator('table', function (ctx, i) {\n\t\teventTrigger(api, 'select', ['cell', api.cells(api[i]).indexes().toArray()], true);\n\t});\n\n\treturn this;\n});\n\napiRegister('cell().selected()', function () {\n\tvar ctx = this.context[0];\n\n\tif (ctx && this.length) {\n\t\tvar row = ctx.aoData[this[0][0].row];\n\n\t\tif (row && row._selected_cells && row._selected_cells[this[0][0].column]) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n});\n\napiRegisterPlural('rows().deselect()', 'row().deselect()', function () {\n\tvar api = this;\n\n\tthis.iterator('row', function (ctx, idx) {\n\t\t// Like the select action, this has a lot of knowledge about DT internally\n\t\tvar dtData = ctx.aoData[idx];\n\t\tvar dtColumns = ctx.aoColumns;\n\n\t\t$(dtData.nTr).removeClass(ctx._select.className);\n\t\tdtData._select_selected = false;\n\t\tctx._select_lastCell = null;\n\n\t\tfor (var i=0 ; i<dtColumns.length ; i++) {\n\t\t\tvar col = dtColumns[i];\n\n\t\t\t// Regenerate the column type if not present\n\t\t\tif (col.sType === null) {\n\t\t\t\tapi.columns().types()\n\t\t\t}\n\t\t\t\n\t\t\tif (isCheckboxColumn(col)) {\n\t\t\t\tvar cells = dtData.anCells;\n\n\t\t\t\t// Make sure the checkbox shows the right state\n\t\t\t\tif (cells && cells[i]) {\n\t\t\t\t\t$('input.' + checkboxClass(true), dtData.anCells[i]).prop('checked', false);\n\t\t\t\t}\n\n\t\t\t\t// Invalidate the sort data for this column, if not already done\n\t\t\t\tif (dtData._aSortData !== null) {\n\t\t\t\t\tdtData._aSortData[i] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.iterator('table', function (ctx, i) {\n\t\teventTrigger(api, 'deselect', ['row', api[i]], true);\n\t});\n\n\treturn this;\n});\n\napiRegisterPlural('columns().deselect()', 'column().deselect()', function () {\n\tvar api = this;\n\n\tthis.iterator('column', function (ctx, idx) {\n\t\tctx.aoColumns[idx]._select_selected = false;\n\n\t\tvar api = new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx);\n\t\tvar column = api.column(idx);\n\n\t\t$(column.header()).removeClass(ctx._select.className);\n\t\t$(column.footer()).removeClass(ctx._select.className);\n\n\t\t// Need to loop over each cell, rather than just using\n\t\t// `column().nodes()` as cells which are individually selected should\n\t\t// not have the `selected` class removed from them\n\t\tapi.cells(null, idx)\n\t\t\t.indexes()\n\t\t\t.each(function (cellIdx) {\n\t\t\t\tvar data = ctx.aoData[cellIdx.row];\n\t\t\t\tvar cellSelected = data._selected_cells;\n\n\t\t\t\tif (data.anCells && (!cellSelected || !cellSelected[cellIdx.column])) {\n\t\t\t\t\t$(data.anCells[cellIdx.column]).removeClass(ctx._select.className);\n\t\t\t\t}\n\t\t\t});\n\t});\n\n\tthis.iterator('table', function (ctx, i) {\n\t\teventTrigger(api, 'deselect', ['column', api[i]], true);\n\t});\n\n\treturn this;\n});\n\napiRegisterPlural('cells().deselect()', 'cell().deselect()', function () {\n\tvar api = this;\n\n\tthis.iterator('cell', function (ctx, rowIdx, colIdx) {\n\t\tvar data = ctx.aoData[rowIdx];\n\n\t\tif (data._selected_cells !== undefined) {\n\t\t\tdata._selected_cells[colIdx] = false;\n\t\t}\n\n\t\t// Remove class only if the cells exist, and the cell is not column\n\t\t// selected, in which case the class should remain (since it is selected\n\t\t// in the column)\n\t\tif (data.anCells && !ctx.aoColumns[colIdx]._select_selected) {\n\t\t\t$(data.anCells[colIdx]).removeClass(ctx._select.className);\n\t\t}\n\t});\n\n\tthis.iterator('table', function (ctx, i) {\n\t\teventTrigger(api, 'deselect', ['cell', api[i]], true);\n\t});\n\n\treturn this;\n});\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Buttons\n */\nfunction i18n(label, def) {\n\treturn function (dt) {\n\t\treturn dt.i18n('buttons.' + label, def);\n\t};\n}\n\n// Common events with suitable namespaces\nfunction namespacedEvents(config) {\n\tvar unique = config._eventNamespace;\n\n\treturn 'draw.dt.DT' + unique + ' select.dt.DT' + unique + ' deselect.dt.DT' + unique;\n}\n\nfunction enabled(dt, config) {\n\tif (config.limitTo.indexOf('rows') !== -1 && dt.rows({ selected: true }).any()) {\n\t\treturn true;\n\t}\n\n\tif (config.limitTo.indexOf('columns') !== -1 && dt.columns({ selected: true }).any()) {\n\t\treturn true;\n\t}\n\n\tif (config.limitTo.indexOf('cells') !== -1 && dt.cells({ selected: true }).any()) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nvar _buttonNamespace = 0;\n\n$.extend(datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ext.buttons, {\n\tselected: {\n\t\ttext: i18n('selected', 'Selected'),\n\t\tclassName: 'buttons-selected',\n\t\tlimitTo: ['rows', 'columns', 'cells'],\n\t\tinit: function (dt, node, config) {\n\t\t\tvar that = this;\n\t\t\tconfig._eventNamespace = '.select' + _buttonNamespace++;\n\n\t\t\t// .DT namespace listeners are removed by DataTables automatically\n\t\t\t// on table destroy\n\t\t\tdt.on(namespacedEvents(config), function () {\n\t\t\t\tthat.enable(enabled(dt, config));\n\t\t\t});\n\n\t\t\tthis.disable();\n\t\t},\n\t\tdestroy: function (dt, node, config) {\n\t\t\tdt.off(config._eventNamespace);\n\t\t}\n\t},\n\tselectedSingle: {\n\t\ttext: i18n('selectedSingle', 'Selected single'),\n\t\tclassName: 'buttons-selected-single',\n\t\tinit: function (dt, node, config) {\n\t\t\tvar that = this;\n\t\t\tconfig._eventNamespace = '.select' + _buttonNamespace++;\n\n\t\t\tdt.on(namespacedEvents(config), function () {\n\t\t\t\tvar count =\n\t\t\t\t\tdt.rows({ selected: true }).flatten().length +\n\t\t\t\t\tdt.columns({ selected: true }).flatten().length +\n\t\t\t\t\tdt.cells({ selected: true }).flatten().length;\n\n\t\t\t\tthat.enable(count === 1);\n\t\t\t});\n\n\t\t\tthis.disable();\n\t\t},\n\t\tdestroy: function (dt, node, config) {\n\t\t\tdt.off(config._eventNamespace);\n\t\t}\n\t},\n\tselectAll: {\n\t\ttext: i18n('selectAll', 'Select all'),\n\t\tclassName: 'buttons-select-all',\n\t\taction: function (e, dt, node, config) {\n\t\t\tvar items = this.select.items();\n\t\t\tvar mod = config.selectorModifier;\n\t\t\t\n\t\t\tif (mod) {\n\t\t\t\tif (typeof mod === 'function') {\n\t\t\t\t\tmod = mod.call(dt, e, dt, node, config);\n\t\t\t\t}\n\n\t\t\t\tthis[items + 's'](mod).select();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis[items + 's']().select();\n\t\t\t}\n\t\t}\n\t\t// selectorModifier can be specified\n\t},\n\tselectNone: {\n\t\ttext: i18n('selectNone', 'Deselect all'),\n\t\tclassName: 'buttons-select-none',\n\t\taction: function () {\n\t\t\tclear(this.settings()[0], true);\n\t\t},\n\t\tinit: function (dt, node, config) {\n\t\t\tvar that = this;\n\t\t\tconfig._eventNamespace = '.select' + _buttonNamespace++;\n\n\t\t\tdt.on(namespacedEvents(config), function () {\n\t\t\t\tvar count =\n\t\t\t\t\tdt.rows({ selected: true }).flatten().length +\n\t\t\t\t\tdt.columns({ selected: true }).flatten().length +\n\t\t\t\t\tdt.cells({ selected: true }).flatten().length;\n\n\t\t\t\tthat.enable(count > 0);\n\t\t\t});\n\n\t\t\tthis.disable();\n\t\t},\n\t\tdestroy: function (dt, node, config) {\n\t\t\tdt.off(config._eventNamespace);\n\t\t}\n\t},\n\tshowSelected: {\n\t\ttext: i18n('showSelected', 'Show only selected'),\n\t\tclassName: 'buttons-show-selected',\n\t\taction: function (e, dt) {\n\t\t\tif (dt.search.fixed('dt-select')) {\n\t\t\t\t// Remove existing function\n\t\t\t\tdt.search.fixed('dt-select', null);\n\n\t\t\t\tthis.active(false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Use a fixed filtering function to match on selected rows\n\t\t\t\t// This needs to reference the internal aoData since that is\n\t\t\t\t// where Select stores its reference for the selected state\n\t\t\t\tvar dataSrc = dt.settings()[0].aoData;\n\n\t\t\t\tdt.search.fixed('dt-select', function (text, data, idx) {\n\t\t\t\t\t// _select_selected is set by Select on the data object for the row\n\t\t\t\t\treturn dataSrc[idx]._select_selected;\n\t\t\t\t});\n\n\t\t\t\tthis.active(true);\n\t\t\t}\n\n\t\t\tdt.draw();\n\t\t}\n\t}\n});\n\n$.each(['Row', 'Column', 'Cell'], function (i, item) {\n\tvar lc = item.toLowerCase();\n\n\tdatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ext.buttons['select' + item + 's'] = {\n\t\ttext: i18n('select' + item + 's', 'Select ' + lc + 's'),\n\t\tclassName: 'buttons-select-' + lc + 's',\n\t\taction: function () {\n\t\t\tthis.select.items(lc);\n\t\t},\n\t\tinit: function (dt) {\n\t\t\tvar that = this;\n\n\t\t\tthis.active(dt.select.items() === lc);\n\n\t\t\tdt.on('selectItems.dt.DT', function (e, ctx, items) {\n\t\t\t\tthat.active(items === lc);\n\t\t\t});\n\t\t}\n\t};\n});\n\n// Note that DataTables 2.1 has more robust type detection, but we retain\n// backwards compatibility with 2.0 for the moment.\ndatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].type('select-checkbox', {\n\tclassName: 'dt-select',\n\tdetect: datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].versionCheck('2.1')\n\t\t? {\n\t\t\toneOf: function () {\n\t\t\t\treturn false; // no op\n\t\t\t},\n\t\t\tallOf: function () {\n\t\t\t\treturn false; // no op\n\t\t\t},\n\t\t\tinit: function (settings, col, idx) {\n\t\t\t\treturn isCheckboxColumn(col);\n\t\t\t}\n\t\t}\n\t\t: function (data) {\n\t\t\t// Rendering function will tell us if it is a checkbox type\n\t\t\treturn data === 'select-checkbox' ? data : false;\n\t\t},\n\torder: {\n\t\tpre: function (d) {\n\t\t\treturn d === 'X' ? -1 : 0;\n\t\t}\n\t}\n});\n\n$.extend(true, datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].defaults.oLanguage, {\n\tselect: {\n\t\taria: {\n\t\t\trowCheckbox: 'Select row'\n\t\t}\n\t}\n});\n\ndatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].render.select = function (valueProp, nameProp) {\n\tvar valueFn = valueProp ? datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].util.get(valueProp) : null;\n\tvar nameFn = nameProp ? datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].util.get(nameProp) : null;\n\n\tvar fn = function (data, type, row, meta) {\n\t\tvar dtRow = meta.settings.aoData[meta.row];\n\t\tvar selected = dtRow._select_selected;\n\t\tvar ariaLabel = meta.settings.oLanguage.select.aria.rowCheckbox;\n\t\tvar selectable = meta.settings._select.selectable;\n\n\t\tif (type === 'display') {\n\t\t\t// Check if the row is selectable before showing the checkbox\n\t\t\tif (selectable) {\n\t\t\t\tvar result = selectable(row, dtRow.nTr, meta.row);\n\t\n\t\t\t\tif (result === false) {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $('<input>')\n\t\t\t\t.attr({\n\t\t\t\t\t'aria-label': ariaLabel,\n\t\t\t\t\tclass: checkboxClass(),\n\t\t\t\t\tname: nameFn ? nameFn(row) : null,\n\t\t\t\t\ttype: 'checkbox',\n\t\t\t\t\tvalue: valueFn ? valueFn(row) : null,\n\t\t\t\t\tchecked: selected\n\t\t\t\t})\n\t\t\t\t.on('input', function (e) {\n\t\t\t\t\t// Let Select 100% control the state of the checkbox\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\t// And make sure this checkbox matches it's row as it is possible\n\t\t\t\t\t// to check out of sync if this was clicked on to deselect a range\n\t\t\t\t\t// but remains selected itself\n\t\t\t\t\tthis.checked = $(this).closest('tr').hasClass('selected');\n\t\t\t\t})[0];\n\t\t}\n\t\telse if (type === 'type') {\n\t\t\treturn 'select-checkbox';\n\t\t}\n\t\telse if (type === 'filter') {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn selected ? 'X' : '';\n\t}\n\n\t// Workaround so uglify doesn't strip the function name. It is used\n\t// for the column type detection.\n\tfn._name = 'selectCheckbox';\n\n\treturn fn;\n}\n\n// Legacy checkbox ordering\ndatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ext.order['select-checkbox'] = function (settings, col) {\n\treturn this.api()\n\t\t.column(col, { order: 'index' })\n\t\t.nodes()\n\t\t.map(function (td) {\n\t\t\tif (settings._select.items === 'row') {\n\t\t\t\treturn $(td).parent().hasClass(settings._select.className).toString();\n\t\t\t}\n\t\t\telse if (settings._select.items === 'cell') {\n\t\t\t\treturn $(td).hasClass(settings._select.className).toString();\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n};\n\n$.fn.DataTable.select = datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select;\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Initialisation\n */\n\n// DataTables creation - we need this to run _before_ data is read in, but\n// for backwards compat. we also run again on preInit. If it happens twice\n// it will simply do nothing the second time around.\n$(document).on('i18n.dt.dtSelect preInit.dt.dtSelect', function (e, ctx) {\n\tif (e.namespace !== 'dt') {\n\t\treturn;\n\t}\n\n\tdatatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select.init(new datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Api(ctx));\n});\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (datatables_net__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/datatables.net-select/js/dataTables.select.mjs\n");

/***/ })

};
;